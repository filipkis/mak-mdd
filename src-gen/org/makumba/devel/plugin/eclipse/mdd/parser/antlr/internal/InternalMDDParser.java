package org.makumba.devel.plugin.eclipse.mdd.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.makumba.devel.plugin.eclipse.mdd.services.MDDGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
public class InternalMDDParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "RULE_LINEBREAK", "RULE_FIELDCOMMENT", "RULE_ID", "RULE_STRING", "RULE_INT", "RULE_SIGNED_INT", "RULE_HEX", "RULE_SL_COMMENT", "RULE_WS", "'='", "'unique'", "'fixed'", "'not'", "'null'", "'empty'", "'set'", "'int'", "'real'", "'boolean'", "'text'", "'binary'", "'file'", "'date'", "'{'", "','", "'}'", "'char'", "'deprecated'", "'['", "']'", "'ptr'", "'->'", "'.'", "'!'", "'title'", "'include'", "'type'", "'compare'", "'upper'", "'('", "')'", "'lower'", "'<'", "'>'", "'<='", "'>='", "'!='", "'^='", "'<>'", "'like'", "'$now'", "'$today'", "'+'", "'-'", "'range'", "'length'", "'matches'", "'..'", "'?'", "':'", "'notNull'", "'NaN'", "'notEmpty'", "'notInt'", "'notReal'", "'notBoolean'", "'%'", "'union'", "'||'", "'*'", "'/'", "'$'", "'e'", "'f'", "'d'", "'l'", "'SELECT'", "'Select'", "'select'", "'DISTINCT'", "'Distinct'", "'distinct'", "'NEW'", "'New'", "'new'", "'OBJECT'", "'Object'", "'object'", "'FROM'", "'From'", "'from'", "'LEFT'", "'Left'", "'left'", "'RIGHT'", "'Right'", "'right'", "'OUTER'", "'Outer'", "'outer'", "'FULL'", "'Full'", "'full'", "'INNER'", "'Inner'", "'inner'", "'JOIN'", "'Join'", "'join'", "'FETCH'", "'Fetch'", "'fetch'", "'WITH'", "'With'", "'with'", "'IN'", "'In'", "'in'", "'CLASS'", "'Class'", "'class'", "'ELEMENTS'", "'Elements'", "'elements'", "'AS'", "'As'", "'as'", "'PROPERTIES'", "'Properties'", "'properties'", "'GROUP'", "'Group'", "'group'", "'ORDER'", "'Order'", "'order'", "'BY'", "'By'", "'by'", "'ASC'", "'Asc'", "'asc'", "'ASCENDING'", "'Ascending'", "'ascending'", "'DESC'", "'Desc'", "'desc'", "'DESCENDING'", "'Descending'", "'descending'", "'HAVING'", "'Having'", "'having'", "'WHERE'", "'Where'", "'where'", "'OR'", "'Or'", "'or'", "'AND'", "'And'", "'and'", "'NOT'", "'Not'", "'IS'", "'Is'", "'is'", "'BETWEEN'", "'Between'", "'between'", "'LIKE'", "'Like'", "'MEMBER'", "'Member'", "'member'", "'OF'", "'Of'", "'of'", "'ESCAPE'", "'Escape'", "'escape'", "'CASE'", "'Case'", "'case'", "'END'", "'End'", "'end'", "'WHEN'", "'When'", "'when'", "'THEN'", "'Then'", "'then'", "'ELSE'", "'Else'", "'else'", "'SOME'", "'Some'", "'some'", "'EXISTS'", "'Exists'", "'exists'", "'ALL'", "'All'", "'all'", "'ANY'", "'Any'", "'any'", "'SUM'", "'Sum'", "'sum'", "'AVG'", "'Avg'", "'avg'", "'MAX'", "'Max'", "'max'", "'MIN'", "'Min'", "'min'", "'COUNT'", "'Count'", "'count'", "'INDICES'", "'Indices'", "'indices'", "'TRAILING'", "'Trailing'", "'trailing'", "'LEADING'", "'Leading'", "'leading'", "'BOTH'", "'Both'", "'both'", "'NULL'", "'Null'", "'TRUE'", "'True'", "'true'", "'FALSE'", "'False'", "'false'", "'EMPTY'", "'Empty'"
    };
    public static final int RULE_ID=6;
    public static final int RULE_HEX=10;
    public static final int RULE_STRING=7;
    public static final int RULE_LINEBREAK=4;
    public static final int RULE_FIELDCOMMENT=5;
    public static final int RULE_INT=8;
    public static final int RULE_SIGNED_INT=9;
    public static final int RULE_WS=12;
    public static final int RULE_SL_COMMENT=11;
    public static final int EOF=-1;

        public InternalMDDParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[687+1];
         }
        

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */
     
     	private MDDGrammarAccess grammarAccess;
     	
        public InternalMDDParser(TokenStream input, IAstFactory factory, MDDGrammarAccess grammarAccess) {
            this(input);
            this.factory = factory;
            registerRules(grammarAccess.getGrammar());
            this.grammarAccess = grammarAccess;
        }
        
        @Override
        protected InputStream getTokenFile() {
        	ClassLoader classLoader = getClass().getClassLoader();
        	return classLoader.getResourceAsStream("org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.tokens");
        }
        
        @Override
        protected String getFirstRuleName() {
        	return "dataDefinition";	
       	}
       	
       	@Override
       	protected MDDGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}



    // $ANTLR start entryRuledataDefinition
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:83:1: entryRuledataDefinition returns [EObject current=null] : iv_ruledataDefinition= ruledataDefinition EOF ;
    public final EObject entryRuledataDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruledataDefinition = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:84:2: (iv_ruledataDefinition= ruledataDefinition EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:85:2: iv_ruledataDefinition= ruledataDefinition EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDataDefinitionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruledataDefinition_in_entryRuledataDefinition81);
            iv_ruledataDefinition=ruledataDefinition();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruledataDefinition; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuledataDefinition91); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuledataDefinition


    // $ANTLR start ruledataDefinition
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:92:1: ruledataDefinition returns [EObject current=null] : ( ( RULE_LINEBREAK )* ( ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )* )+ ) ;
    public final EObject ruledataDefinition() throws RecognitionException {
        EObject current = null;

        EObject lv_d_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:97:6: ( ( ( RULE_LINEBREAK )* ( ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )* )+ ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:1: ( ( RULE_LINEBREAK )* ( ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )* )+ )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:1: ( ( RULE_LINEBREAK )* ( ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )* )+ )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:2: ( RULE_LINEBREAK )* ( ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )* )+
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:2: ( RULE_LINEBREAK )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==RULE_LINEBREAK) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:3: RULE_LINEBREAK
            	    {
            	    match(input,RULE_LINEBREAK,FOLLOW_RULE_LINEBREAK_in_ruledataDefinition126); if (failed) return current;
            	    if ( backtracking==0 ) {
            	       
            	          createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_0(), null); 
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:102:3: ( ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )* )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==RULE_ID||LA4_0==14||LA4_0==23||(LA4_0>=25 && LA4_0<=26)||LA4_0==30||(LA4_0>=37 && LA4_0<=38)||(LA4_0>=40 && LA4_0<=41)||(LA4_0>=58 && LA4_0<=60)||LA4_0==91||LA4_0==179||LA4_0==191||LA4_0==194||LA4_0==209||LA4_0==221) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:102:4: ( (lv_d_1_0= ruledeclaration ) ) ( RULE_FIELDCOMMENT )? ( RULE_LINEBREAK )*
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:102:4: ( (lv_d_1_0= ruledeclaration ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:103:1: (lv_d_1_0= ruledeclaration )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:103:1: (lv_d_1_0= ruledeclaration )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:104:3: lv_d_1_0= ruledeclaration
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getDataDefinitionAccess().getDDeclarationParserRuleCall_1_0_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruledeclaration_in_ruledataDefinition149);
            	    lv_d_1_0=ruledeclaration();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getDataDefinitionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"d",
            	      	        		lv_d_1_0, 
            	      	        		"declaration", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }

            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:126:2: ( RULE_FIELDCOMMENT )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==RULE_FIELDCOMMENT) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:126:3: RULE_FIELDCOMMENT
            	            {
            	            match(input,RULE_FIELDCOMMENT,FOLLOW_RULE_FIELDCOMMENT_in_ruledataDefinition159); if (failed) return current;
            	            if ( backtracking==0 ) {
            	               
            	                  createLeafNode(grammarAccess.getDataDefinitionAccess().getFIELDCOMMENTTerminalRuleCall_1_1(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:130:3: ( RULE_LINEBREAK )*
            	    loop3:
            	    do {
            	        int alt3=2;
            	        int LA3_0 = input.LA(1);

            	        if ( (LA3_0==RULE_LINEBREAK) ) {
            	            alt3=1;
            	        }


            	        switch (alt3) {
            	    	case 1 :
            	    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:130:4: RULE_LINEBREAK
            	    	    {
            	    	    match(input,RULE_LINEBREAK,FOLLOW_RULE_LINEBREAK_in_ruledataDefinition170); if (failed) return current;
            	    	    if ( backtracking==0 ) {
            	    	       
            	    	          createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_1_2(), null); 
            	    	          
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop3;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (backtracking>0) {failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruledataDefinition


    // $ANTLR start entryRuledeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:142:1: entryRuledeclaration returns [EObject current=null] : iv_ruledeclaration= ruledeclaration EOF ;
    public final EObject entryRuledeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruledeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:143:2: (iv_ruledeclaration= ruledeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:144:2: iv_ruledeclaration= ruledeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruledeclaration_in_entryRuledeclaration209);
            iv_ruledeclaration=ruledeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruledeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuledeclaration219); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuledeclaration


    // $ANTLR start ruledeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:151:1: ruledeclaration returns [EObject current=null] : (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration ) ;
    public final EObject ruledeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_fieldDeclaration_0 = null;

        EObject this_titleDeclaration_1 = null;

        EObject this_typeDeclaration_2 = null;

        EObject this_includeDeclaration_3 = null;

        EObject this_validationRuleDeclaration_4 = null;

        EObject this_functionDeclaration_5 = null;

        EObject this_nativeValidationRuleDeclaration_6 = null;

        EObject this_subFieldDeclaration_7 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:156:6: ( (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:157:1: (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:157:1: (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration )
            int alt5=8;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                switch ( input.LA(2) ) {
                case 35:
                    {
                    alt5=8;
                    }
                    break;
                case 43:
                case 70:
                    {
                    alt5=6;
                    }
                    break;
                case 36:
                    {
                    alt5=7;
                    }
                    break;
                case 13:
                    {
                    alt5=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("157:1: (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration )", 5, 1, input);

                    throw nvae;
                }

                }
                break;
            case 23:
            case 25:
            case 26:
            case 30:
            case 38:
            case 40:
            case 91:
            case 179:
            case 191:
            case 194:
            case 209:
            case 221:
                {
                alt5=1;
                }
                break;
            case 59:
                {
                int LA5_3 = input.LA(2);

                if ( (LA5_3==43) ) {
                    alt5=5;
                }
                else if ( (LA5_3==13) ) {
                    alt5=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("157:1: (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration )", 5, 3, input);

                    throw nvae;
                }
                }
                break;
            case 37:
                {
                switch ( input.LA(2) ) {
                case 40:
                    {
                    alt5=3;
                    }
                    break;
                case 38:
                    {
                    alt5=2;
                    }
                    break;
                case 39:
                    {
                    alt5=4;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("157:1: (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration )", 5, 4, input);

                    throw nvae;
                }

                }
                break;
            case 14:
            case 41:
            case 58:
            case 60:
                {
                alt5=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("157:1: (this_fieldDeclaration_0= rulefieldDeclaration | this_titleDeclaration_1= ruletitleDeclaration | this_typeDeclaration_2= ruletypeDeclaration | this_includeDeclaration_3= ruleincludeDeclaration | this_validationRuleDeclaration_4= rulevalidationRuleDeclaration | this_functionDeclaration_5= rulefunctionDeclaration | this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration | this_subFieldDeclaration_7= rulesubFieldDeclaration )", 5, 0, input);

                throw nvae;
            }

            switch (alt5) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:158:2: this_fieldDeclaration_0= rulefieldDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getFieldDeclarationParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulefieldDeclaration_in_ruledeclaration269);
                    this_fieldDeclaration_0=rulefieldDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_fieldDeclaration_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:171:2: this_titleDeclaration_1= ruletitleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getTitleDeclarationParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruletitleDeclaration_in_ruledeclaration299);
                    this_titleDeclaration_1=ruletitleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_titleDeclaration_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:184:2: this_typeDeclaration_2= ruletypeDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruletypeDeclaration_in_ruledeclaration329);
                    this_typeDeclaration_2=ruletypeDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_typeDeclaration_2; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:197:2: this_includeDeclaration_3= ruleincludeDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleincludeDeclaration_in_ruledeclaration359);
                    this_includeDeclaration_3=ruleincludeDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_includeDeclaration_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:210:2: this_validationRuleDeclaration_4= rulevalidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getValidationRuleDeclarationParserRuleCall_4(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulevalidationRuleDeclaration_in_ruledeclaration389);
                    this_validationRuleDeclaration_4=rulevalidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_validationRuleDeclaration_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:223:2: this_functionDeclaration_5= rulefunctionDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_5(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulefunctionDeclaration_in_ruledeclaration419);
                    this_functionDeclaration_5=rulefunctionDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_functionDeclaration_5; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:236:2: this_nativeValidationRuleDeclaration_6= rulenativeValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getNativeValidationRuleDeclarationParserRuleCall_6(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulenativeValidationRuleDeclaration_in_ruledeclaration449);
                    this_nativeValidationRuleDeclaration_6=rulenativeValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_nativeValidationRuleDeclaration_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:249:2: this_subFieldDeclaration_7= rulesubFieldDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getSubFieldDeclarationParserRuleCall_7(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulesubFieldDeclaration_in_ruledeclaration479);
                    this_subFieldDeclaration_7=rulesubFieldDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_subFieldDeclaration_7; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruledeclaration


    // $ANTLR start entryRulefieldDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:268:1: entryRulefieldDeclaration returns [EObject current=null] : iv_rulefieldDeclaration= rulefieldDeclaration EOF ;
    public final EObject entryRulefieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefieldDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:269:2: (iv_rulefieldDeclaration= rulefieldDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:270:2: iv_rulefieldDeclaration= rulefieldDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFieldDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefieldDeclaration_in_entryRulefieldDeclaration514);
            iv_rulefieldDeclaration=rulefieldDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefieldDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefieldDeclaration524); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefieldDeclaration


    // $ANTLR start rulefieldDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:277:1: rulefieldDeclaration returns [EObject current=null] : ( ( ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) ) ) '=' ( ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) ) )? ) ;
    public final EObject rulefieldDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_1=null;
        AntlrDatatypeRuleToken lv_name_0_2 = null;

        EObject lv_modifiers_2_0 = null;

        EObject lv_typedef_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:282:6: ( ( ( ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) ) ) '=' ( ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:283:1: ( ( ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) ) ) '=' ( ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:283:1: ( ( ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) ) ) '=' ( ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:283:2: ( ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) ) ) '=' ( ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:283:2: ( ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:284:1: ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:284:1: ( (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==RULE_ID) ) {
                alt6=1;
            }
            else if ( (LA6_0==23||(LA6_0>=25 && LA6_0<=26)||LA6_0==30||LA6_0==38||LA6_0==40||LA6_0==59||LA6_0==91||LA6_0==179||LA6_0==191||LA6_0==194||LA6_0==209||LA6_0==221) ) {
                alt6=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("285:1: (lv_name_0_1= RULE_ID | lv_name_0_2= rulekeyword )", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:286:3: lv_name_0_1= RULE_ID
                    {
                    lv_name_0_1=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_rulefieldDeclaration568); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_0_0_0(), "name"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"name",
                      	        		lv_name_0_1, 
                      	        		"ID", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:307:8: lv_name_0_2= rulekeyword
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getNameKeywordParserRuleCall_0_0_1(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulekeyword_in_rulefieldDeclaration592);
                    lv_name_0_2=rulekeyword();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"name",
                      	        		lv_name_0_2, 
                      	        		"keyword", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }
                    break;

            }


            }


            }

            match(input,13,FOLLOW_13_in_rulefieldDeclaration605); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFieldDeclarationAccess().getEqualsSignKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:335:1: ( ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==14) ) {
                int LA7_1 = input.LA(2);

                if ( (LA7_1==RULE_ID||(LA7_1>=14 && LA7_1<=16)||(LA7_1>=19 && LA7_1<=26)||LA7_1==30||LA7_1==34) ) {
                    alt7=1;
                }
            }
            else if ( (LA7_0==15) && (getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1))) {
                alt7=1;
            }
            else if ( (LA7_0==16) && ((getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)||getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)))) {
                alt7=1;
            }
            else if ( (LA7_0==30) ) {
                int LA7_4 = input.LA(2);

                if ( (LA7_4==EOF||(LA7_4>=RULE_LINEBREAK && LA7_4<=RULE_ID)||LA7_4==14||LA7_4==23||(LA7_4>=25 && LA7_4<=27)||LA7_4==30||LA7_4==32||(LA7_4>=37 && LA7_4<=38)||(LA7_4>=40 && LA7_4<=41)||(LA7_4>=58 && LA7_4<=60)||LA7_4==91||LA7_4==179||LA7_4==191||LA7_4==194||LA7_4==209||LA7_4==221) ) {
                    alt7=1;
                }
            }
            else if ( ((LA7_0>=19 && LA7_0<=22)||LA7_0==24||LA7_0==34) ) {
                alt7=1;
            }
            else if ( (LA7_0==23) ) {
                int LA7_6 = input.LA(2);

                if ( (LA7_6==EOF||(LA7_6>=RULE_LINEBREAK && LA7_6<=RULE_ID)||LA7_6==14||LA7_6==23||(LA7_6>=25 && LA7_6<=26)||LA7_6==30||(LA7_6>=37 && LA7_6<=38)||(LA7_6>=40 && LA7_6<=41)||(LA7_6>=58 && LA7_6<=60)||LA7_6==91||LA7_6==179||LA7_6==191||LA7_6==194||LA7_6==209||LA7_6==221) ) {
                    alt7=1;
                }
            }
            else if ( (LA7_0==25) ) {
                int LA7_7 = input.LA(2);

                if ( (LA7_7==EOF||(LA7_7>=RULE_LINEBREAK && LA7_7<=RULE_ID)||LA7_7==14||LA7_7==23||(LA7_7>=25 && LA7_7<=26)||LA7_7==30||(LA7_7>=37 && LA7_7<=38)||(LA7_7>=40 && LA7_7<=41)||(LA7_7>=58 && LA7_7<=60)||LA7_7==91||LA7_7==179||LA7_7==191||LA7_7==194||LA7_7==209||LA7_7==221) ) {
                    alt7=1;
                }
            }
            else if ( (LA7_0==26) ) {
                int LA7_8 = input.LA(2);

                if ( (LA7_8==EOF||(LA7_8>=RULE_LINEBREAK && LA7_8<=RULE_ID)||LA7_8==14||LA7_8==23||(LA7_8>=25 && LA7_8<=26)||LA7_8==30||(LA7_8>=37 && LA7_8<=38)||(LA7_8>=40 && LA7_8<=41)||(LA7_8>=58 && LA7_8<=60)||LA7_8==91||LA7_8==179||LA7_8==191||LA7_8==194||LA7_8==209||LA7_8==221) ) {
                    alt7=1;
                }
            }
            else if ( (LA7_0==RULE_ID) ) {
                int LA7_9 = input.LA(2);

                if ( (LA7_9==EOF||(LA7_9>=RULE_LINEBREAK && LA7_9<=RULE_ID)||LA7_9==14||LA7_9==23||(LA7_9>=25 && LA7_9<=26)||LA7_9==30||(LA7_9>=37 && LA7_9<=38)||(LA7_9>=40 && LA7_9<=41)||(LA7_9>=58 && LA7_9<=60)||LA7_9==91||LA7_9==179||LA7_9==191||LA7_9==194||LA7_9==209||LA7_9==221) ) {
                    alt7=1;
                }
            }
            switch (alt7) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:335:2: ( (lv_modifiers_2_0= rulemodifiers ) ) ( (lv_typedef_3_0= rulefieldType ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:335:2: ( (lv_modifiers_2_0= rulemodifiers ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:336:1: (lv_modifiers_2_0= rulemodifiers )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:336:1: (lv_modifiers_2_0= rulemodifiers )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:337:3: lv_modifiers_2_0= rulemodifiers
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getModifiersModifiersParserRuleCall_2_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulemodifiers_in_rulefieldDeclaration627);
                    lv_modifiers_2_0=rulemodifiers();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"modifiers",
                      	        		lv_modifiers_2_0, 
                      	        		"modifiers", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:359:2: ( (lv_typedef_3_0= rulefieldType ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:360:1: (lv_typedef_3_0= rulefieldType )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:360:1: (lv_typedef_3_0= rulefieldType )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:361:3: lv_typedef_3_0= rulefieldType
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getTypedefFieldTypeParserRuleCall_2_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulefieldType_in_rulefieldDeclaration648);
                    lv_typedef_3_0=rulefieldType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"typedef",
                      	        		lv_typedef_3_0, 
                      	        		"fieldType", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefieldDeclaration


    // $ANTLR start entryRulemodifiers
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:391:1: entryRulemodifiers returns [EObject current=null] : iv_rulemodifiers= rulemodifiers EOF ;
    public final EObject entryRulemodifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_rulemodifiers = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:392:2: (iv_rulemodifiers= rulemodifiers EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:393:2: iv_rulemodifiers= rulemodifiers EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getModifiersRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulemodifiers_in_entryRulemodifiers686);
            iv_rulemodifiers=rulemodifiers();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulemodifiers; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulemodifiers696); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulemodifiers


    // $ANTLR start rulemodifiers
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:400:1: rulemodifiers returns [EObject current=null] : ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) ) ;
    public final EObject rulemodifiers() throws RecognitionException {
        EObject current = null;

        Token lv_unique_1_0=null;
        Token lv_fixed_2_0=null;
        Token lv_notNull_3_0=null;
        Token lv_notEmpty_5_0=null;

         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:405:6: ( ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:406:1: ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:406:1: ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:408:1: ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:408:1: ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:409:2: ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* )
            {
            if ( backtracking==0 ) {
               
              	  getUnorderedGroupHelper().enter(grammarAccess.getModifiersAccess().getUnorderedGroup());
              	
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:412:2: ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:413:3: ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:413:3: ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )*
            loop8:
            do {
                int alt8=5;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==14) && (getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0))) {
                    alt8=1;
                }
                else if ( (LA8_0==15) && (getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1))) {
                    alt8=2;
                }
                else if ( (LA8_0==16) ) {
                    int LA8_4 = input.LA(2);

                    if ( (LA8_4==18) && (getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3))) {
                        alt8=4;
                    }
                    else if ( (LA8_4==17) && (getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2))) {
                        alt8=3;
                    }


                }


                switch (alt8) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:415:4: ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:415:4: ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:416:5: {...}? => ( ( (lv_unique_1_0= 'unique' ) ) )
            	    {
            	    if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulemodifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)");
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:416:104: ( ( (lv_unique_1_0= 'unique' ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:417:6: ( (lv_unique_1_0= 'unique' ) )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0);
            	      	 				
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:420:6: ( (lv_unique_1_0= 'unique' ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:421:1: (lv_unique_1_0= 'unique' )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:421:1: (lv_unique_1_0= 'unique' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:422:3: lv_unique_1_0= 'unique'
            	    {
            	    lv_unique_1_0=(Token)input.LT(1);
            	    match(input,14,FOLLOW_14_in_rulemodifiers780); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0(), "unique"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "unique", true, "unique", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:448:4: ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:448:4: ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:449:5: {...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) )
            	    {
            	    if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulemodifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)");
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:449:104: ( ( (lv_fixed_2_0= 'fixed' ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:450:6: ( (lv_fixed_2_0= 'fixed' ) )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1);
            	      	 				
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:453:6: ( (lv_fixed_2_0= 'fixed' ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:454:1: (lv_fixed_2_0= 'fixed' )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:454:1: (lv_fixed_2_0= 'fixed' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:455:3: lv_fixed_2_0= 'fixed'
            	    {
            	    lv_fixed_2_0=(Token)input.LT(1);
            	    match(input,15,FOLLOW_15_in_rulemodifiers861); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0(), "fixed"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "fixed", true, "fixed", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:481:4: ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:481:4: ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:482:5: {...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) )
            	    {
            	    if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulemodifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)");
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:482:104: ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:483:6: ( ( (lv_notNull_3_0= 'not' ) ) 'null' )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2);
            	      	 				
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:486:6: ( ( (lv_notNull_3_0= 'not' ) ) 'null' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:486:7: ( (lv_notNull_3_0= 'not' ) ) 'null'
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:486:7: ( (lv_notNull_3_0= 'not' ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:487:1: (lv_notNull_3_0= 'not' )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:487:1: (lv_notNull_3_0= 'not' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:488:3: lv_notNull_3_0= 'not'
            	    {
            	    lv_notNull_3_0=(Token)input.LT(1);
            	    match(input,16,FOLLOW_16_in_rulemodifiers943); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0(), "notNull"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "notNull", true, "not", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    match(input,17,FOLLOW_17_in_rulemodifiers966); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getNullKeyword_2_1(), null); 
            	          
            	    }

            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:518:4: ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:518:4: ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:519:5: {...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) )
            	    {
            	    if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulemodifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)");
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:519:104: ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:520:6: ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3);
            	      	 				
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:523:6: ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:523:7: ( (lv_notEmpty_5_0= 'not' ) ) 'empty'
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:523:7: ( (lv_notEmpty_5_0= 'not' ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:524:1: (lv_notEmpty_5_0= 'not' )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:524:1: (lv_notEmpty_5_0= 'not' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:525:3: lv_notEmpty_5_0= 'not'
            	    {
            	    lv_notEmpty_5_0=(Token)input.LT(1);
            	    match(input,16,FOLLOW_16_in_rulemodifiers1036); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0(), "notEmpty"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "notEmpty", true, "not", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    match(input,18,FOLLOW_18_in_rulemodifiers1059); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getEmptyKeyword_3_1(), null); 
            	          
            	    }

            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               
              	  getUnorderedGroupHelper().leave(grammarAccess.getModifiersAccess().getUnorderedGroup());
              	
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulemodifiers


    // $ANTLR start entryRulefieldType
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:570:1: entryRulefieldType returns [EObject current=null] : iv_rulefieldType= rulefieldType EOF ;
    public final EObject entryRulefieldType() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefieldType = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:571:2: (iv_rulefieldType= rulefieldType EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:572:2: iv_rulefieldType= rulefieldType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFieldTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefieldType_in_entryRulefieldType1134);
            iv_rulefieldType=rulefieldType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefieldType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefieldType1144); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefieldType


    // $ANTLR start rulefieldType
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:579:1: rulefieldType returns [EObject current=null] : (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) ) ;
    public final EObject rulefieldType() throws RecognitionException {
        EObject current = null;

        Token lv_type_8_1=null;
        Token lv_type_8_2=null;
        Token lv_type_8_3=null;
        Token lv_type_8_4=null;
        Token lv_type_8_5=null;
        Token lv_type_8_6=null;
        Token lv_type_8_7=null;
        EObject this_charType_0 = null;

        EObject this_charEnum_1 = null;

        EObject this_charEnum_3 = null;

        EObject this_intEnum_4 = null;

        EObject this_intEnum_6 = null;

        EObject this_pointer_9 = null;

        EObject this_setType_10 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:584:6: ( (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )
            int alt10=9;
            switch ( input.LA(1) ) {
            case 30:
                {
                int LA10_1 = input.LA(2);

                if ( (LA10_1==27) ) {
                    alt10=2;
                }
                else if ( (LA10_1==EOF||(LA10_1>=RULE_LINEBREAK && LA10_1<=RULE_ID)||LA10_1==14||LA10_1==23||(LA10_1>=25 && LA10_1<=26)||LA10_1==30||LA10_1==32||(LA10_1>=37 && LA10_1<=38)||(LA10_1>=40 && LA10_1<=41)||(LA10_1>=58 && LA10_1<=60)||LA10_1==91||LA10_1==179||LA10_1==191||LA10_1==194||LA10_1==209||LA10_1==221) ) {
                    alt10=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )", 10, 1, input);

                    throw nvae;
                }
                }
                break;
            case 19:
                {
                switch ( input.LA(2) ) {
                case 30:
                    {
                    int LA10_9 = input.LA(3);

                    if ( (LA10_9==27) ) {
                        alt10=3;
                    }
                    else if ( (LA10_9==EOF||(LA10_9>=RULE_LINEBREAK && LA10_9<=RULE_ID)||(LA10_9>=13 && LA10_9<=14)||LA10_9==23||(LA10_9>=25 && LA10_9<=26)||LA10_9==30||(LA10_9>=35 && LA10_9<=38)||(LA10_9>=40 && LA10_9<=41)||(LA10_9>=58 && LA10_9<=60)||LA10_9==91||LA10_9==179||LA10_9==191||LA10_9==194||LA10_9==209||LA10_9==221) ) {
                        alt10=8;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )", 10, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_LINEBREAK:
                case RULE_FIELDCOMMENT:
                case RULE_ID:
                case 14:
                case 23:
                case 25:
                case 26:
                case 37:
                case 38:
                case 40:
                case 41:
                case 58:
                case 59:
                case 60:
                case 91:
                case 179:
                case 191:
                case 194:
                case 209:
                case 221:
                    {
                    alt10=8;
                    }
                    break;
                case 20:
                    {
                    alt10=5;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )", 10, 2, input);

                    throw nvae;
                }

                }
                break;
            case 20:
                {
                int LA10_3 = input.LA(2);

                if ( (LA10_3==27) ) {
                    alt10=4;
                }
                else if ( (LA10_3==EOF||(LA10_3>=RULE_LINEBREAK && LA10_3<=RULE_ID)||LA10_3==14||LA10_3==23||(LA10_3>=25 && LA10_3<=26)||LA10_3==30||(LA10_3>=37 && LA10_3<=38)||(LA10_3>=40 && LA10_3<=41)||(LA10_3>=58 && LA10_3<=60)||LA10_3==91||LA10_3==179||LA10_3==191||LA10_3==194||LA10_3==209||LA10_3==221) ) {
                    alt10=6;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )", 10, 3, input);

                    throw nvae;
                }
                }
                break;
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
                {
                alt10=6;
                }
                break;
            case 34:
                {
                alt10=7;
                }
                break;
            case RULE_ID:
                {
                alt10=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("585:1: (this_charType_0= rulecharType | this_charEnum_1= rulecharEnum | ( 'set' this_charEnum_3= rulecharEnum ) | this_intEnum_4= ruleintEnum | ( 'set' this_intEnum_6= ruleintEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_pointer_9= rulepointer | this_setType_10= rulesetType | ( ( RULE_ID ) ) )", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:586:2: this_charType_0= rulecharType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharTypeParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecharType_in_rulefieldType1194);
                    this_charType_0=rulecharType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_charType_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:599:2: this_charEnum_1= rulecharEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecharEnum_in_rulefieldType1224);
                    this_charEnum_1=rulecharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_charEnum_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:611:6: ( 'set' this_charEnum_3= rulecharEnum )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:611:6: ( 'set' this_charEnum_3= rulecharEnum )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:611:8: 'set' this_charEnum_3= rulecharEnum
                    {
                    match(input,19,FOLLOW_19_in_rulefieldType1240); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFieldTypeAccess().getSetKeyword_2_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_2_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecharEnum_in_rulefieldType1265);
                    this_charEnum_3=rulecharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_charEnum_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:629:2: this_intEnum_4= ruleintEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleintEnum_in_rulefieldType1296);
                    this_intEnum_4=ruleintEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_intEnum_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:641:6: ( 'set' this_intEnum_6= ruleintEnum )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:641:6: ( 'set' this_intEnum_6= ruleintEnum )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:641:8: 'set' this_intEnum_6= ruleintEnum
                    {
                    match(input,19,FOLLOW_19_in_rulefieldType1312); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFieldTypeAccess().getSetKeyword_4_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_4_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleintEnum_in_rulefieldType1337);
                    this_intEnum_6=ruleintEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_intEnum_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:658:6: ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:658:6: ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:658:7: () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:658:7: ()
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:659:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:672:2: ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:673:1: ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:673:1: ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:674:1: (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:674:1: (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' )
                    int alt9=7;
                    switch ( input.LA(1) ) {
                    case 20:
                        {
                        alt9=1;
                        }
                        break;
                    case 21:
                        {
                        alt9=2;
                        }
                        break;
                    case 22:
                        {
                        alt9=3;
                        }
                        break;
                    case 23:
                        {
                        alt9=4;
                        }
                        break;
                    case 24:
                        {
                        alt9=5;
                        }
                        break;
                    case 25:
                        {
                        alt9=6;
                        }
                        break;
                    case 26:
                        {
                        alt9=7;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("674:1: (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' )", 9, 0, input);

                        throw nvae;
                    }

                    switch (alt9) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:675:3: lv_type_8_1= 'int'
                            {
                            lv_type_8_1=(Token)input.LT(1);
                            match(input,20,FOLLOW_20_in_rulefieldType1376); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeIntKeyword_5_1_0_0(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_1, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:693:8: lv_type_8_2= 'real'
                            {
                            lv_type_8_2=(Token)input.LT(1);
                            match(input,21,FOLLOW_21_in_rulefieldType1405); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeRealKeyword_5_1_0_1(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_2, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:711:8: lv_type_8_3= 'boolean'
                            {
                            lv_type_8_3=(Token)input.LT(1);
                            match(input,22,FOLLOW_22_in_rulefieldType1434); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeBooleanKeyword_5_1_0_2(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_3, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 4 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:729:8: lv_type_8_4= 'text'
                            {
                            lv_type_8_4=(Token)input.LT(1);
                            match(input,23,FOLLOW_23_in_rulefieldType1463); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeTextKeyword_5_1_0_3(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_4, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 5 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:747:8: lv_type_8_5= 'binary'
                            {
                            lv_type_8_5=(Token)input.LT(1);
                            match(input,24,FOLLOW_24_in_rulefieldType1492); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeBinaryKeyword_5_1_0_4(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_5, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 6 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:765:8: lv_type_8_6= 'file'
                            {
                            lv_type_8_6=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_rulefieldType1521); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeFileKeyword_5_1_0_5(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_6, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 7 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:783:8: lv_type_8_7= 'date'
                            {
                            lv_type_8_7=(Token)input.LT(1);
                            match(input,26,FOLLOW_26_in_rulefieldType1550); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeDateKeyword_5_1_0_6(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_7, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:806:2: this_pointer_9= rulepointer
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getPointerParserRuleCall_6(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulepointer_in_rulefieldType1598);
                    this_pointer_9=rulepointer();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_pointer_9; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:819:2: this_setType_10= rulesetType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getSetTypeParserRuleCall_7(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulesetType_in_rulefieldType1628);
                    this_setType_10=rulesetType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_setType_10; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:831:6: ( ( RULE_ID ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:831:6: ( ( RULE_ID ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:832:1: ( RULE_ID )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:832:1: ( RULE_ID )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:833:3: RULE_ID
                    {
                    if ( backtracking==0 ) {
                       
                      		  /* */ 
                      		
                    }
                    if ( backtracking==0 ) {

                      			if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                              
                    }
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_rulefieldType1655); if (failed) return current;
                    if ( backtracking==0 ) {

                      		createLeafNode(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationCrossReference_8_0(), "typeDec"); 
                      	
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefieldType


    // $ANTLR start entryRuleintEnum
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:856:1: entryRuleintEnum returns [EObject current=null] : iv_ruleintEnum= ruleintEnum EOF ;
    public final EObject entryRuleintEnum() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleintEnum = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:857:2: (iv_ruleintEnum= ruleintEnum EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:858:2: iv_ruleintEnum= ruleintEnum EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIntEnumRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleintEnum_in_entryRuleintEnum1691);
            iv_ruleintEnum=ruleintEnum();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleintEnum; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleintEnum1701); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleintEnum


    // $ANTLR start ruleintEnum
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:865:1: ruleintEnum returns [EObject current=null] : ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleenumValue ) ) ( ',' ( (lv_values_4_0= ruleenumValue ) ) )* '}' ) ;
    public final EObject ruleintEnum() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_values_2_0 = null;

        EObject lv_values_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:870:6: ( ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleenumValue ) ) ( ',' ( (lv_values_4_0= ruleenumValue ) ) )* '}' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:871:1: ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleenumValue ) ) ( ',' ( (lv_values_4_0= ruleenumValue ) ) )* '}' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:871:1: ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleenumValue ) ) ( ',' ( (lv_values_4_0= ruleenumValue ) ) )* '}' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:871:2: ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleenumValue ) ) ( ',' ( (lv_values_4_0= ruleenumValue ) ) )* '}'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:871:2: ( (lv_name_0_0= 'int' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:872:1: (lv_name_0_0= 'int' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:872:1: (lv_name_0_0= 'int' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:873:3: lv_name_0_0= 'int'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,20,FOLLOW_20_in_ruleintEnum1744); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "int", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_ruleintEnum1767); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIntEnumAccess().getLeftCurlyBracketKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:896:1: ( (lv_values_2_0= ruleenumValue ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:897:1: (lv_values_2_0= ruleenumValue )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:897:1: (lv_values_2_0= ruleenumValue )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:898:3: lv_values_2_0= ruleenumValue
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleenumValue_in_ruleintEnum1788);
            lv_values_2_0=ruleenumValue();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"values",
              	        		lv_values_2_0, 
              	        		"enumValue", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:920:2: ( ',' ( (lv_values_4_0= ruleenumValue ) ) )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==28) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:920:4: ',' ( (lv_values_4_0= ruleenumValue ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleintEnum1799); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getIntEnumAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:924:1: ( (lv_values_4_0= ruleenumValue ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:925:1: (lv_values_4_0= ruleenumValue )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:925:1: (lv_values_4_0= ruleenumValue )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:926:3: lv_values_4_0= ruleenumValue
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_3_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleenumValue_in_ruleintEnum1820);
            	    lv_values_4_0=ruleenumValue();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"values",
            	      	        		lv_values_4_0, 
            	      	        		"enumValue", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            match(input,29,FOLLOW_29_in_ruleintEnum1832); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIntEnumAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleintEnum


    // $ANTLR start entryRulecharEnum
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:960:1: entryRulecharEnum returns [EObject current=null] : iv_rulecharEnum= rulecharEnum EOF ;
    public final EObject entryRulecharEnum() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecharEnum = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:961:2: (iv_rulecharEnum= rulecharEnum EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:962:2: iv_rulecharEnum= rulecharEnum EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCharEnumRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecharEnum_in_entryRulecharEnum1868);
            iv_rulecharEnum=rulecharEnum();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecharEnum; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecharEnum1878); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecharEnum


    // $ANTLR start rulecharEnum
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:969:1: rulecharEnum returns [EObject current=null] : ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' ) ;
    public final EObject rulecharEnum() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token lv_values_2_0=null;
        Token lv_values_4_0=null;

         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:974:6: ( ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:975:1: ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:975:1: ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:975:2: ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:975:2: ( (lv_name_0_0= 'char' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:976:1: (lv_name_0_0= 'char' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:976:1: (lv_name_0_0= 'char' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:977:3: lv_name_0_0= 'char'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,30,FOLLOW_30_in_rulecharEnum1921); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "char", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_rulecharEnum1944); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharEnumAccess().getLeftCurlyBracketKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1000:1: ( (lv_values_2_0= RULE_STRING ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1001:1: (lv_values_2_0= RULE_STRING )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1001:1: (lv_values_2_0= RULE_STRING )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1002:3: lv_values_2_0= RULE_STRING
            {
            lv_values_2_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_rulecharEnum1961); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_2_0(), "values"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"values",
              	        		lv_values_2_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1024:2: ( ',' ( (lv_values_4_0= RULE_STRING ) ) )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==28) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1024:4: ',' ( (lv_values_4_0= RULE_STRING ) )
            	    {
            	    match(input,28,FOLLOW_28_in_rulecharEnum1977); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getCharEnumAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1028:1: ( (lv_values_4_0= RULE_STRING ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1029:1: (lv_values_4_0= RULE_STRING )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1029:1: (lv_values_4_0= RULE_STRING )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1030:3: lv_values_4_0= RULE_STRING
            	    {
            	    lv_values_4_0=(Token)input.LT(1);
            	    match(input,RULE_STRING,FOLLOW_RULE_STRING_in_rulecharEnum1994); if (failed) return current;
            	    if ( backtracking==0 ) {

            	      			createLeafNode(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_3_1_0(), "values"); 
            	      		
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"values",
            	      	        		lv_values_4_0, 
            	      	        		"STRING", 
            	      	        		lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            match(input,29,FOLLOW_29_in_rulecharEnum2011); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharEnumAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecharEnum


    // $ANTLR start entryRuleenumValue
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1064:1: entryRuleenumValue returns [EObject current=null] : iv_ruleenumValue= ruleenumValue EOF ;
    public final EObject entryRuleenumValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleenumValue = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1065:2: (iv_ruleenumValue= ruleenumValue EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1066:2: iv_ruleenumValue= ruleenumValue EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEnumValueRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleenumValue_in_entryRuleenumValue2047);
            iv_ruleenumValue=ruleenumValue();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleenumValue; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleenumValue2057); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleenumValue


    // $ANTLR start ruleenumValue
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1073:1: ruleenumValue returns [EObject current=null] : ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( 'deprecated' )? ) ;
    public final EObject ruleenumValue() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token lv_value_2_1=null;
        Token lv_value_2_2=null;

         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1078:6: ( ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( 'deprecated' )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1079:1: ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( 'deprecated' )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1079:1: ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( 'deprecated' )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1079:2: ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( 'deprecated' )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1079:2: ( (lv_name_0_0= RULE_STRING ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1080:1: (lv_name_0_0= RULE_STRING )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1080:1: (lv_name_0_0= RULE_STRING )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1081:3: lv_name_0_0= RULE_STRING
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleenumValue2099); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getEnumValueAccess().getNameSTRINGTerminalRuleCall_0_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_0_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,13,FOLLOW_13_in_ruleenumValue2114); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getEnumValueAccess().getEqualsSignKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1107:1: ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1108:1: ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1108:1: ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1109:1: (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1109:1: (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==RULE_INT) ) {
                alt13=1;
            }
            else if ( (LA13_0==RULE_SIGNED_INT) ) {
                alt13=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1109:1: (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT )", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1110:3: lv_value_2_1= RULE_INT
                    {
                    lv_value_2_1=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleenumValue2133); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getEnumValueAccess().getValueINTTerminalRuleCall_2_0_0(), "value"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"value",
                      	        		lv_value_2_1, 
                      	        		"INT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1131:8: lv_value_2_2= RULE_SIGNED_INT
                    {
                    lv_value_2_2=(Token)input.LT(1);
                    match(input,RULE_SIGNED_INT,FOLLOW_RULE_SIGNED_INT_in_ruleenumValue2153); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getEnumValueAccess().getValueSIGNED_INTTerminalRuleCall_2_0_1(), "value"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"value",
                      	        		lv_value_2_2, 
                      	        		"SIGNED_INT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;

            }


            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1155:2: ( 'deprecated' )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==31) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1155:4: 'deprecated'
                    {
                    match(input,31,FOLLOW_31_in_ruleenumValue2172); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getEnumValueAccess().getDeprecatedKeyword_3(), null); 
                          
                    }

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleenumValue


    // $ANTLR start entryRulecharType
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1167:1: entryRulecharType returns [EObject current=null] : iv_rulecharType= rulecharType EOF ;
    public final EObject entryRulecharType() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecharType = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1168:2: (iv_rulecharType= rulecharType EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1169:2: iv_rulecharType= rulecharType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCharTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecharType_in_entryRulecharType2210);
            iv_rulecharType=rulecharType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecharType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecharType2220); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecharType


    // $ANTLR start rulecharType
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1176:1: rulecharType returns [EObject current=null] : ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? ) ;
    public final EObject rulecharType() throws RecognitionException {
        EObject current = null;

        Token lv_length_3_0=null;

         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1181:6: ( ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1182:1: ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1182:1: ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1182:2: () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1182:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1183:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getCharTypeAccess().getCharTypeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,30,FOLLOW_30_in_rulecharType2267); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharTypeAccess().getCharKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1200:1: ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==32) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1200:3: '[' ( (lv_length_3_0= RULE_INT ) )? ']'
                    {
                    match(input,32,FOLLOW_32_in_rulecharType2278); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCharTypeAccess().getLeftSquareBracketKeyword_2_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1204:1: ( (lv_length_3_0= RULE_INT ) )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==RULE_INT) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1205:1: (lv_length_3_0= RULE_INT )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1205:1: (lv_length_3_0= RULE_INT )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1206:3: lv_length_3_0= RULE_INT
                            {
                            lv_length_3_0=(Token)input.LT(1);
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_rulecharType2295); if (failed) return current;
                            if ( backtracking==0 ) {

                              			createLeafNode(grammarAccess.getCharTypeAccess().getLengthINTTerminalRuleCall_2_1_0(), "length"); 
                              		
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCharTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"length",
                              	        		lv_length_3_0, 
                              	        		"INT", 
                              	        		lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }


                            }
                            break;

                    }

                    match(input,33,FOLLOW_33_in_rulecharType2311); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCharTypeAccess().getRightSquareBracketKeyword_2_2(), null); 
                          
                    }

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecharType


    // $ANTLR start entryRulepointer
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1240:1: entryRulepointer returns [EObject current=null] : iv_rulepointer= rulepointer EOF ;
    public final EObject entryRulepointer() throws RecognitionException {
        EObject current = null;

        EObject iv_rulepointer = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1241:2: (iv_rulepointer= rulepointer EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1242:2: iv_rulepointer= rulepointer EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPointerRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulepointer_in_entryRulepointer2349);
            iv_rulepointer=rulepointer();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulepointer; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulepointer2359); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulepointer


    // $ANTLR start rulepointer
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1249:1: rulepointer returns [EObject current=null] : ( () 'ptr' ( (lv_type_2_0= ruletype ) )? ) ;
    public final EObject rulepointer() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_type_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1254:6: ( ( () 'ptr' ( (lv_type_2_0= ruletype ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1255:1: ( () 'ptr' ( (lv_type_2_0= ruletype ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1255:1: ( () 'ptr' ( (lv_type_2_0= ruletype ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1255:2: () 'ptr' ( (lv_type_2_0= ruletype ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1255:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1256:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getPointerAccess().getPointerAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getPointerAccess().getPointerAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,34,FOLLOW_34_in_rulepointer2406); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getPointerAccess().getPtrKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1273:1: ( (lv_type_2_0= ruletype ) )?
            int alt17=2;
            switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    switch ( input.LA(2) ) {
                        case 35:
                            {
                            switch ( input.LA(3) ) {
                                case RULE_ID:
                                    {
                                    switch ( input.LA(4) ) {
                                        case 36:
                                            {
                                            int LA17_33 = input.LA(5);

                                            if ( (LA17_33==RULE_ID||LA17_33==23||(LA17_33>=25 && LA17_33<=26)||LA17_33==30||LA17_33==38||LA17_33==40||LA17_33==59||LA17_33==91||LA17_33==179||LA17_33==191||LA17_33==194||LA17_33==209||LA17_33==221) ) {
                                                alt17=1;
                                            }
                                            }
                                            break;
                                        case 35:
                                            {
                                            switch ( input.LA(5) ) {
                                                case RULE_ID:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case 35:
                                                            {
                                                            switch ( input.LA(7) ) {
                                                                case RULE_ID:
                                                                    {
                                                                    switch ( input.LA(8) ) {
                                                                        case 35:
                                                                            {
                                                                            int LA17_65 = input.LA(9);

                                                                            if ( (synpred38()) ) {
                                                                                alt17=1;
                                                                            }
                                                                            }
                                                                            break;
                                                                        case 36:
                                                                            {
                                                                            int LA17_66 = input.LA(9);

                                                                            if ( (LA17_66==RULE_ID||LA17_66==23||(LA17_66>=25 && LA17_66<=26)||LA17_66==30||LA17_66==38||LA17_66==40||LA17_66==59||LA17_66==91||LA17_66==179||LA17_66==191||LA17_66==194||LA17_66==209||LA17_66==221) ) {
                                                                                alt17=1;
                                                                            }
                                                                            }
                                                                            break;
                                                                        case EOF:
                                                                        case RULE_LINEBREAK:
                                                                        case RULE_FIELDCOMMENT:
                                                                        case RULE_ID:
                                                                        case 14:
                                                                        case 23:
                                                                        case 25:
                                                                        case 26:
                                                                        case 30:
                                                                        case 37:
                                                                        case 38:
                                                                        case 40:
                                                                        case 41:
                                                                        case 58:
                                                                        case 59:
                                                                        case 60:
                                                                        case 91:
                                                                        case 179:
                                                                        case 191:
                                                                        case 194:
                                                                        case 209:
                                                                        case 221:
                                                                            {
                                                                            alt17=1;
                                                                            }
                                                                            break;
                                                                    }

                                                                    }
                                                                    break;
                                                                case 209:
                                                                    {
                                                                    int LA17_52 = input.LA(8);

                                                                    if ( (LA17_52==EOF||(LA17_52>=RULE_LINEBREAK && LA17_52<=RULE_ID)||LA17_52==14||LA17_52==23||(LA17_52>=25 && LA17_52<=26)||LA17_52==30||(LA17_52>=35 && LA17_52<=38)||(LA17_52>=40 && LA17_52<=41)||(LA17_52>=58 && LA17_52<=60)||LA17_52==91||LA17_52==179||LA17_52==191||LA17_52==194||LA17_52==209||LA17_52==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 59:
                                                                    {
                                                                    int LA17_53 = input.LA(8);

                                                                    if ( (LA17_53==EOF||(LA17_53>=RULE_LINEBREAK && LA17_53<=RULE_ID)||LA17_53==14||LA17_53==23||(LA17_53>=25 && LA17_53<=26)||LA17_53==30||(LA17_53>=35 && LA17_53<=38)||(LA17_53>=40 && LA17_53<=41)||(LA17_53>=58 && LA17_53<=60)||LA17_53==91||LA17_53==179||LA17_53==191||LA17_53==194||LA17_53==209||LA17_53==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 30:
                                                                    {
                                                                    int LA17_54 = input.LA(8);

                                                                    if ( (LA17_54==EOF||(LA17_54>=RULE_LINEBREAK && LA17_54<=RULE_ID)||LA17_54==14||LA17_54==23||(LA17_54>=25 && LA17_54<=26)||LA17_54==30||(LA17_54>=35 && LA17_54<=38)||(LA17_54>=40 && LA17_54<=41)||(LA17_54>=58 && LA17_54<=60)||LA17_54==91||LA17_54==179||LA17_54==191||LA17_54==194||LA17_54==209||LA17_54==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 40:
                                                                    {
                                                                    int LA17_55 = input.LA(8);

                                                                    if ( (LA17_55==EOF||(LA17_55>=RULE_LINEBREAK && LA17_55<=RULE_ID)||LA17_55==14||LA17_55==23||(LA17_55>=25 && LA17_55<=26)||LA17_55==30||(LA17_55>=35 && LA17_55<=38)||(LA17_55>=40 && LA17_55<=41)||(LA17_55>=58 && LA17_55<=60)||LA17_55==91||LA17_55==179||LA17_55==191||LA17_55==194||LA17_55==209||LA17_55==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 25:
                                                                    {
                                                                    int LA17_56 = input.LA(8);

                                                                    if ( (LA17_56==EOF||(LA17_56>=RULE_LINEBREAK && LA17_56<=RULE_ID)||LA17_56==14||LA17_56==23||(LA17_56>=25 && LA17_56<=26)||LA17_56==30||(LA17_56>=35 && LA17_56<=38)||(LA17_56>=40 && LA17_56<=41)||(LA17_56>=58 && LA17_56<=60)||LA17_56==91||LA17_56==179||LA17_56==191||LA17_56==194||LA17_56==209||LA17_56==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 23:
                                                                    {
                                                                    int LA17_57 = input.LA(8);

                                                                    if ( (LA17_57==EOF||(LA17_57>=RULE_LINEBREAK && LA17_57<=RULE_ID)||LA17_57==14||LA17_57==23||(LA17_57>=25 && LA17_57<=26)||LA17_57==30||(LA17_57>=35 && LA17_57<=38)||(LA17_57>=40 && LA17_57<=41)||(LA17_57>=58 && LA17_57<=60)||LA17_57==91||LA17_57==179||LA17_57==191||LA17_57==194||LA17_57==209||LA17_57==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 38:
                                                                    {
                                                                    int LA17_58 = input.LA(8);

                                                                    if ( (LA17_58==EOF||(LA17_58>=RULE_LINEBREAK && LA17_58<=RULE_ID)||LA17_58==14||LA17_58==23||(LA17_58>=25 && LA17_58<=26)||LA17_58==30||(LA17_58>=35 && LA17_58<=38)||(LA17_58>=40 && LA17_58<=41)||(LA17_58>=58 && LA17_58<=60)||LA17_58==91||LA17_58==179||LA17_58==191||LA17_58==194||LA17_58==209||LA17_58==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 221:
                                                                    {
                                                                    int LA17_59 = input.LA(8);

                                                                    if ( (LA17_59==EOF||(LA17_59>=RULE_LINEBREAK && LA17_59<=RULE_ID)||LA17_59==14||LA17_59==23||(LA17_59>=25 && LA17_59<=26)||LA17_59==30||(LA17_59>=35 && LA17_59<=38)||(LA17_59>=40 && LA17_59<=41)||(LA17_59>=58 && LA17_59<=60)||LA17_59==91||LA17_59==179||LA17_59==191||LA17_59==194||LA17_59==209||LA17_59==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 194:
                                                                    {
                                                                    int LA17_60 = input.LA(8);

                                                                    if ( (LA17_60==EOF||(LA17_60>=RULE_LINEBREAK && LA17_60<=RULE_ID)||LA17_60==14||LA17_60==23||(LA17_60>=25 && LA17_60<=26)||LA17_60==30||(LA17_60>=35 && LA17_60<=38)||(LA17_60>=40 && LA17_60<=41)||(LA17_60>=58 && LA17_60<=60)||LA17_60==91||LA17_60==179||LA17_60==191||LA17_60==194||LA17_60==209||LA17_60==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 179:
                                                                    {
                                                                    int LA17_61 = input.LA(8);

                                                                    if ( (LA17_61==EOF||(LA17_61>=RULE_LINEBREAK && LA17_61<=RULE_ID)||LA17_61==14||LA17_61==23||(LA17_61>=25 && LA17_61<=26)||LA17_61==30||(LA17_61>=35 && LA17_61<=38)||(LA17_61>=40 && LA17_61<=41)||(LA17_61>=58 && LA17_61<=60)||LA17_61==91||LA17_61==179||LA17_61==191||LA17_61==194||LA17_61==209||LA17_61==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 191:
                                                                    {
                                                                    int LA17_62 = input.LA(8);

                                                                    if ( (LA17_62==EOF||(LA17_62>=RULE_LINEBREAK && LA17_62<=RULE_ID)||LA17_62==14||LA17_62==23||(LA17_62>=25 && LA17_62<=26)||LA17_62==30||(LA17_62>=35 && LA17_62<=38)||(LA17_62>=40 && LA17_62<=41)||(LA17_62>=58 && LA17_62<=60)||LA17_62==91||LA17_62==179||LA17_62==191||LA17_62==194||LA17_62==209||LA17_62==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 91:
                                                                    {
                                                                    int LA17_63 = input.LA(8);

                                                                    if ( (LA17_63==EOF||(LA17_63>=RULE_LINEBREAK && LA17_63<=RULE_ID)||LA17_63==14||LA17_63==23||(LA17_63>=25 && LA17_63<=26)||LA17_63==30||(LA17_63>=35 && LA17_63<=38)||(LA17_63>=40 && LA17_63<=41)||(LA17_63>=58 && LA17_63<=60)||LA17_63==91||LA17_63==179||LA17_63==191||LA17_63==194||LA17_63==209||LA17_63==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 26:
                                                                    {
                                                                    int LA17_64 = input.LA(8);

                                                                    if ( (LA17_64==EOF||(LA17_64>=RULE_LINEBREAK && LA17_64<=RULE_ID)||LA17_64==14||LA17_64==23||(LA17_64>=25 && LA17_64<=26)||LA17_64==30||(LA17_64>=35 && LA17_64<=38)||(LA17_64>=40 && LA17_64<=41)||(LA17_64>=58 && LA17_64<=60)||LA17_64==91||LA17_64==179||LA17_64==191||LA17_64==194||LA17_64==209||LA17_64==221) ) {
                                                                        alt17=1;
                                                                    }
                                                                    }
                                                                    break;
                                                            }

                                                            }
                                                            break;
                                                        case 36:
                                                            {
                                                            int LA17_50 = input.LA(7);

                                                            if ( (LA17_50==RULE_ID||LA17_50==23||(LA17_50>=25 && LA17_50<=26)||LA17_50==30||LA17_50==38||LA17_50==40||LA17_50==59||LA17_50==91||LA17_50==179||LA17_50==191||LA17_50==194||LA17_50==209||LA17_50==221) ) {
                                                                alt17=1;
                                                            }
                                                            }
                                                            break;
                                                        case EOF:
                                                        case RULE_LINEBREAK:
                                                        case RULE_FIELDCOMMENT:
                                                        case RULE_ID:
                                                        case 14:
                                                        case 23:
                                                        case 25:
                                                        case 26:
                                                        case 30:
                                                        case 37:
                                                        case 38:
                                                        case 40:
                                                        case 41:
                                                        case 58:
                                                        case 59:
                                                        case 60:
                                                        case 91:
                                                        case 179:
                                                        case 191:
                                                        case 194:
                                                        case 209:
                                                        case 221:
                                                            {
                                                            alt17=1;
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                                case 209:
                                                    {
                                                    int LA17_36 = input.LA(6);

                                                    if ( (LA17_36==EOF||(LA17_36>=RULE_LINEBREAK && LA17_36<=RULE_ID)||LA17_36==14||LA17_36==23||(LA17_36>=25 && LA17_36<=26)||LA17_36==30||(LA17_36>=35 && LA17_36<=38)||(LA17_36>=40 && LA17_36<=41)||(LA17_36>=58 && LA17_36<=60)||LA17_36==91||LA17_36==179||LA17_36==191||LA17_36==194||LA17_36==209||LA17_36==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 59:
                                                    {
                                                    int LA17_37 = input.LA(6);

                                                    if ( (LA17_37==EOF||(LA17_37>=RULE_LINEBREAK && LA17_37<=RULE_ID)||LA17_37==14||LA17_37==23||(LA17_37>=25 && LA17_37<=26)||LA17_37==30||(LA17_37>=35 && LA17_37<=38)||(LA17_37>=40 && LA17_37<=41)||(LA17_37>=58 && LA17_37<=60)||LA17_37==91||LA17_37==179||LA17_37==191||LA17_37==194||LA17_37==209||LA17_37==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 30:
                                                    {
                                                    int LA17_38 = input.LA(6);

                                                    if ( (LA17_38==EOF||(LA17_38>=RULE_LINEBREAK && LA17_38<=RULE_ID)||LA17_38==14||LA17_38==23||(LA17_38>=25 && LA17_38<=26)||LA17_38==30||(LA17_38>=35 && LA17_38<=38)||(LA17_38>=40 && LA17_38<=41)||(LA17_38>=58 && LA17_38<=60)||LA17_38==91||LA17_38==179||LA17_38==191||LA17_38==194||LA17_38==209||LA17_38==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 40:
                                                    {
                                                    int LA17_39 = input.LA(6);

                                                    if ( (LA17_39==EOF||(LA17_39>=RULE_LINEBREAK && LA17_39<=RULE_ID)||LA17_39==14||LA17_39==23||(LA17_39>=25 && LA17_39<=26)||LA17_39==30||(LA17_39>=35 && LA17_39<=38)||(LA17_39>=40 && LA17_39<=41)||(LA17_39>=58 && LA17_39<=60)||LA17_39==91||LA17_39==179||LA17_39==191||LA17_39==194||LA17_39==209||LA17_39==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 25:
                                                    {
                                                    int LA17_40 = input.LA(6);

                                                    if ( (LA17_40==EOF||(LA17_40>=RULE_LINEBREAK && LA17_40<=RULE_ID)||LA17_40==14||LA17_40==23||(LA17_40>=25 && LA17_40<=26)||LA17_40==30||(LA17_40>=35 && LA17_40<=38)||(LA17_40>=40 && LA17_40<=41)||(LA17_40>=58 && LA17_40<=60)||LA17_40==91||LA17_40==179||LA17_40==191||LA17_40==194||LA17_40==209||LA17_40==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 23:
                                                    {
                                                    int LA17_41 = input.LA(6);

                                                    if ( (LA17_41==EOF||(LA17_41>=RULE_LINEBREAK && LA17_41<=RULE_ID)||LA17_41==14||LA17_41==23||(LA17_41>=25 && LA17_41<=26)||LA17_41==30||(LA17_41>=35 && LA17_41<=38)||(LA17_41>=40 && LA17_41<=41)||(LA17_41>=58 && LA17_41<=60)||LA17_41==91||LA17_41==179||LA17_41==191||LA17_41==194||LA17_41==209||LA17_41==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 38:
                                                    {
                                                    int LA17_42 = input.LA(6);

                                                    if ( (LA17_42==EOF||(LA17_42>=RULE_LINEBREAK && LA17_42<=RULE_ID)||LA17_42==14||LA17_42==23||(LA17_42>=25 && LA17_42<=26)||LA17_42==30||(LA17_42>=35 && LA17_42<=38)||(LA17_42>=40 && LA17_42<=41)||(LA17_42>=58 && LA17_42<=60)||LA17_42==91||LA17_42==179||LA17_42==191||LA17_42==194||LA17_42==209||LA17_42==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 221:
                                                    {
                                                    int LA17_43 = input.LA(6);

                                                    if ( (LA17_43==EOF||(LA17_43>=RULE_LINEBREAK && LA17_43<=RULE_ID)||LA17_43==14||LA17_43==23||(LA17_43>=25 && LA17_43<=26)||LA17_43==30||(LA17_43>=35 && LA17_43<=38)||(LA17_43>=40 && LA17_43<=41)||(LA17_43>=58 && LA17_43<=60)||LA17_43==91||LA17_43==179||LA17_43==191||LA17_43==194||LA17_43==209||LA17_43==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 194:
                                                    {
                                                    int LA17_44 = input.LA(6);

                                                    if ( (LA17_44==EOF||(LA17_44>=RULE_LINEBREAK && LA17_44<=RULE_ID)||LA17_44==14||LA17_44==23||(LA17_44>=25 && LA17_44<=26)||LA17_44==30||(LA17_44>=35 && LA17_44<=38)||(LA17_44>=40 && LA17_44<=41)||(LA17_44>=58 && LA17_44<=60)||LA17_44==91||LA17_44==179||LA17_44==191||LA17_44==194||LA17_44==209||LA17_44==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 179:
                                                    {
                                                    int LA17_45 = input.LA(6);

                                                    if ( (LA17_45==EOF||(LA17_45>=RULE_LINEBREAK && LA17_45<=RULE_ID)||LA17_45==14||LA17_45==23||(LA17_45>=25 && LA17_45<=26)||LA17_45==30||(LA17_45>=35 && LA17_45<=38)||(LA17_45>=40 && LA17_45<=41)||(LA17_45>=58 && LA17_45<=60)||LA17_45==91||LA17_45==179||LA17_45==191||LA17_45==194||LA17_45==209||LA17_45==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 191:
                                                    {
                                                    int LA17_46 = input.LA(6);

                                                    if ( (LA17_46==EOF||(LA17_46>=RULE_LINEBREAK && LA17_46<=RULE_ID)||LA17_46==14||LA17_46==23||(LA17_46>=25 && LA17_46<=26)||LA17_46==30||(LA17_46>=35 && LA17_46<=38)||(LA17_46>=40 && LA17_46<=41)||(LA17_46>=58 && LA17_46<=60)||LA17_46==91||LA17_46==179||LA17_46==191||LA17_46==194||LA17_46==209||LA17_46==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 91:
                                                    {
                                                    int LA17_47 = input.LA(6);

                                                    if ( (LA17_47==EOF||(LA17_47>=RULE_LINEBREAK && LA17_47<=RULE_ID)||LA17_47==14||LA17_47==23||(LA17_47>=25 && LA17_47<=26)||LA17_47==30||(LA17_47>=35 && LA17_47<=38)||(LA17_47>=40 && LA17_47<=41)||(LA17_47>=58 && LA17_47<=60)||LA17_47==91||LA17_47==179||LA17_47==191||LA17_47==194||LA17_47==209||LA17_47==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                                case 26:
                                                    {
                                                    int LA17_48 = input.LA(6);

                                                    if ( (LA17_48==EOF||(LA17_48>=RULE_LINEBREAK && LA17_48<=RULE_ID)||LA17_48==14||LA17_48==23||(LA17_48>=25 && LA17_48<=26)||LA17_48==30||(LA17_48>=35 && LA17_48<=38)||(LA17_48>=40 && LA17_48<=41)||(LA17_48>=58 && LA17_48<=60)||LA17_48==91||LA17_48==179||LA17_48==191||LA17_48==194||LA17_48==209||LA17_48==221) ) {
                                                        alt17=1;
                                                    }
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                        case EOF:
                                        case RULE_LINEBREAK:
                                        case RULE_FIELDCOMMENT:
                                        case RULE_ID:
                                        case 14:
                                        case 23:
                                        case 25:
                                        case 26:
                                        case 30:
                                        case 37:
                                        case 38:
                                        case 40:
                                        case 41:
                                        case 58:
                                        case 59:
                                        case 60:
                                        case 91:
                                        case 179:
                                        case 191:
                                        case 194:
                                        case 209:
                                        case 221:
                                            {
                                            alt17=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case 209:
                                    {
                                    int LA17_20 = input.LA(4);

                                    if ( (LA17_20==EOF||(LA17_20>=RULE_LINEBREAK && LA17_20<=RULE_ID)||LA17_20==14||LA17_20==23||(LA17_20>=25 && LA17_20<=26)||LA17_20==30||(LA17_20>=35 && LA17_20<=38)||(LA17_20>=40 && LA17_20<=41)||(LA17_20>=58 && LA17_20<=60)||LA17_20==91||LA17_20==179||LA17_20==191||LA17_20==194||LA17_20==209||LA17_20==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 59:
                                    {
                                    int LA17_21 = input.LA(4);

                                    if ( (LA17_21==EOF||(LA17_21>=RULE_LINEBREAK && LA17_21<=RULE_ID)||LA17_21==14||LA17_21==23||(LA17_21>=25 && LA17_21<=26)||LA17_21==30||(LA17_21>=35 && LA17_21<=38)||(LA17_21>=40 && LA17_21<=41)||(LA17_21>=58 && LA17_21<=60)||LA17_21==91||LA17_21==179||LA17_21==191||LA17_21==194||LA17_21==209||LA17_21==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 30:
                                    {
                                    int LA17_22 = input.LA(4);

                                    if ( (LA17_22==EOF||(LA17_22>=RULE_LINEBREAK && LA17_22<=RULE_ID)||LA17_22==14||LA17_22==23||(LA17_22>=25 && LA17_22<=26)||LA17_22==30||(LA17_22>=35 && LA17_22<=38)||(LA17_22>=40 && LA17_22<=41)||(LA17_22>=58 && LA17_22<=60)||LA17_22==91||LA17_22==179||LA17_22==191||LA17_22==194||LA17_22==209||LA17_22==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 40:
                                    {
                                    int LA17_23 = input.LA(4);

                                    if ( (LA17_23==EOF||(LA17_23>=RULE_LINEBREAK && LA17_23<=RULE_ID)||LA17_23==14||LA17_23==23||(LA17_23>=25 && LA17_23<=26)||LA17_23==30||(LA17_23>=35 && LA17_23<=38)||(LA17_23>=40 && LA17_23<=41)||(LA17_23>=58 && LA17_23<=60)||LA17_23==91||LA17_23==179||LA17_23==191||LA17_23==194||LA17_23==209||LA17_23==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 25:
                                    {
                                    int LA17_24 = input.LA(4);

                                    if ( (LA17_24==EOF||(LA17_24>=RULE_LINEBREAK && LA17_24<=RULE_ID)||LA17_24==14||LA17_24==23||(LA17_24>=25 && LA17_24<=26)||LA17_24==30||(LA17_24>=35 && LA17_24<=38)||(LA17_24>=40 && LA17_24<=41)||(LA17_24>=58 && LA17_24<=60)||LA17_24==91||LA17_24==179||LA17_24==191||LA17_24==194||LA17_24==209||LA17_24==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 23:
                                    {
                                    int LA17_25 = input.LA(4);

                                    if ( (LA17_25==EOF||(LA17_25>=RULE_LINEBREAK && LA17_25<=RULE_ID)||LA17_25==14||LA17_25==23||(LA17_25>=25 && LA17_25<=26)||LA17_25==30||(LA17_25>=35 && LA17_25<=38)||(LA17_25>=40 && LA17_25<=41)||(LA17_25>=58 && LA17_25<=60)||LA17_25==91||LA17_25==179||LA17_25==191||LA17_25==194||LA17_25==209||LA17_25==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 38:
                                    {
                                    int LA17_26 = input.LA(4);

                                    if ( (LA17_26==EOF||(LA17_26>=RULE_LINEBREAK && LA17_26<=RULE_ID)||LA17_26==14||LA17_26==23||(LA17_26>=25 && LA17_26<=26)||LA17_26==30||(LA17_26>=35 && LA17_26<=38)||(LA17_26>=40 && LA17_26<=41)||(LA17_26>=58 && LA17_26<=60)||LA17_26==91||LA17_26==179||LA17_26==191||LA17_26==194||LA17_26==209||LA17_26==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 221:
                                    {
                                    int LA17_27 = input.LA(4);

                                    if ( (LA17_27==EOF||(LA17_27>=RULE_LINEBREAK && LA17_27<=RULE_ID)||LA17_27==14||LA17_27==23||(LA17_27>=25 && LA17_27<=26)||LA17_27==30||(LA17_27>=35 && LA17_27<=38)||(LA17_27>=40 && LA17_27<=41)||(LA17_27>=58 && LA17_27<=60)||LA17_27==91||LA17_27==179||LA17_27==191||LA17_27==194||LA17_27==209||LA17_27==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 194:
                                    {
                                    int LA17_28 = input.LA(4);

                                    if ( (LA17_28==EOF||(LA17_28>=RULE_LINEBREAK && LA17_28<=RULE_ID)||LA17_28==14||LA17_28==23||(LA17_28>=25 && LA17_28<=26)||LA17_28==30||(LA17_28>=35 && LA17_28<=38)||(LA17_28>=40 && LA17_28<=41)||(LA17_28>=58 && LA17_28<=60)||LA17_28==91||LA17_28==179||LA17_28==191||LA17_28==194||LA17_28==209||LA17_28==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 179:
                                    {
                                    int LA17_29 = input.LA(4);

                                    if ( (LA17_29==EOF||(LA17_29>=RULE_LINEBREAK && LA17_29<=RULE_ID)||LA17_29==14||LA17_29==23||(LA17_29>=25 && LA17_29<=26)||LA17_29==30||(LA17_29>=35 && LA17_29<=38)||(LA17_29>=40 && LA17_29<=41)||(LA17_29>=58 && LA17_29<=60)||LA17_29==91||LA17_29==179||LA17_29==191||LA17_29==194||LA17_29==209||LA17_29==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 191:
                                    {
                                    int LA17_30 = input.LA(4);

                                    if ( (LA17_30==EOF||(LA17_30>=RULE_LINEBREAK && LA17_30<=RULE_ID)||LA17_30==14||LA17_30==23||(LA17_30>=25 && LA17_30<=26)||LA17_30==30||(LA17_30>=35 && LA17_30<=38)||(LA17_30>=40 && LA17_30<=41)||(LA17_30>=58 && LA17_30<=60)||LA17_30==91||LA17_30==179||LA17_30==191||LA17_30==194||LA17_30==209||LA17_30==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 91:
                                    {
                                    int LA17_31 = input.LA(4);

                                    if ( (LA17_31==EOF||(LA17_31>=RULE_LINEBREAK && LA17_31<=RULE_ID)||LA17_31==14||LA17_31==23||(LA17_31>=25 && LA17_31<=26)||LA17_31==30||(LA17_31>=35 && LA17_31<=38)||(LA17_31>=40 && LA17_31<=41)||(LA17_31>=58 && LA17_31<=60)||LA17_31==91||LA17_31==179||LA17_31==191||LA17_31==194||LA17_31==209||LA17_31==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                                case 26:
                                    {
                                    int LA17_32 = input.LA(4);

                                    if ( (LA17_32==EOF||(LA17_32>=RULE_LINEBREAK && LA17_32<=RULE_ID)||LA17_32==14||LA17_32==23||(LA17_32>=25 && LA17_32<=26)||LA17_32==30||(LA17_32>=35 && LA17_32<=38)||(LA17_32>=40 && LA17_32<=41)||(LA17_32>=58 && LA17_32<=60)||LA17_32==91||LA17_32==179||LA17_32==191||LA17_32==194||LA17_32==209||LA17_32==221) ) {
                                        alt17=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 36:
                            {
                            int LA17_17 = input.LA(3);

                            if ( (LA17_17==RULE_ID||LA17_17==23||(LA17_17>=25 && LA17_17<=26)||LA17_17==30||LA17_17==38||LA17_17==40||LA17_17==59||LA17_17==91||LA17_17==179||LA17_17==191||LA17_17==194||LA17_17==209||LA17_17==221) ) {
                                alt17=1;
                            }
                            }
                            break;
                        case EOF:
                        case RULE_LINEBREAK:
                        case RULE_FIELDCOMMENT:
                        case RULE_ID:
                        case 14:
                        case 23:
                        case 25:
                        case 26:
                        case 30:
                        case 37:
                        case 38:
                        case 40:
                        case 41:
                        case 58:
                        case 59:
                        case 60:
                        case 91:
                        case 179:
                        case 191:
                        case 194:
                        case 209:
                        case 221:
                            {
                            alt17=1;
                            }
                            break;
                    }

                    }
                    break;
                case 209:
                    {
                    int LA17_2 = input.LA(2);

                    if ( (LA17_2==EOF||(LA17_2>=RULE_LINEBREAK && LA17_2<=RULE_ID)||LA17_2==14||LA17_2==23||(LA17_2>=25 && LA17_2<=26)||LA17_2==30||(LA17_2>=35 && LA17_2<=38)||(LA17_2>=40 && LA17_2<=41)||(LA17_2>=58 && LA17_2<=60)||LA17_2==91||LA17_2==179||LA17_2==191||LA17_2==194||LA17_2==209||LA17_2==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA17_3 = input.LA(2);

                    if ( (LA17_3==EOF||(LA17_3>=RULE_LINEBREAK && LA17_3<=RULE_ID)||LA17_3==14||LA17_3==23||(LA17_3>=25 && LA17_3<=26)||LA17_3==30||(LA17_3>=35 && LA17_3<=38)||(LA17_3>=40 && LA17_3<=41)||(LA17_3>=58 && LA17_3<=60)||LA17_3==91||LA17_3==179||LA17_3==191||LA17_3==194||LA17_3==209||LA17_3==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 30:
                    {
                    int LA17_4 = input.LA(2);

                    if ( (LA17_4==EOF||(LA17_4>=RULE_LINEBREAK && LA17_4<=RULE_ID)||LA17_4==14||LA17_4==23||(LA17_4>=25 && LA17_4<=26)||LA17_4==30||(LA17_4>=35 && LA17_4<=38)||(LA17_4>=40 && LA17_4<=41)||(LA17_4>=58 && LA17_4<=60)||LA17_4==91||LA17_4==179||LA17_4==191||LA17_4==194||LA17_4==209||LA17_4==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 40:
                    {
                    int LA17_5 = input.LA(2);

                    if ( (LA17_5==EOF||(LA17_5>=RULE_LINEBREAK && LA17_5<=RULE_ID)||LA17_5==14||LA17_5==23||(LA17_5>=25 && LA17_5<=26)||LA17_5==30||(LA17_5>=35 && LA17_5<=38)||(LA17_5>=40 && LA17_5<=41)||(LA17_5>=58 && LA17_5<=60)||LA17_5==91||LA17_5==179||LA17_5==191||LA17_5==194||LA17_5==209||LA17_5==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 25:
                    {
                    int LA17_6 = input.LA(2);

                    if ( (LA17_6==EOF||(LA17_6>=RULE_LINEBREAK && LA17_6<=RULE_ID)||LA17_6==14||LA17_6==23||(LA17_6>=25 && LA17_6<=26)||LA17_6==30||(LA17_6>=35 && LA17_6<=38)||(LA17_6>=40 && LA17_6<=41)||(LA17_6>=58 && LA17_6<=60)||LA17_6==91||LA17_6==179||LA17_6==191||LA17_6==194||LA17_6==209||LA17_6==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 23:
                    {
                    int LA17_7 = input.LA(2);

                    if ( (LA17_7==EOF||(LA17_7>=RULE_LINEBREAK && LA17_7<=RULE_ID)||LA17_7==14||LA17_7==23||(LA17_7>=25 && LA17_7<=26)||LA17_7==30||(LA17_7>=35 && LA17_7<=38)||(LA17_7>=40 && LA17_7<=41)||(LA17_7>=58 && LA17_7<=60)||LA17_7==91||LA17_7==179||LA17_7==191||LA17_7==194||LA17_7==209||LA17_7==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 38:
                    {
                    int LA17_8 = input.LA(2);

                    if ( (LA17_8==EOF||(LA17_8>=RULE_LINEBREAK && LA17_8<=RULE_ID)||LA17_8==14||LA17_8==23||(LA17_8>=25 && LA17_8<=26)||LA17_8==30||(LA17_8>=35 && LA17_8<=38)||(LA17_8>=40 && LA17_8<=41)||(LA17_8>=58 && LA17_8<=60)||LA17_8==91||LA17_8==179||LA17_8==191||LA17_8==194||LA17_8==209||LA17_8==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 221:
                    {
                    int LA17_9 = input.LA(2);

                    if ( (LA17_9==EOF||(LA17_9>=RULE_LINEBREAK && LA17_9<=RULE_ID)||LA17_9==14||LA17_9==23||(LA17_9>=25 && LA17_9<=26)||LA17_9==30||(LA17_9>=35 && LA17_9<=38)||(LA17_9>=40 && LA17_9<=41)||(LA17_9>=58 && LA17_9<=60)||LA17_9==91||LA17_9==179||LA17_9==191||LA17_9==194||LA17_9==209||LA17_9==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 194:
                    {
                    int LA17_10 = input.LA(2);

                    if ( (LA17_10==EOF||(LA17_10>=RULE_LINEBREAK && LA17_10<=RULE_ID)||LA17_10==14||LA17_10==23||(LA17_10>=25 && LA17_10<=26)||LA17_10==30||(LA17_10>=35 && LA17_10<=38)||(LA17_10>=40 && LA17_10<=41)||(LA17_10>=58 && LA17_10<=60)||LA17_10==91||LA17_10==179||LA17_10==191||LA17_10==194||LA17_10==209||LA17_10==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 179:
                    {
                    int LA17_11 = input.LA(2);

                    if ( (LA17_11==EOF||(LA17_11>=RULE_LINEBREAK && LA17_11<=RULE_ID)||LA17_11==14||LA17_11==23||(LA17_11>=25 && LA17_11<=26)||LA17_11==30||(LA17_11>=35 && LA17_11<=38)||(LA17_11>=40 && LA17_11<=41)||(LA17_11>=58 && LA17_11<=60)||LA17_11==91||LA17_11==179||LA17_11==191||LA17_11==194||LA17_11==209||LA17_11==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 191:
                    {
                    int LA17_12 = input.LA(2);

                    if ( (LA17_12==EOF||(LA17_12>=RULE_LINEBREAK && LA17_12<=RULE_ID)||LA17_12==14||LA17_12==23||(LA17_12>=25 && LA17_12<=26)||LA17_12==30||(LA17_12>=35 && LA17_12<=38)||(LA17_12>=40 && LA17_12<=41)||(LA17_12>=58 && LA17_12<=60)||LA17_12==91||LA17_12==179||LA17_12==191||LA17_12==194||LA17_12==209||LA17_12==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 91:
                    {
                    int LA17_13 = input.LA(2);

                    if ( (LA17_13==EOF||(LA17_13>=RULE_LINEBREAK && LA17_13<=RULE_ID)||LA17_13==14||LA17_13==23||(LA17_13>=25 && LA17_13<=26)||LA17_13==30||(LA17_13>=35 && LA17_13<=38)||(LA17_13>=40 && LA17_13<=41)||(LA17_13>=58 && LA17_13<=60)||LA17_13==91||LA17_13==179||LA17_13==191||LA17_13==194||LA17_13==209||LA17_13==221) ) {
                        alt17=1;
                    }
                    }
                    break;
                case 26:
                    {
                    int LA17_14 = input.LA(2);

                    if ( (LA17_14==EOF||(LA17_14>=RULE_LINEBREAK && LA17_14<=RULE_ID)||LA17_14==14||LA17_14==23||(LA17_14>=25 && LA17_14<=26)||LA17_14==30||(LA17_14>=35 && LA17_14<=38)||(LA17_14>=40 && LA17_14<=41)||(LA17_14>=58 && LA17_14<=60)||LA17_14==91||LA17_14==179||LA17_14==191||LA17_14==194||LA17_14==209||LA17_14==221) ) {
                        alt17=1;
                    }
                    }
                    break;
            }

            switch (alt17) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1274:1: (lv_type_2_0= ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1274:1: (lv_type_2_0= ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1275:3: lv_type_2_0= ruletype
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getPointerAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruletype_in_rulepointer2427);
                    lv_type_2_0=ruletype();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getPointerRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"type",
                      	        		lv_type_2_0, 
                      	        		"type", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulepointer


    // $ANTLR start entryRulesetType
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1305:1: entryRulesetType returns [EObject current=null] : iv_rulesetType= rulesetType EOF ;
    public final EObject entryRulesetType() throws RecognitionException {
        EObject current = null;

        EObject iv_rulesetType = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1306:2: (iv_rulesetType= rulesetType EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1307:2: iv_rulesetType= rulesetType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSetTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulesetType_in_entryRulesetType2464);
            iv_rulesetType=rulesetType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulesetType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulesetType2474); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulesetType


    // $ANTLR start rulesetType
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1314:1: rulesetType returns [EObject current=null] : ( () 'set' ( (lv_type_2_0= ruletype ) )? ) ;
    public final EObject rulesetType() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_type_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1319:6: ( ( () 'set' ( (lv_type_2_0= ruletype ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1320:1: ( () 'set' ( (lv_type_2_0= ruletype ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1320:1: ( () 'set' ( (lv_type_2_0= ruletype ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1320:2: () 'set' ( (lv_type_2_0= ruletype ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1320:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1321:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getSetTypeAccess().getSetTypeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getSetTypeAccess().getSetTypeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,19,FOLLOW_19_in_rulesetType2521); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getSetTypeAccess().getSetKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1338:1: ( (lv_type_2_0= ruletype ) )?
            int alt18=2;
            switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    switch ( input.LA(2) ) {
                        case 35:
                            {
                            switch ( input.LA(3) ) {
                                case RULE_ID:
                                    {
                                    switch ( input.LA(4) ) {
                                        case 36:
                                            {
                                            int LA18_33 = input.LA(5);

                                            if ( (LA18_33==RULE_ID||LA18_33==23||(LA18_33>=25 && LA18_33<=26)||LA18_33==30||LA18_33==38||LA18_33==40||LA18_33==59||LA18_33==91||LA18_33==179||LA18_33==191||LA18_33==194||LA18_33==209||LA18_33==221) ) {
                                                alt18=1;
                                            }
                                            }
                                            break;
                                        case 35:
                                            {
                                            switch ( input.LA(5) ) {
                                                case RULE_ID:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case 35:
                                                            {
                                                            switch ( input.LA(7) ) {
                                                                case RULE_ID:
                                                                    {
                                                                    switch ( input.LA(8) ) {
                                                                        case 35:
                                                                            {
                                                                            int LA18_65 = input.LA(9);

                                                                            if ( (synpred39()) ) {
                                                                                alt18=1;
                                                                            }
                                                                            }
                                                                            break;
                                                                        case 36:
                                                                            {
                                                                            int LA18_66 = input.LA(9);

                                                                            if ( (LA18_66==RULE_ID||LA18_66==23||(LA18_66>=25 && LA18_66<=26)||LA18_66==30||LA18_66==38||LA18_66==40||LA18_66==59||LA18_66==91||LA18_66==179||LA18_66==191||LA18_66==194||LA18_66==209||LA18_66==221) ) {
                                                                                alt18=1;
                                                                            }
                                                                            }
                                                                            break;
                                                                        case EOF:
                                                                        case RULE_LINEBREAK:
                                                                        case RULE_FIELDCOMMENT:
                                                                        case RULE_ID:
                                                                        case 14:
                                                                        case 23:
                                                                        case 25:
                                                                        case 26:
                                                                        case 30:
                                                                        case 37:
                                                                        case 38:
                                                                        case 40:
                                                                        case 41:
                                                                        case 58:
                                                                        case 59:
                                                                        case 60:
                                                                        case 91:
                                                                        case 179:
                                                                        case 191:
                                                                        case 194:
                                                                        case 209:
                                                                        case 221:
                                                                            {
                                                                            alt18=1;
                                                                            }
                                                                            break;
                                                                    }

                                                                    }
                                                                    break;
                                                                case 209:
                                                                    {
                                                                    int LA18_52 = input.LA(8);

                                                                    if ( (LA18_52==EOF||(LA18_52>=RULE_LINEBREAK && LA18_52<=RULE_ID)||LA18_52==14||LA18_52==23||(LA18_52>=25 && LA18_52<=26)||LA18_52==30||(LA18_52>=35 && LA18_52<=38)||(LA18_52>=40 && LA18_52<=41)||(LA18_52>=58 && LA18_52<=60)||LA18_52==91||LA18_52==179||LA18_52==191||LA18_52==194||LA18_52==209||LA18_52==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 59:
                                                                    {
                                                                    int LA18_53 = input.LA(8);

                                                                    if ( (LA18_53==EOF||(LA18_53>=RULE_LINEBREAK && LA18_53<=RULE_ID)||LA18_53==14||LA18_53==23||(LA18_53>=25 && LA18_53<=26)||LA18_53==30||(LA18_53>=35 && LA18_53<=38)||(LA18_53>=40 && LA18_53<=41)||(LA18_53>=58 && LA18_53<=60)||LA18_53==91||LA18_53==179||LA18_53==191||LA18_53==194||LA18_53==209||LA18_53==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 30:
                                                                    {
                                                                    int LA18_54 = input.LA(8);

                                                                    if ( (LA18_54==EOF||(LA18_54>=RULE_LINEBREAK && LA18_54<=RULE_ID)||LA18_54==14||LA18_54==23||(LA18_54>=25 && LA18_54<=26)||LA18_54==30||(LA18_54>=35 && LA18_54<=38)||(LA18_54>=40 && LA18_54<=41)||(LA18_54>=58 && LA18_54<=60)||LA18_54==91||LA18_54==179||LA18_54==191||LA18_54==194||LA18_54==209||LA18_54==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 40:
                                                                    {
                                                                    int LA18_55 = input.LA(8);

                                                                    if ( (LA18_55==EOF||(LA18_55>=RULE_LINEBREAK && LA18_55<=RULE_ID)||LA18_55==14||LA18_55==23||(LA18_55>=25 && LA18_55<=26)||LA18_55==30||(LA18_55>=35 && LA18_55<=38)||(LA18_55>=40 && LA18_55<=41)||(LA18_55>=58 && LA18_55<=60)||LA18_55==91||LA18_55==179||LA18_55==191||LA18_55==194||LA18_55==209||LA18_55==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 25:
                                                                    {
                                                                    int LA18_56 = input.LA(8);

                                                                    if ( (LA18_56==EOF||(LA18_56>=RULE_LINEBREAK && LA18_56<=RULE_ID)||LA18_56==14||LA18_56==23||(LA18_56>=25 && LA18_56<=26)||LA18_56==30||(LA18_56>=35 && LA18_56<=38)||(LA18_56>=40 && LA18_56<=41)||(LA18_56>=58 && LA18_56<=60)||LA18_56==91||LA18_56==179||LA18_56==191||LA18_56==194||LA18_56==209||LA18_56==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 23:
                                                                    {
                                                                    int LA18_57 = input.LA(8);

                                                                    if ( (LA18_57==EOF||(LA18_57>=RULE_LINEBREAK && LA18_57<=RULE_ID)||LA18_57==14||LA18_57==23||(LA18_57>=25 && LA18_57<=26)||LA18_57==30||(LA18_57>=35 && LA18_57<=38)||(LA18_57>=40 && LA18_57<=41)||(LA18_57>=58 && LA18_57<=60)||LA18_57==91||LA18_57==179||LA18_57==191||LA18_57==194||LA18_57==209||LA18_57==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 38:
                                                                    {
                                                                    int LA18_58 = input.LA(8);

                                                                    if ( (LA18_58==EOF||(LA18_58>=RULE_LINEBREAK && LA18_58<=RULE_ID)||LA18_58==14||LA18_58==23||(LA18_58>=25 && LA18_58<=26)||LA18_58==30||(LA18_58>=35 && LA18_58<=38)||(LA18_58>=40 && LA18_58<=41)||(LA18_58>=58 && LA18_58<=60)||LA18_58==91||LA18_58==179||LA18_58==191||LA18_58==194||LA18_58==209||LA18_58==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 221:
                                                                    {
                                                                    int LA18_59 = input.LA(8);

                                                                    if ( (LA18_59==EOF||(LA18_59>=RULE_LINEBREAK && LA18_59<=RULE_ID)||LA18_59==14||LA18_59==23||(LA18_59>=25 && LA18_59<=26)||LA18_59==30||(LA18_59>=35 && LA18_59<=38)||(LA18_59>=40 && LA18_59<=41)||(LA18_59>=58 && LA18_59<=60)||LA18_59==91||LA18_59==179||LA18_59==191||LA18_59==194||LA18_59==209||LA18_59==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 194:
                                                                    {
                                                                    int LA18_60 = input.LA(8);

                                                                    if ( (LA18_60==EOF||(LA18_60>=RULE_LINEBREAK && LA18_60<=RULE_ID)||LA18_60==14||LA18_60==23||(LA18_60>=25 && LA18_60<=26)||LA18_60==30||(LA18_60>=35 && LA18_60<=38)||(LA18_60>=40 && LA18_60<=41)||(LA18_60>=58 && LA18_60<=60)||LA18_60==91||LA18_60==179||LA18_60==191||LA18_60==194||LA18_60==209||LA18_60==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 179:
                                                                    {
                                                                    int LA18_61 = input.LA(8);

                                                                    if ( (LA18_61==EOF||(LA18_61>=RULE_LINEBREAK && LA18_61<=RULE_ID)||LA18_61==14||LA18_61==23||(LA18_61>=25 && LA18_61<=26)||LA18_61==30||(LA18_61>=35 && LA18_61<=38)||(LA18_61>=40 && LA18_61<=41)||(LA18_61>=58 && LA18_61<=60)||LA18_61==91||LA18_61==179||LA18_61==191||LA18_61==194||LA18_61==209||LA18_61==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 191:
                                                                    {
                                                                    int LA18_62 = input.LA(8);

                                                                    if ( (LA18_62==EOF||(LA18_62>=RULE_LINEBREAK && LA18_62<=RULE_ID)||LA18_62==14||LA18_62==23||(LA18_62>=25 && LA18_62<=26)||LA18_62==30||(LA18_62>=35 && LA18_62<=38)||(LA18_62>=40 && LA18_62<=41)||(LA18_62>=58 && LA18_62<=60)||LA18_62==91||LA18_62==179||LA18_62==191||LA18_62==194||LA18_62==209||LA18_62==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 91:
                                                                    {
                                                                    int LA18_63 = input.LA(8);

                                                                    if ( (LA18_63==EOF||(LA18_63>=RULE_LINEBREAK && LA18_63<=RULE_ID)||LA18_63==14||LA18_63==23||(LA18_63>=25 && LA18_63<=26)||LA18_63==30||(LA18_63>=35 && LA18_63<=38)||(LA18_63>=40 && LA18_63<=41)||(LA18_63>=58 && LA18_63<=60)||LA18_63==91||LA18_63==179||LA18_63==191||LA18_63==194||LA18_63==209||LA18_63==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                                case 26:
                                                                    {
                                                                    int LA18_64 = input.LA(8);

                                                                    if ( (LA18_64==EOF||(LA18_64>=RULE_LINEBREAK && LA18_64<=RULE_ID)||LA18_64==14||LA18_64==23||(LA18_64>=25 && LA18_64<=26)||LA18_64==30||(LA18_64>=35 && LA18_64<=38)||(LA18_64>=40 && LA18_64<=41)||(LA18_64>=58 && LA18_64<=60)||LA18_64==91||LA18_64==179||LA18_64==191||LA18_64==194||LA18_64==209||LA18_64==221) ) {
                                                                        alt18=1;
                                                                    }
                                                                    }
                                                                    break;
                                                            }

                                                            }
                                                            break;
                                                        case 36:
                                                            {
                                                            int LA18_50 = input.LA(7);

                                                            if ( (LA18_50==RULE_ID||LA18_50==23||(LA18_50>=25 && LA18_50<=26)||LA18_50==30||LA18_50==38||LA18_50==40||LA18_50==59||LA18_50==91||LA18_50==179||LA18_50==191||LA18_50==194||LA18_50==209||LA18_50==221) ) {
                                                                alt18=1;
                                                            }
                                                            }
                                                            break;
                                                        case EOF:
                                                        case RULE_LINEBREAK:
                                                        case RULE_FIELDCOMMENT:
                                                        case RULE_ID:
                                                        case 14:
                                                        case 23:
                                                        case 25:
                                                        case 26:
                                                        case 30:
                                                        case 37:
                                                        case 38:
                                                        case 40:
                                                        case 41:
                                                        case 58:
                                                        case 59:
                                                        case 60:
                                                        case 91:
                                                        case 179:
                                                        case 191:
                                                        case 194:
                                                        case 209:
                                                        case 221:
                                                            {
                                                            alt18=1;
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                                case 209:
                                                    {
                                                    int LA18_36 = input.LA(6);

                                                    if ( (LA18_36==EOF||(LA18_36>=RULE_LINEBREAK && LA18_36<=RULE_ID)||LA18_36==14||LA18_36==23||(LA18_36>=25 && LA18_36<=26)||LA18_36==30||(LA18_36>=35 && LA18_36<=38)||(LA18_36>=40 && LA18_36<=41)||(LA18_36>=58 && LA18_36<=60)||LA18_36==91||LA18_36==179||LA18_36==191||LA18_36==194||LA18_36==209||LA18_36==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 59:
                                                    {
                                                    int LA18_37 = input.LA(6);

                                                    if ( (LA18_37==EOF||(LA18_37>=RULE_LINEBREAK && LA18_37<=RULE_ID)||LA18_37==14||LA18_37==23||(LA18_37>=25 && LA18_37<=26)||LA18_37==30||(LA18_37>=35 && LA18_37<=38)||(LA18_37>=40 && LA18_37<=41)||(LA18_37>=58 && LA18_37<=60)||LA18_37==91||LA18_37==179||LA18_37==191||LA18_37==194||LA18_37==209||LA18_37==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 30:
                                                    {
                                                    int LA18_38 = input.LA(6);

                                                    if ( (LA18_38==EOF||(LA18_38>=RULE_LINEBREAK && LA18_38<=RULE_ID)||LA18_38==14||LA18_38==23||(LA18_38>=25 && LA18_38<=26)||LA18_38==30||(LA18_38>=35 && LA18_38<=38)||(LA18_38>=40 && LA18_38<=41)||(LA18_38>=58 && LA18_38<=60)||LA18_38==91||LA18_38==179||LA18_38==191||LA18_38==194||LA18_38==209||LA18_38==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 40:
                                                    {
                                                    int LA18_39 = input.LA(6);

                                                    if ( (LA18_39==EOF||(LA18_39>=RULE_LINEBREAK && LA18_39<=RULE_ID)||LA18_39==14||LA18_39==23||(LA18_39>=25 && LA18_39<=26)||LA18_39==30||(LA18_39>=35 && LA18_39<=38)||(LA18_39>=40 && LA18_39<=41)||(LA18_39>=58 && LA18_39<=60)||LA18_39==91||LA18_39==179||LA18_39==191||LA18_39==194||LA18_39==209||LA18_39==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 25:
                                                    {
                                                    int LA18_40 = input.LA(6);

                                                    if ( (LA18_40==EOF||(LA18_40>=RULE_LINEBREAK && LA18_40<=RULE_ID)||LA18_40==14||LA18_40==23||(LA18_40>=25 && LA18_40<=26)||LA18_40==30||(LA18_40>=35 && LA18_40<=38)||(LA18_40>=40 && LA18_40<=41)||(LA18_40>=58 && LA18_40<=60)||LA18_40==91||LA18_40==179||LA18_40==191||LA18_40==194||LA18_40==209||LA18_40==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 23:
                                                    {
                                                    int LA18_41 = input.LA(6);

                                                    if ( (LA18_41==EOF||(LA18_41>=RULE_LINEBREAK && LA18_41<=RULE_ID)||LA18_41==14||LA18_41==23||(LA18_41>=25 && LA18_41<=26)||LA18_41==30||(LA18_41>=35 && LA18_41<=38)||(LA18_41>=40 && LA18_41<=41)||(LA18_41>=58 && LA18_41<=60)||LA18_41==91||LA18_41==179||LA18_41==191||LA18_41==194||LA18_41==209||LA18_41==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 38:
                                                    {
                                                    int LA18_42 = input.LA(6);

                                                    if ( (LA18_42==EOF||(LA18_42>=RULE_LINEBREAK && LA18_42<=RULE_ID)||LA18_42==14||LA18_42==23||(LA18_42>=25 && LA18_42<=26)||LA18_42==30||(LA18_42>=35 && LA18_42<=38)||(LA18_42>=40 && LA18_42<=41)||(LA18_42>=58 && LA18_42<=60)||LA18_42==91||LA18_42==179||LA18_42==191||LA18_42==194||LA18_42==209||LA18_42==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 221:
                                                    {
                                                    int LA18_43 = input.LA(6);

                                                    if ( (LA18_43==EOF||(LA18_43>=RULE_LINEBREAK && LA18_43<=RULE_ID)||LA18_43==14||LA18_43==23||(LA18_43>=25 && LA18_43<=26)||LA18_43==30||(LA18_43>=35 && LA18_43<=38)||(LA18_43>=40 && LA18_43<=41)||(LA18_43>=58 && LA18_43<=60)||LA18_43==91||LA18_43==179||LA18_43==191||LA18_43==194||LA18_43==209||LA18_43==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 194:
                                                    {
                                                    int LA18_44 = input.LA(6);

                                                    if ( (LA18_44==EOF||(LA18_44>=RULE_LINEBREAK && LA18_44<=RULE_ID)||LA18_44==14||LA18_44==23||(LA18_44>=25 && LA18_44<=26)||LA18_44==30||(LA18_44>=35 && LA18_44<=38)||(LA18_44>=40 && LA18_44<=41)||(LA18_44>=58 && LA18_44<=60)||LA18_44==91||LA18_44==179||LA18_44==191||LA18_44==194||LA18_44==209||LA18_44==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 179:
                                                    {
                                                    int LA18_45 = input.LA(6);

                                                    if ( (LA18_45==EOF||(LA18_45>=RULE_LINEBREAK && LA18_45<=RULE_ID)||LA18_45==14||LA18_45==23||(LA18_45>=25 && LA18_45<=26)||LA18_45==30||(LA18_45>=35 && LA18_45<=38)||(LA18_45>=40 && LA18_45<=41)||(LA18_45>=58 && LA18_45<=60)||LA18_45==91||LA18_45==179||LA18_45==191||LA18_45==194||LA18_45==209||LA18_45==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 191:
                                                    {
                                                    int LA18_46 = input.LA(6);

                                                    if ( (LA18_46==EOF||(LA18_46>=RULE_LINEBREAK && LA18_46<=RULE_ID)||LA18_46==14||LA18_46==23||(LA18_46>=25 && LA18_46<=26)||LA18_46==30||(LA18_46>=35 && LA18_46<=38)||(LA18_46>=40 && LA18_46<=41)||(LA18_46>=58 && LA18_46<=60)||LA18_46==91||LA18_46==179||LA18_46==191||LA18_46==194||LA18_46==209||LA18_46==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 91:
                                                    {
                                                    int LA18_47 = input.LA(6);

                                                    if ( (LA18_47==EOF||(LA18_47>=RULE_LINEBREAK && LA18_47<=RULE_ID)||LA18_47==14||LA18_47==23||(LA18_47>=25 && LA18_47<=26)||LA18_47==30||(LA18_47>=35 && LA18_47<=38)||(LA18_47>=40 && LA18_47<=41)||(LA18_47>=58 && LA18_47<=60)||LA18_47==91||LA18_47==179||LA18_47==191||LA18_47==194||LA18_47==209||LA18_47==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                                case 26:
                                                    {
                                                    int LA18_48 = input.LA(6);

                                                    if ( (LA18_48==EOF||(LA18_48>=RULE_LINEBREAK && LA18_48<=RULE_ID)||LA18_48==14||LA18_48==23||(LA18_48>=25 && LA18_48<=26)||LA18_48==30||(LA18_48>=35 && LA18_48<=38)||(LA18_48>=40 && LA18_48<=41)||(LA18_48>=58 && LA18_48<=60)||LA18_48==91||LA18_48==179||LA18_48==191||LA18_48==194||LA18_48==209||LA18_48==221) ) {
                                                        alt18=1;
                                                    }
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                        case EOF:
                                        case RULE_LINEBREAK:
                                        case RULE_FIELDCOMMENT:
                                        case RULE_ID:
                                        case 14:
                                        case 23:
                                        case 25:
                                        case 26:
                                        case 30:
                                        case 37:
                                        case 38:
                                        case 40:
                                        case 41:
                                        case 58:
                                        case 59:
                                        case 60:
                                        case 91:
                                        case 179:
                                        case 191:
                                        case 194:
                                        case 209:
                                        case 221:
                                            {
                                            alt18=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case 209:
                                    {
                                    int LA18_20 = input.LA(4);

                                    if ( (LA18_20==EOF||(LA18_20>=RULE_LINEBREAK && LA18_20<=RULE_ID)||LA18_20==14||LA18_20==23||(LA18_20>=25 && LA18_20<=26)||LA18_20==30||(LA18_20>=35 && LA18_20<=38)||(LA18_20>=40 && LA18_20<=41)||(LA18_20>=58 && LA18_20<=60)||LA18_20==91||LA18_20==179||LA18_20==191||LA18_20==194||LA18_20==209||LA18_20==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 59:
                                    {
                                    int LA18_21 = input.LA(4);

                                    if ( (LA18_21==EOF||(LA18_21>=RULE_LINEBREAK && LA18_21<=RULE_ID)||LA18_21==14||LA18_21==23||(LA18_21>=25 && LA18_21<=26)||LA18_21==30||(LA18_21>=35 && LA18_21<=38)||(LA18_21>=40 && LA18_21<=41)||(LA18_21>=58 && LA18_21<=60)||LA18_21==91||LA18_21==179||LA18_21==191||LA18_21==194||LA18_21==209||LA18_21==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 30:
                                    {
                                    int LA18_22 = input.LA(4);

                                    if ( (LA18_22==EOF||(LA18_22>=RULE_LINEBREAK && LA18_22<=RULE_ID)||LA18_22==14||LA18_22==23||(LA18_22>=25 && LA18_22<=26)||LA18_22==30||(LA18_22>=35 && LA18_22<=38)||(LA18_22>=40 && LA18_22<=41)||(LA18_22>=58 && LA18_22<=60)||LA18_22==91||LA18_22==179||LA18_22==191||LA18_22==194||LA18_22==209||LA18_22==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 40:
                                    {
                                    int LA18_23 = input.LA(4);

                                    if ( (LA18_23==EOF||(LA18_23>=RULE_LINEBREAK && LA18_23<=RULE_ID)||LA18_23==14||LA18_23==23||(LA18_23>=25 && LA18_23<=26)||LA18_23==30||(LA18_23>=35 && LA18_23<=38)||(LA18_23>=40 && LA18_23<=41)||(LA18_23>=58 && LA18_23<=60)||LA18_23==91||LA18_23==179||LA18_23==191||LA18_23==194||LA18_23==209||LA18_23==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 25:
                                    {
                                    int LA18_24 = input.LA(4);

                                    if ( (LA18_24==EOF||(LA18_24>=RULE_LINEBREAK && LA18_24<=RULE_ID)||LA18_24==14||LA18_24==23||(LA18_24>=25 && LA18_24<=26)||LA18_24==30||(LA18_24>=35 && LA18_24<=38)||(LA18_24>=40 && LA18_24<=41)||(LA18_24>=58 && LA18_24<=60)||LA18_24==91||LA18_24==179||LA18_24==191||LA18_24==194||LA18_24==209||LA18_24==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 23:
                                    {
                                    int LA18_25 = input.LA(4);

                                    if ( (LA18_25==EOF||(LA18_25>=RULE_LINEBREAK && LA18_25<=RULE_ID)||LA18_25==14||LA18_25==23||(LA18_25>=25 && LA18_25<=26)||LA18_25==30||(LA18_25>=35 && LA18_25<=38)||(LA18_25>=40 && LA18_25<=41)||(LA18_25>=58 && LA18_25<=60)||LA18_25==91||LA18_25==179||LA18_25==191||LA18_25==194||LA18_25==209||LA18_25==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 38:
                                    {
                                    int LA18_26 = input.LA(4);

                                    if ( (LA18_26==EOF||(LA18_26>=RULE_LINEBREAK && LA18_26<=RULE_ID)||LA18_26==14||LA18_26==23||(LA18_26>=25 && LA18_26<=26)||LA18_26==30||(LA18_26>=35 && LA18_26<=38)||(LA18_26>=40 && LA18_26<=41)||(LA18_26>=58 && LA18_26<=60)||LA18_26==91||LA18_26==179||LA18_26==191||LA18_26==194||LA18_26==209||LA18_26==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 221:
                                    {
                                    int LA18_27 = input.LA(4);

                                    if ( (LA18_27==EOF||(LA18_27>=RULE_LINEBREAK && LA18_27<=RULE_ID)||LA18_27==14||LA18_27==23||(LA18_27>=25 && LA18_27<=26)||LA18_27==30||(LA18_27>=35 && LA18_27<=38)||(LA18_27>=40 && LA18_27<=41)||(LA18_27>=58 && LA18_27<=60)||LA18_27==91||LA18_27==179||LA18_27==191||LA18_27==194||LA18_27==209||LA18_27==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 194:
                                    {
                                    int LA18_28 = input.LA(4);

                                    if ( (LA18_28==EOF||(LA18_28>=RULE_LINEBREAK && LA18_28<=RULE_ID)||LA18_28==14||LA18_28==23||(LA18_28>=25 && LA18_28<=26)||LA18_28==30||(LA18_28>=35 && LA18_28<=38)||(LA18_28>=40 && LA18_28<=41)||(LA18_28>=58 && LA18_28<=60)||LA18_28==91||LA18_28==179||LA18_28==191||LA18_28==194||LA18_28==209||LA18_28==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 179:
                                    {
                                    int LA18_29 = input.LA(4);

                                    if ( (LA18_29==EOF||(LA18_29>=RULE_LINEBREAK && LA18_29<=RULE_ID)||LA18_29==14||LA18_29==23||(LA18_29>=25 && LA18_29<=26)||LA18_29==30||(LA18_29>=35 && LA18_29<=38)||(LA18_29>=40 && LA18_29<=41)||(LA18_29>=58 && LA18_29<=60)||LA18_29==91||LA18_29==179||LA18_29==191||LA18_29==194||LA18_29==209||LA18_29==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 191:
                                    {
                                    int LA18_30 = input.LA(4);

                                    if ( (LA18_30==EOF||(LA18_30>=RULE_LINEBREAK && LA18_30<=RULE_ID)||LA18_30==14||LA18_30==23||(LA18_30>=25 && LA18_30<=26)||LA18_30==30||(LA18_30>=35 && LA18_30<=38)||(LA18_30>=40 && LA18_30<=41)||(LA18_30>=58 && LA18_30<=60)||LA18_30==91||LA18_30==179||LA18_30==191||LA18_30==194||LA18_30==209||LA18_30==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 91:
                                    {
                                    int LA18_31 = input.LA(4);

                                    if ( (LA18_31==EOF||(LA18_31>=RULE_LINEBREAK && LA18_31<=RULE_ID)||LA18_31==14||LA18_31==23||(LA18_31>=25 && LA18_31<=26)||LA18_31==30||(LA18_31>=35 && LA18_31<=38)||(LA18_31>=40 && LA18_31<=41)||(LA18_31>=58 && LA18_31<=60)||LA18_31==91||LA18_31==179||LA18_31==191||LA18_31==194||LA18_31==209||LA18_31==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                                case 26:
                                    {
                                    int LA18_32 = input.LA(4);

                                    if ( (LA18_32==EOF||(LA18_32>=RULE_LINEBREAK && LA18_32<=RULE_ID)||LA18_32==14||LA18_32==23||(LA18_32>=25 && LA18_32<=26)||LA18_32==30||(LA18_32>=35 && LA18_32<=38)||(LA18_32>=40 && LA18_32<=41)||(LA18_32>=58 && LA18_32<=60)||LA18_32==91||LA18_32==179||LA18_32==191||LA18_32==194||LA18_32==209||LA18_32==221) ) {
                                        alt18=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 36:
                            {
                            int LA18_17 = input.LA(3);

                            if ( (LA18_17==RULE_ID||LA18_17==23||(LA18_17>=25 && LA18_17<=26)||LA18_17==30||LA18_17==38||LA18_17==40||LA18_17==59||LA18_17==91||LA18_17==179||LA18_17==191||LA18_17==194||LA18_17==209||LA18_17==221) ) {
                                alt18=1;
                            }
                            }
                            break;
                        case EOF:
                        case RULE_LINEBREAK:
                        case RULE_FIELDCOMMENT:
                        case RULE_ID:
                        case 14:
                        case 23:
                        case 25:
                        case 26:
                        case 30:
                        case 37:
                        case 38:
                        case 40:
                        case 41:
                        case 58:
                        case 59:
                        case 60:
                        case 91:
                        case 179:
                        case 191:
                        case 194:
                        case 209:
                        case 221:
                            {
                            alt18=1;
                            }
                            break;
                    }

                    }
                    break;
                case 209:
                    {
                    int LA18_2 = input.LA(2);

                    if ( (LA18_2==EOF||(LA18_2>=RULE_LINEBREAK && LA18_2<=RULE_ID)||LA18_2==14||LA18_2==23||(LA18_2>=25 && LA18_2<=26)||LA18_2==30||(LA18_2>=35 && LA18_2<=38)||(LA18_2>=40 && LA18_2<=41)||(LA18_2>=58 && LA18_2<=60)||LA18_2==91||LA18_2==179||LA18_2==191||LA18_2==194||LA18_2==209||LA18_2==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA18_3 = input.LA(2);

                    if ( (LA18_3==EOF||(LA18_3>=RULE_LINEBREAK && LA18_3<=RULE_ID)||LA18_3==14||LA18_3==23||(LA18_3>=25 && LA18_3<=26)||LA18_3==30||(LA18_3>=35 && LA18_3<=38)||(LA18_3>=40 && LA18_3<=41)||(LA18_3>=58 && LA18_3<=60)||LA18_3==91||LA18_3==179||LA18_3==191||LA18_3==194||LA18_3==209||LA18_3==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 30:
                    {
                    int LA18_4 = input.LA(2);

                    if ( (LA18_4==EOF||(LA18_4>=RULE_LINEBREAK && LA18_4<=RULE_ID)||LA18_4==14||LA18_4==23||(LA18_4>=25 && LA18_4<=26)||LA18_4==30||(LA18_4>=35 && LA18_4<=38)||(LA18_4>=40 && LA18_4<=41)||(LA18_4>=58 && LA18_4<=60)||LA18_4==91||LA18_4==179||LA18_4==191||LA18_4==194||LA18_4==209||LA18_4==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 40:
                    {
                    int LA18_5 = input.LA(2);

                    if ( (LA18_5==EOF||(LA18_5>=RULE_LINEBREAK && LA18_5<=RULE_ID)||LA18_5==14||LA18_5==23||(LA18_5>=25 && LA18_5<=26)||LA18_5==30||(LA18_5>=35 && LA18_5<=38)||(LA18_5>=40 && LA18_5<=41)||(LA18_5>=58 && LA18_5<=60)||LA18_5==91||LA18_5==179||LA18_5==191||LA18_5==194||LA18_5==209||LA18_5==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 25:
                    {
                    int LA18_6 = input.LA(2);

                    if ( (LA18_6==EOF||(LA18_6>=RULE_LINEBREAK && LA18_6<=RULE_ID)||LA18_6==14||LA18_6==23||(LA18_6>=25 && LA18_6<=26)||LA18_6==30||(LA18_6>=35 && LA18_6<=38)||(LA18_6>=40 && LA18_6<=41)||(LA18_6>=58 && LA18_6<=60)||LA18_6==91||LA18_6==179||LA18_6==191||LA18_6==194||LA18_6==209||LA18_6==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 23:
                    {
                    int LA18_7 = input.LA(2);

                    if ( (LA18_7==EOF||(LA18_7>=RULE_LINEBREAK && LA18_7<=RULE_ID)||LA18_7==14||LA18_7==23||(LA18_7>=25 && LA18_7<=26)||LA18_7==30||(LA18_7>=35 && LA18_7<=38)||(LA18_7>=40 && LA18_7<=41)||(LA18_7>=58 && LA18_7<=60)||LA18_7==91||LA18_7==179||LA18_7==191||LA18_7==194||LA18_7==209||LA18_7==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 38:
                    {
                    int LA18_8 = input.LA(2);

                    if ( (LA18_8==EOF||(LA18_8>=RULE_LINEBREAK && LA18_8<=RULE_ID)||LA18_8==14||LA18_8==23||(LA18_8>=25 && LA18_8<=26)||LA18_8==30||(LA18_8>=35 && LA18_8<=38)||(LA18_8>=40 && LA18_8<=41)||(LA18_8>=58 && LA18_8<=60)||LA18_8==91||LA18_8==179||LA18_8==191||LA18_8==194||LA18_8==209||LA18_8==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 221:
                    {
                    int LA18_9 = input.LA(2);

                    if ( (LA18_9==EOF||(LA18_9>=RULE_LINEBREAK && LA18_9<=RULE_ID)||LA18_9==14||LA18_9==23||(LA18_9>=25 && LA18_9<=26)||LA18_9==30||(LA18_9>=35 && LA18_9<=38)||(LA18_9>=40 && LA18_9<=41)||(LA18_9>=58 && LA18_9<=60)||LA18_9==91||LA18_9==179||LA18_9==191||LA18_9==194||LA18_9==209||LA18_9==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 194:
                    {
                    int LA18_10 = input.LA(2);

                    if ( (LA18_10==EOF||(LA18_10>=RULE_LINEBREAK && LA18_10<=RULE_ID)||LA18_10==14||LA18_10==23||(LA18_10>=25 && LA18_10<=26)||LA18_10==30||(LA18_10>=35 && LA18_10<=38)||(LA18_10>=40 && LA18_10<=41)||(LA18_10>=58 && LA18_10<=60)||LA18_10==91||LA18_10==179||LA18_10==191||LA18_10==194||LA18_10==209||LA18_10==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 179:
                    {
                    int LA18_11 = input.LA(2);

                    if ( (LA18_11==EOF||(LA18_11>=RULE_LINEBREAK && LA18_11<=RULE_ID)||LA18_11==14||LA18_11==23||(LA18_11>=25 && LA18_11<=26)||LA18_11==30||(LA18_11>=35 && LA18_11<=38)||(LA18_11>=40 && LA18_11<=41)||(LA18_11>=58 && LA18_11<=60)||LA18_11==91||LA18_11==179||LA18_11==191||LA18_11==194||LA18_11==209||LA18_11==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 191:
                    {
                    int LA18_12 = input.LA(2);

                    if ( (LA18_12==EOF||(LA18_12>=RULE_LINEBREAK && LA18_12<=RULE_ID)||LA18_12==14||LA18_12==23||(LA18_12>=25 && LA18_12<=26)||LA18_12==30||(LA18_12>=35 && LA18_12<=38)||(LA18_12>=40 && LA18_12<=41)||(LA18_12>=58 && LA18_12<=60)||LA18_12==91||LA18_12==179||LA18_12==191||LA18_12==194||LA18_12==209||LA18_12==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 91:
                    {
                    int LA18_13 = input.LA(2);

                    if ( (LA18_13==EOF||(LA18_13>=RULE_LINEBREAK && LA18_13<=RULE_ID)||LA18_13==14||LA18_13==23||(LA18_13>=25 && LA18_13<=26)||LA18_13==30||(LA18_13>=35 && LA18_13<=38)||(LA18_13>=40 && LA18_13<=41)||(LA18_13>=58 && LA18_13<=60)||LA18_13==91||LA18_13==179||LA18_13==191||LA18_13==194||LA18_13==209||LA18_13==221) ) {
                        alt18=1;
                    }
                    }
                    break;
                case 26:
                    {
                    int LA18_14 = input.LA(2);

                    if ( (LA18_14==EOF||(LA18_14>=RULE_LINEBREAK && LA18_14<=RULE_ID)||LA18_14==14||LA18_14==23||(LA18_14>=25 && LA18_14<=26)||LA18_14==30||(LA18_14>=35 && LA18_14<=38)||(LA18_14>=40 && LA18_14<=41)||(LA18_14>=58 && LA18_14<=60)||LA18_14==91||LA18_14==179||LA18_14==191||LA18_14==194||LA18_14==209||LA18_14==221) ) {
                        alt18=1;
                    }
                    }
                    break;
            }

            switch (alt18) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1339:1: (lv_type_2_0= ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1339:1: (lv_type_2_0= ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1340:3: lv_type_2_0= ruletype
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruletype_in_rulesetType2542);
                    lv_type_2_0=ruletype();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSetTypeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"type",
                      	        		lv_type_2_0, 
                      	        		"type", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulesetType


    // $ANTLR start entryRulesubFieldDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1370:1: entryRulesubFieldDeclaration returns [EObject current=null] : iv_rulesubFieldDeclaration= rulesubFieldDeclaration EOF ;
    public final EObject entryRulesubFieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulesubFieldDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1371:2: (iv_rulesubFieldDeclaration= rulesubFieldDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1372:2: iv_rulesubFieldDeclaration= rulesubFieldDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSubFieldDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulesubFieldDeclaration_in_entryRulesubFieldDeclaration2579);
            iv_rulesubFieldDeclaration=rulesubFieldDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulesubFieldDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulesubFieldDeclaration2589); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulesubFieldDeclaration


    // $ANTLR start rulesubFieldDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1379:1: rulesubFieldDeclaration returns [EObject current=null] : ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruledeclaration ) ) ) ;
    public final EObject rulesubFieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_d_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1384:6: ( ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruledeclaration ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1385:1: ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruledeclaration ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1385:1: ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruledeclaration ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1385:2: ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruledeclaration ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1385:2: ( ( RULE_ID ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1386:1: ( RULE_ID )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1386:1: ( RULE_ID )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1387:3: RULE_ID
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getSubFieldDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            match(input,RULE_ID,FOLLOW_RULE_ID_in_rulesubFieldDeclaration2636); if (failed) return current;
            if ( backtracking==0 ) {

              		createLeafNode(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationCrossReference_0_0(), "subFieldOf"); 
              	
            }

            }


            }

            match(input,35,FOLLOW_35_in_rulesubFieldDeclaration2646); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getSubFieldDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1406:1: ( (lv_d_2_0= ruledeclaration ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1407:1: (lv_d_2_0= ruledeclaration )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1407:1: (lv_d_2_0= ruledeclaration )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1408:3: lv_d_2_0= ruledeclaration
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getSubFieldDeclarationAccess().getDDeclarationParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruledeclaration_in_rulesubFieldDeclaration2667);
            lv_d_2_0=ruledeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getSubFieldDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"d",
              	        		lv_d_2_0, 
              	        		"declaration", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulesubFieldDeclaration


    // $ANTLR start entryRuletype
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1438:1: entryRuletype returns [String current=null] : iv_ruletype= ruletype EOF ;
    public final String entryRuletype() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruletype = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1439:2: (iv_ruletype= ruletype EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1440:2: iv_ruletype= ruletype EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruletype_in_entryRuletype2704);
            iv_ruletype=ruletype();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruletype.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuletype2715); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuletype


    // $ANTLR start ruletype
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1447:1: ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_ID_0= RULE_ID | this_keyword_1= rulekeyword ) ( (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword ) )* ) ;
    public final AntlrDatatypeRuleToken ruletype() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;
        Token this_ID_4=null;
        AntlrDatatypeRuleToken this_keyword_1 = null;

        AntlrDatatypeRuleToken this_keyword_5 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1452:6: ( ( (this_ID_0= RULE_ID | this_keyword_1= rulekeyword ) ( (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1453:1: ( (this_ID_0= RULE_ID | this_keyword_1= rulekeyword ) ( (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1453:1: ( (this_ID_0= RULE_ID | this_keyword_1= rulekeyword ) ( (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1453:2: (this_ID_0= RULE_ID | this_keyword_1= rulekeyword ) ( (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1453:2: (this_ID_0= RULE_ID | this_keyword_1= rulekeyword )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==RULE_ID) ) {
                alt19=1;
            }
            else if ( (LA19_0==23||(LA19_0>=25 && LA19_0<=26)||LA19_0==30||LA19_0==38||LA19_0==40||LA19_0==59||LA19_0==91||LA19_0==179||LA19_0==191||LA19_0==194||LA19_0==209||LA19_0==221) ) {
                alt19=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1453:2: (this_ID_0= RULE_ID | this_keyword_1= rulekeyword )", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1453:7: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_ruletype2756); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ID_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getTypeAccess().getIDTerminalRuleCall_0_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1462:5: this_keyword_1= rulekeyword
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getTypeAccess().getKeywordParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulekeyword_in_ruletype2789);
                    this_keyword_1=rulekeyword();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_keyword_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1472:2: ( (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword ) )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( ((LA22_0>=35 && LA22_0<=36)) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1472:3: (kw= '.' | kw= '->' ) (this_ID_4= RULE_ID | this_keyword_5= rulekeyword )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1472:3: (kw= '.' | kw= '->' )
            	    int alt20=2;
            	    int LA20_0 = input.LA(1);

            	    if ( (LA20_0==36) ) {
            	        alt20=1;
            	    }
            	    else if ( (LA20_0==35) ) {
            	        alt20=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1472:3: (kw= '.' | kw= '->' )", 20, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt20) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1473:2: kw= '.'
            	            {
            	            kw=(Token)input.LT(1);
            	            match(input,36,FOLLOW_36_in_ruletype2810); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      current.merge(kw);
            	                      createLeafNode(grammarAccess.getTypeAccess().getFullStopKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1480:2: kw= '->'
            	            {
            	            kw=(Token)input.LT(1);
            	            match(input,35,FOLLOW_35_in_ruletype2829); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      current.merge(kw);
            	                      createLeafNode(grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1485:2: (this_ID_4= RULE_ID | this_keyword_5= rulekeyword )
            	    int alt21=2;
            	    int LA21_0 = input.LA(1);

            	    if ( (LA21_0==RULE_ID) ) {
            	        alt21=1;
            	    }
            	    else if ( (LA21_0==23||(LA21_0>=25 && LA21_0<=26)||LA21_0==30||LA21_0==38||LA21_0==40||LA21_0==59||LA21_0==91||LA21_0==179||LA21_0==191||LA21_0==194||LA21_0==209||LA21_0==221) ) {
            	        alt21=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1485:2: (this_ID_4= RULE_ID | this_keyword_5= rulekeyword )", 21, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt21) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1485:7: this_ID_4= RULE_ID
            	            {
            	            this_ID_4=(Token)input.LT(1);
            	            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruletype2846); if (failed) return current;
            	            if ( backtracking==0 ) {

            	              		current.merge(this_ID_4);
            	                  
            	            }
            	            if ( backtracking==0 ) {
            	               
            	                  createLeafNode(grammarAccess.getTypeAccess().getIDTerminalRuleCall_1_1_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1494:5: this_keyword_5= rulekeyword
            	            {
            	            if ( backtracking==0 ) {
            	               
            	                      currentNode=createCompositeNode(grammarAccess.getTypeAccess().getKeywordParserRuleCall_1_1_1(), currentNode); 
            	                  
            	            }
            	            pushFollow(FOLLOW_rulekeyword_in_ruletype2879);
            	            this_keyword_5=rulekeyword();
            	            _fsp--;
            	            if (failed) return current;
            	            if ( backtracking==0 ) {

            	              		current.merge(this_keyword_5);
            	                  
            	            }
            	            if ( backtracking==0 ) {
            	               
            	                      currentNode = currentNode.getParent();
            	                  
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruletype


    // $ANTLR start entryRuletitleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1512:1: entryRuletitleDeclaration returns [EObject current=null] : iv_ruletitleDeclaration= ruletitleDeclaration EOF ;
    public final EObject entryRuletitleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruletitleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1513:2: (iv_ruletitleDeclaration= ruletitleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1514:2: iv_ruletitleDeclaration= ruletitleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTitleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruletitleDeclaration_in_entryRuletitleDeclaration2927);
            iv_ruletitleDeclaration=ruletitleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruletitleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuletitleDeclaration2937); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuletitleDeclaration


    // $ANTLR start ruletitleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1521:1: ruletitleDeclaration returns [EObject current=null] : ( '!' 'title' '=' ( (lv_title_3_0= ruletitle ) ) ) ;
    public final EObject ruletitleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_title_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1526:6: ( ( '!' 'title' '=' ( (lv_title_3_0= ruletitle ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1527:1: ( '!' 'title' '=' ( (lv_title_3_0= ruletitle ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1527:1: ( '!' 'title' '=' ( (lv_title_3_0= ruletitle ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1527:3: '!' 'title' '=' ( (lv_title_3_0= ruletitle ) )
            {
            match(input,37,FOLLOW_37_in_ruletitleDeclaration2972); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTitleDeclarationAccess().getExclamationMarkKeyword_0(), null); 
                  
            }
            match(input,38,FOLLOW_38_in_ruletitleDeclaration2982); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTitleDeclarationAccess().getTitleKeyword_1(), null); 
                  
            }
            match(input,13,FOLLOW_13_in_ruletitleDeclaration2992); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTitleDeclarationAccess().getEqualsSignKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1539:1: ( (lv_title_3_0= ruletitle ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1540:1: (lv_title_3_0= ruletitle )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1540:1: (lv_title_3_0= ruletitle )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1541:3: lv_title_3_0= ruletitle
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getTitleDeclarationAccess().getTitleTitleParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruletitle_in_ruletitleDeclaration3013);
            lv_title_3_0=ruletitle();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getTitleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"title",
              	        		lv_title_3_0, 
              	        		"title", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruletitleDeclaration


    // $ANTLR start entryRuletitle
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1571:1: entryRuletitle returns [EObject current=null] : iv_ruletitle= ruletitle EOF ;
    public final EObject entryRuletitle() throws RecognitionException {
        EObject current = null;

        EObject iv_ruletitle = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1572:2: (iv_ruletitle= ruletitle EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1573:2: iv_ruletitle= ruletitle EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTitleRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruletitle_in_entryRuletitle3049);
            iv_ruletitle=ruletitle();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruletitle; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuletitle3059); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuletitle


    // $ANTLR start ruletitle
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1580:1: ruletitle returns [EObject current=null] : ( ( (lv_name_0_0= ruletype ) ) | this_functionCall_1= rulefunctionCall ) ;
    public final EObject ruletitle() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject this_functionCall_1 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1585:6: ( ( ( (lv_name_0_0= ruletype ) ) | this_functionCall_1= rulefunctionCall ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1586:1: ( ( (lv_name_0_0= ruletype ) ) | this_functionCall_1= rulefunctionCall )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1586:1: ( ( (lv_name_0_0= ruletype ) ) | this_functionCall_1= rulefunctionCall )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==RULE_ID) ) {
                int LA23_1 = input.LA(2);

                if ( (LA23_1==EOF||(LA23_1>=RULE_LINEBREAK && LA23_1<=RULE_ID)||LA23_1==14||LA23_1==23||(LA23_1>=25 && LA23_1<=26)||LA23_1==30||(LA23_1>=35 && LA23_1<=38)||(LA23_1>=40 && LA23_1<=41)||(LA23_1>=58 && LA23_1<=60)||LA23_1==91||LA23_1==179||LA23_1==191||LA23_1==194||LA23_1==209||LA23_1==221) ) {
                    alt23=1;
                }
                else if ( (LA23_1==43) ) {
                    alt23=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("1586:1: ( ( (lv_name_0_0= ruletype ) ) | this_functionCall_1= rulefunctionCall )", 23, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA23_0==23||(LA23_0>=25 && LA23_0<=26)||LA23_0==30||LA23_0==38||LA23_0==40||LA23_0==59||LA23_0==91||LA23_0==179||LA23_0==191||LA23_0==194||LA23_0==209||LA23_0==221) ) {
                alt23=1;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1586:1: ( ( (lv_name_0_0= ruletype ) ) | this_functionCall_1= rulefunctionCall )", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1586:2: ( (lv_name_0_0= ruletype ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1586:2: ( (lv_name_0_0= ruletype ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1587:1: (lv_name_0_0= ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1587:1: (lv_name_0_0= ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1588:3: lv_name_0_0= ruletype
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getTitleAccess().getNameTypeParserRuleCall_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruletype_in_ruletitle3105);
                    lv_name_0_0=ruletype();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getTitleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"name",
                      	        		lv_name_0_0, 
                      	        		"type", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1612:2: this_functionCall_1= rulefunctionCall
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getTitleAccess().getFunctionCallParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulefunctionCall_in_ruletitle3136);
                    this_functionCall_1=rulefunctionCall();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_functionCall_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruletitle


    // $ANTLR start entryRuleincludeDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1631:1: entryRuleincludeDeclaration returns [EObject current=null] : iv_ruleincludeDeclaration= ruleincludeDeclaration EOF ;
    public final EObject entryRuleincludeDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleincludeDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1632:2: (iv_ruleincludeDeclaration= ruleincludeDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1633:2: iv_ruleincludeDeclaration= ruleincludeDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIncludeDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleincludeDeclaration_in_entryRuleincludeDeclaration3171);
            iv_ruleincludeDeclaration=ruleincludeDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleincludeDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleincludeDeclaration3181); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleincludeDeclaration


    // $ANTLR start ruleincludeDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1640:1: ruleincludeDeclaration returns [EObject current=null] : ( '!' 'include' '=' ( (lv_importedNamespace_3_0= ruletype ) ) ) ;
    public final EObject ruleincludeDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_importedNamespace_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1645:6: ( ( '!' 'include' '=' ( (lv_importedNamespace_3_0= ruletype ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1646:1: ( '!' 'include' '=' ( (lv_importedNamespace_3_0= ruletype ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1646:1: ( '!' 'include' '=' ( (lv_importedNamespace_3_0= ruletype ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1646:3: '!' 'include' '=' ( (lv_importedNamespace_3_0= ruletype ) )
            {
            match(input,37,FOLLOW_37_in_ruleincludeDeclaration3216); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIncludeDeclarationAccess().getExclamationMarkKeyword_0(), null); 
                  
            }
            match(input,39,FOLLOW_39_in_ruleincludeDeclaration3226); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1(), null); 
                  
            }
            match(input,13,FOLLOW_13_in_ruleincludeDeclaration3236); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIncludeDeclarationAccess().getEqualsSignKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1658:1: ( (lv_importedNamespace_3_0= ruletype ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1659:1: (lv_importedNamespace_3_0= ruletype )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1659:1: (lv_importedNamespace_3_0= ruletype )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1660:3: lv_importedNamespace_3_0= ruletype
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceTypeParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruletype_in_ruleincludeDeclaration3257);
            lv_importedNamespace_3_0=ruletype();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getIncludeDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"importedNamespace",
              	        		lv_importedNamespace_3_0, 
              	        		"type", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleincludeDeclaration


    // $ANTLR start entryRuletypeDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1690:1: entryRuletypeDeclaration returns [EObject current=null] : iv_ruletypeDeclaration= ruletypeDeclaration EOF ;
    public final EObject entryRuletypeDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruletypeDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1691:2: (iv_ruletypeDeclaration= ruletypeDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1692:2: iv_ruletypeDeclaration= ruletypeDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTypeDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruletypeDeclaration_in_entryRuletypeDeclaration3293);
            iv_ruletypeDeclaration=ruletypeDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruletypeDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuletypeDeclaration3303); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuletypeDeclaration


    // $ANTLR start ruletypeDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1699:1: ruletypeDeclaration returns [EObject current=null] : ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= rulefieldType ) ) ) ;
    public final EObject ruletypeDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_3_0=null;
        EObject lv_fieldType_5_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1704:6: ( ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= rulefieldType ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1705:1: ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= rulefieldType ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1705:1: ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= rulefieldType ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1705:3: '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= rulefieldType ) )
            {
            match(input,37,FOLLOW_37_in_ruletypeDeclaration3338); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getExclamationMarkKeyword_0(), null); 
                  
            }
            match(input,40,FOLLOW_40_in_ruletypeDeclaration3348); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1(), null); 
                  
            }
            match(input,36,FOLLOW_36_in_ruletypeDeclaration3358); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1717:1: ( (lv_name_3_0= RULE_ID ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1718:1: (lv_name_3_0= RULE_ID )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1718:1: (lv_name_3_0= RULE_ID )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1719:3: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)input.LT(1);
            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruletypeDeclaration3375); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getTypeDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_3_0, 
              	        		"ID", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,13,FOLLOW_13_in_ruletypeDeclaration3390); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_4(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1745:1: ( (lv_fieldType_5_0= rulefieldType ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1746:1: (lv_fieldType_5_0= rulefieldType )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1746:1: (lv_fieldType_5_0= rulefieldType )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1747:3: lv_fieldType_5_0= rulefieldType
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getTypeDeclarationAccess().getFieldTypeFieldTypeParserRuleCall_5_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefieldType_in_ruletypeDeclaration3411);
            lv_fieldType_5_0=rulefieldType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getTypeDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"fieldType",
              	        		lv_fieldType_5_0, 
              	        		"fieldType", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruletypeDeclaration


    // $ANTLR start entryRulevalidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1777:1: entryRulevalidationRuleDeclaration returns [EObject current=null] : iv_rulevalidationRuleDeclaration= rulevalidationRuleDeclaration EOF ;
    public final EObject entryRulevalidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulevalidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1778:2: (iv_rulevalidationRuleDeclaration= rulevalidationRuleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1779:2: iv_rulevalidationRuleDeclaration= rulevalidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulevalidationRuleDeclaration_in_entryRulevalidationRuleDeclaration3447);
            iv_rulevalidationRuleDeclaration=rulevalidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulevalidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulevalidationRuleDeclaration3457); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulevalidationRuleDeclaration


    // $ANTLR start rulevalidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1786:1: rulevalidationRuleDeclaration returns [EObject current=null] : ( (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleerrorMessage ) ) ) ;
    public final EObject rulevalidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_rangeValidationRuleDeclaration_0 = null;

        EObject this_uniquenessValidationRuleDeclaration_1 = null;

        EObject this_comparisonValidationRuleDeclaration_2 = null;

        EObject this_regexValidationRuleDeclaration_3 = null;

        EObject lv_errorMessage_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1791:6: ( ( (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleerrorMessage ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1792:1: ( (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleerrorMessage ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1792:1: ( (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleerrorMessage ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1792:2: (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleerrorMessage ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1792:2: (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration )
            int alt24=4;
            switch ( input.LA(1) ) {
            case 58:
            case 59:
                {
                alt24=1;
                }
                break;
            case 14:
                {
                alt24=2;
                }
                break;
            case 41:
                {
                alt24=3;
                }
                break;
            case 60:
                {
                alt24=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1792:2: (this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration | this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration | this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration | this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration )", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1793:2: this_rangeValidationRuleDeclaration_0= rulerangeValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getRangeValidationRuleDeclarationParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulerangeValidationRuleDeclaration_in_rulevalidationRuleDeclaration3508);
                    this_rangeValidationRuleDeclaration_0=rulerangeValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_rangeValidationRuleDeclaration_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1806:2: this_uniquenessValidationRuleDeclaration_1= ruleuniquenessValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getUniquenessValidationRuleDeclarationParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleuniquenessValidationRuleDeclaration_in_rulevalidationRuleDeclaration3538);
                    this_uniquenessValidationRuleDeclaration_1=ruleuniquenessValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_uniquenessValidationRuleDeclaration_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1819:2: this_comparisonValidationRuleDeclaration_2= rulecomparisonValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getComparisonValidationRuleDeclarationParserRuleCall_0_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecomparisonValidationRuleDeclaration_in_rulevalidationRuleDeclaration3568);
                    this_comparisonValidationRuleDeclaration_2=rulecomparisonValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_comparisonValidationRuleDeclaration_2; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1832:2: this_regexValidationRuleDeclaration_3= ruleregexValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getRegexValidationRuleDeclarationParserRuleCall_0_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleregexValidationRuleDeclaration_in_rulevalidationRuleDeclaration3598);
                    this_regexValidationRuleDeclaration_3=ruleregexValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_regexValidationRuleDeclaration_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1843:2: ( (lv_errorMessage_4_0= ruleerrorMessage ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1844:1: (lv_errorMessage_4_0= ruleerrorMessage )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1844:1: (lv_errorMessage_4_0= ruleerrorMessage )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1845:3: lv_errorMessage_4_0= ruleerrorMessage
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageErrorMessageParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleerrorMessage_in_rulevalidationRuleDeclaration3619);
            lv_errorMessage_4_0=ruleerrorMessage();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"errorMessage",
              	        		lv_errorMessage_4_0, 
              	        		"errorMessage", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulevalidationRuleDeclaration


    // $ANTLR start entryRulecomparisonValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1875:1: entryRulecomparisonValidationRuleDeclaration returns [EObject current=null] : iv_rulecomparisonValidationRuleDeclaration= rulecomparisonValidationRuleDeclaration EOF ;
    public final EObject entryRulecomparisonValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecomparisonValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1876:2: (iv_rulecomparisonValidationRuleDeclaration= rulecomparisonValidationRuleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1877:2: iv_rulecomparisonValidationRuleDeclaration= rulecomparisonValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecomparisonValidationRuleDeclaration_in_entryRulecomparisonValidationRuleDeclaration3655);
            iv_rulecomparisonValidationRuleDeclaration=rulecomparisonValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecomparisonValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecomparisonValidationRuleDeclaration3665); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecomparisonValidationRuleDeclaration


    // $ANTLR start rulecomparisonValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1884:1: rulecomparisonValidationRuleDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= rulecomparisonExpression ) ) '}' ) ;
    public final EObject rulecomparisonValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_args_1_0 = null;

        EObject lv_comparisonExp_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1889:6: ( ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= rulecomparisonExpression ) ) '}' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1890:1: ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= rulecomparisonExpression ) ) '}' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1890:1: ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= rulecomparisonExpression ) ) '}' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1890:2: ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= rulecomparisonExpression ) ) '}'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1890:2: ( (lv_name_0_0= 'compare' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1891:1: (lv_name_0_0= 'compare' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1891:1: (lv_name_0_0= 'compare' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1892:3: lv_name_0_0= 'compare'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,41,FOLLOW_41_in_rulecomparisonValidationRuleDeclaration3708); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "compare", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1911:2: ( (lv_args_1_0= rulefunctionArguments ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1912:1: (lv_args_1_0= rulefunctionArguments )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1912:1: (lv_args_1_0= rulefunctionArguments )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1913:3: lv_args_1_0= rulefunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionArguments_in_rulecomparisonValidationRuleDeclaration3742);
            lv_args_1_0=rulefunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"args",
              	        		lv_args_1_0, 
              	        		"functionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_rulecomparisonValidationRuleDeclaration3752); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1939:1: ( (lv_comparisonExp_3_0= rulecomparisonExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1940:1: (lv_comparisonExp_3_0= rulecomparisonExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1940:1: (lv_comparisonExp_3_0= rulecomparisonExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1941:3: lv_comparisonExp_3_0= rulecomparisonExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpComparisonExpressionParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulecomparisonExpression_in_rulecomparisonValidationRuleDeclaration3773);
            lv_comparisonExp_3_0=rulecomparisonExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"comparisonExp",
              	        		lv_comparisonExp_3_0, 
              	        		"comparisonExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,29,FOLLOW_29_in_rulecomparisonValidationRuleDeclaration3783); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecomparisonValidationRuleDeclaration


    // $ANTLR start entryRulecomparisonExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1975:1: entryRulecomparisonExpression returns [EObject current=null] : iv_rulecomparisonExpression= rulecomparisonExpression EOF ;
    public final EObject entryRulecomparisonExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecomparisonExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1976:2: (iv_rulecomparisonExpression= rulecomparisonExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1977:2: iv_rulecomparisonExpression= rulecomparisonExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getComparisonExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecomparisonExpression_in_entryRulecomparisonExpression3819);
            iv_rulecomparisonExpression=rulecomparisonExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecomparisonExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecomparisonExpression3829); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecomparisonExpression


    // $ANTLR start rulecomparisonExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1984:1: rulecomparisonExpression returns [EObject current=null] : ( ( (lv_lhs_0_0= rulecomparisonPart ) ) ( (lv_o_1_0= ruleoperator ) ) ( (lv_rhs_2_0= rulecomparisonPart ) ) ) ;
    public final EObject rulecomparisonExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_lhs_0_0 = null;

        AntlrDatatypeRuleToken lv_o_1_0 = null;

        EObject lv_rhs_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1989:6: ( ( ( (lv_lhs_0_0= rulecomparisonPart ) ) ( (lv_o_1_0= ruleoperator ) ) ( (lv_rhs_2_0= rulecomparisonPart ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1990:1: ( ( (lv_lhs_0_0= rulecomparisonPart ) ) ( (lv_o_1_0= ruleoperator ) ) ( (lv_rhs_2_0= rulecomparisonPart ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1990:1: ( ( (lv_lhs_0_0= rulecomparisonPart ) ) ( (lv_o_1_0= ruleoperator ) ) ( (lv_rhs_2_0= rulecomparisonPart ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1990:2: ( (lv_lhs_0_0= rulecomparisonPart ) ) ( (lv_o_1_0= ruleoperator ) ) ( (lv_rhs_2_0= rulecomparisonPart ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1990:2: ( (lv_lhs_0_0= rulecomparisonPart ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1991:1: (lv_lhs_0_0= rulecomparisonPart )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1991:1: (lv_lhs_0_0= rulecomparisonPart )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1992:3: lv_lhs_0_0= rulecomparisonPart
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getLhsComparisonPartParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulecomparisonPart_in_rulecomparisonExpression3875);
            lv_lhs_0_0=rulecomparisonPart();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"lhs",
              	        		lv_lhs_0_0, 
              	        		"comparisonPart", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2014:2: ( (lv_o_1_0= ruleoperator ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2015:1: (lv_o_1_0= ruleoperator )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2015:1: (lv_o_1_0= ruleoperator )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2016:3: lv_o_1_0= ruleoperator
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getOOperatorParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleoperator_in_rulecomparisonExpression3896);
            lv_o_1_0=ruleoperator();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"o",
              	        		lv_o_1_0, 
              	        		"operator", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2038:2: ( (lv_rhs_2_0= rulecomparisonPart ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2039:1: (lv_rhs_2_0= rulecomparisonPart )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2039:1: (lv_rhs_2_0= rulecomparisonPart )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2040:3: lv_rhs_2_0= rulecomparisonPart
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsComparisonPartParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulecomparisonPart_in_rulecomparisonExpression3917);
            lv_rhs_2_0=rulecomparisonPart();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"rhs",
              	        		lv_rhs_2_0, 
              	        		"comparisonPart", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecomparisonExpression


    // $ANTLR start entryRulecomparisonPart
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2070:1: entryRulecomparisonPart returns [EObject current=null] : iv_rulecomparisonPart= rulecomparisonPart EOF ;
    public final EObject entryRulecomparisonPart() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecomparisonPart = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2071:2: (iv_rulecomparisonPart= rulecomparisonPart EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2072:2: iv_rulecomparisonPart= rulecomparisonPart EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getComparisonPartRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecomparisonPart_in_entryRulecomparisonPart3953);
            iv_rulecomparisonPart=rulecomparisonPart();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecomparisonPart; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecomparisonPart3963); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecomparisonPart


    // $ANTLR start rulecomparisonPart
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2079:1: rulecomparisonPart returns [EObject current=null] : ( ( (lv_t_0_0= ruletype ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruledateFunction ) ) | ( (lv_u_3_0= ruleupperFunction ) ) | ( (lv_l_4_0= rulelowerFunction ) ) | ( (lv_d_5_0= ruledateConstant ) ) ) ;
    public final EObject rulecomparisonPart() throws RecognitionException {
        EObject current = null;

        Token lv_n_1_0=null;
        AntlrDatatypeRuleToken lv_t_0_0 = null;

        AntlrDatatypeRuleToken lv_df_2_0 = null;

        EObject lv_u_3_0 = null;

        EObject lv_l_4_0 = null;

        AntlrDatatypeRuleToken lv_d_5_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2084:6: ( ( ( (lv_t_0_0= ruletype ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruledateFunction ) ) | ( (lv_u_3_0= ruleupperFunction ) ) | ( (lv_l_4_0= rulelowerFunction ) ) | ( (lv_d_5_0= ruledateConstant ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2085:1: ( ( (lv_t_0_0= ruletype ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruledateFunction ) ) | ( (lv_u_3_0= ruleupperFunction ) ) | ( (lv_l_4_0= rulelowerFunction ) ) | ( (lv_d_5_0= ruledateConstant ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2085:1: ( ( (lv_t_0_0= ruletype ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruledateFunction ) ) | ( (lv_u_3_0= ruleupperFunction ) ) | ( (lv_l_4_0= rulelowerFunction ) ) | ( (lv_d_5_0= ruledateConstant ) ) )
            int alt25=6;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 23:
            case 25:
            case 30:
            case 38:
            case 40:
            case 59:
            case 91:
            case 179:
            case 191:
            case 194:
            case 209:
            case 221:
                {
                alt25=1;
                }
                break;
            case 26:
                {
                int LA25_2 = input.LA(2);

                if ( (LA25_2==43) ) {
                    alt25=3;
                }
                else if ( (LA25_2==EOF||LA25_2==13||LA25_2==29||(LA25_2>=35 && LA25_2<=36)||(LA25_2>=46 && LA25_2<=53)) ) {
                    alt25=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("2085:1: ( ( (lv_t_0_0= ruletype ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruledateFunction ) ) | ( (lv_u_3_0= ruleupperFunction ) ) | ( (lv_l_4_0= rulelowerFunction ) ) | ( (lv_d_5_0= ruledateConstant ) ) )", 25, 2, input);

                    throw nvae;
                }
                }
                break;
            case RULE_INT:
                {
                alt25=2;
                }
                break;
            case 42:
                {
                alt25=4;
                }
                break;
            case 45:
                {
                alt25=5;
                }
                break;
            case 54:
            case 55:
                {
                alt25=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2085:1: ( ( (lv_t_0_0= ruletype ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruledateFunction ) ) | ( (lv_u_3_0= ruleupperFunction ) ) | ( (lv_l_4_0= rulelowerFunction ) ) | ( (lv_d_5_0= ruledateConstant ) ) )", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2085:2: ( (lv_t_0_0= ruletype ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2085:2: ( (lv_t_0_0= ruletype ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2086:1: (lv_t_0_0= ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2086:1: (lv_t_0_0= ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2087:3: lv_t_0_0= ruletype
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getTTypeParserRuleCall_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruletype_in_rulecomparisonPart4009);
                    lv_t_0_0=ruletype();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"t",
                      	        		lv_t_0_0, 
                      	        		"type", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2110:6: ( (lv_n_1_0= RULE_INT ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2110:6: ( (lv_n_1_0= RULE_INT ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2111:1: (lv_n_1_0= RULE_INT )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2111:1: (lv_n_1_0= RULE_INT )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2112:3: lv_n_1_0= RULE_INT
                    {
                    lv_n_1_0=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_rulecomparisonPart4032); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getComparisonPartAccess().getNINTTerminalRuleCall_1_0(), "n"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"n",
                      	        		lv_n_1_0, 
                      	        		"INT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2135:6: ( (lv_df_2_0= ruledateFunction ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2135:6: ( (lv_df_2_0= ruledateFunction ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2136:1: (lv_df_2_0= ruledateFunction )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2136:1: (lv_df_2_0= ruledateFunction )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2137:3: lv_df_2_0= ruledateFunction
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getDfDateFunctionParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruledateFunction_in_rulecomparisonPart4064);
                    lv_df_2_0=ruledateFunction();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"df",
                      	        		lv_df_2_0, 
                      	        		"dateFunction", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2160:6: ( (lv_u_3_0= ruleupperFunction ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2160:6: ( (lv_u_3_0= ruleupperFunction ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2161:1: (lv_u_3_0= ruleupperFunction )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2161:1: (lv_u_3_0= ruleupperFunction )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2162:3: lv_u_3_0= ruleupperFunction
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getUUpperFunctionParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleupperFunction_in_rulecomparisonPart4091);
                    lv_u_3_0=ruleupperFunction();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_3_0, 
                      	        		"upperFunction", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2185:6: ( (lv_l_4_0= rulelowerFunction ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2185:6: ( (lv_l_4_0= rulelowerFunction ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2186:1: (lv_l_4_0= rulelowerFunction )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2186:1: (lv_l_4_0= rulelowerFunction )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2187:3: lv_l_4_0= rulelowerFunction
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getLLowerFunctionParserRuleCall_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulelowerFunction_in_rulecomparisonPart4118);
                    lv_l_4_0=rulelowerFunction();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"l",
                      	        		lv_l_4_0, 
                      	        		"lowerFunction", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2210:6: ( (lv_d_5_0= ruledateConstant ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2210:6: ( (lv_d_5_0= ruledateConstant ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2211:1: (lv_d_5_0= ruledateConstant )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2211:1: (lv_d_5_0= ruledateConstant )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2212:3: lv_d_5_0= ruledateConstant
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getDDateConstantParserRuleCall_5_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruledateConstant_in_rulecomparisonPart4145);
                    lv_d_5_0=ruledateConstant();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"d",
                      	        		lv_d_5_0, 
                      	        		"dateConstant", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecomparisonPart


    // $ANTLR start entryRuleupperFunction
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2242:1: entryRuleupperFunction returns [EObject current=null] : iv_ruleupperFunction= ruleupperFunction EOF ;
    public final EObject entryRuleupperFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleupperFunction = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2243:2: (iv_ruleupperFunction= ruleupperFunction EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2244:2: iv_ruleupperFunction= ruleupperFunction EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUpperFunctionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleupperFunction_in_entryRuleupperFunction4181);
            iv_ruleupperFunction=ruleupperFunction();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleupperFunction; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleupperFunction4191); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleupperFunction


    // $ANTLR start ruleupperFunction
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2251:1: ruleupperFunction returns [EObject current=null] : ( 'upper' '(' ( (lv_t_2_0= ruletype ) ) ')' ) ;
    public final EObject ruleupperFunction() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_t_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2256:6: ( ( 'upper' '(' ( (lv_t_2_0= ruletype ) ) ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2257:1: ( 'upper' '(' ( (lv_t_2_0= ruletype ) ) ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2257:1: ( 'upper' '(' ( (lv_t_2_0= ruletype ) ) ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2257:3: 'upper' '(' ( (lv_t_2_0= ruletype ) ) ')'
            {
            match(input,42,FOLLOW_42_in_ruleupperFunction4226); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUpperFunctionAccess().getUpperKeyword_0(), null); 
                  
            }
            match(input,43,FOLLOW_43_in_ruleupperFunction4236); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUpperFunctionAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2265:1: ( (lv_t_2_0= ruletype ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2266:1: (lv_t_2_0= ruletype )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2266:1: (lv_t_2_0= ruletype )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2267:3: lv_t_2_0= ruletype
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getUpperFunctionAccess().getTTypeParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruletype_in_ruleupperFunction4257);
            lv_t_2_0=ruletype();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUpperFunctionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"t",
              	        		lv_t_2_0, 
              	        		"type", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleupperFunction4267); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUpperFunctionAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleupperFunction


    // $ANTLR start entryRulelowerFunction
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2301:1: entryRulelowerFunction returns [EObject current=null] : iv_rulelowerFunction= rulelowerFunction EOF ;
    public final EObject entryRulelowerFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_rulelowerFunction = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2302:2: (iv_rulelowerFunction= rulelowerFunction EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2303:2: iv_rulelowerFunction= rulelowerFunction EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLowerFunctionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulelowerFunction_in_entryRulelowerFunction4303);
            iv_rulelowerFunction=rulelowerFunction();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulelowerFunction; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulelowerFunction4313); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulelowerFunction


    // $ANTLR start rulelowerFunction
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2310:1: rulelowerFunction returns [EObject current=null] : ( 'lower' '(' ( (lv_t_2_0= ruletype ) ) ')' ) ;
    public final EObject rulelowerFunction() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_t_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2315:6: ( ( 'lower' '(' ( (lv_t_2_0= ruletype ) ) ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2316:1: ( 'lower' '(' ( (lv_t_2_0= ruletype ) ) ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2316:1: ( 'lower' '(' ( (lv_t_2_0= ruletype ) ) ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2316:3: 'lower' '(' ( (lv_t_2_0= ruletype ) ) ')'
            {
            match(input,45,FOLLOW_45_in_rulelowerFunction4348); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getLowerFunctionAccess().getLowerKeyword_0(), null); 
                  
            }
            match(input,43,FOLLOW_43_in_rulelowerFunction4358); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getLowerFunctionAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2324:1: ( (lv_t_2_0= ruletype ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2325:1: (lv_t_2_0= ruletype )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2325:1: (lv_t_2_0= ruletype )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2326:3: lv_t_2_0= ruletype
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getLowerFunctionAccess().getTTypeParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruletype_in_rulelowerFunction4379);
            lv_t_2_0=ruletype();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getLowerFunctionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"t",
              	        		lv_t_2_0, 
              	        		"type", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_rulelowerFunction4389); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getLowerFunctionAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulelowerFunction


    // $ANTLR start entryRuleoperator
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2360:1: entryRuleoperator returns [String current=null] : iv_ruleoperator= ruleoperator EOF ;
    public final String entryRuleoperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleoperator = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2361:2: (iv_ruleoperator= ruleoperator EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2362:2: iv_ruleoperator= ruleoperator EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOperatorRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleoperator_in_entryRuleoperator4426);
            iv_ruleoperator=ruleoperator();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleoperator.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleoperator4437); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleoperator


    // $ANTLR start ruleoperator
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2369:1: ruleoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' ) ;
    public final AntlrDatatypeRuleToken ruleoperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2374:6: ( (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2375:1: (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2375:1: (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' )
            int alt26=9;
            switch ( input.LA(1) ) {
            case 13:
                {
                alt26=1;
                }
                break;
            case 46:
                {
                alt26=2;
                }
                break;
            case 47:
                {
                alt26=3;
                }
                break;
            case 48:
                {
                alt26=4;
                }
                break;
            case 49:
                {
                alt26=5;
                }
                break;
            case 50:
                {
                alt26=6;
                }
                break;
            case 51:
                {
                alt26=7;
                }
                break;
            case 52:
                {
                alt26=8;
                }
                break;
            case 53:
                {
                alt26=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2375:1: (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' )", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2376:2: kw= '='
                    {
                    kw=(Token)input.LT(1);
                    match(input,13,FOLLOW_13_in_ruleoperator4475); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2383:2: kw= '<'
                    {
                    kw=(Token)input.LT(1);
                    match(input,46,FOLLOW_46_in_ruleoperator4494); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2390:2: kw= '>'
                    {
                    kw=(Token)input.LT(1);
                    match(input,47,FOLLOW_47_in_ruleoperator4513); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2397:2: kw= '<='
                    {
                    kw=(Token)input.LT(1);
                    match(input,48,FOLLOW_48_in_ruleoperator4532); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2404:2: kw= '>='
                    {
                    kw=(Token)input.LT(1);
                    match(input,49,FOLLOW_49_in_ruleoperator4551); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2411:2: kw= '!='
                    {
                    kw=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_ruleoperator4570); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2418:2: kw= '^='
                    {
                    kw=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_ruleoperator4589); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getCircumflexAccentEqualsSignKeyword_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2425:2: kw= '<>'
                    {
                    kw=(Token)input.LT(1);
                    match(input,52,FOLLOW_52_in_ruleoperator4608); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2432:2: kw= 'like'
                    {
                    kw=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_ruleoperator4627); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLikeKeyword_8(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleoperator


    // $ANTLR start entryRuledateConstant
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2445:1: entryRuledateConstant returns [String current=null] : iv_ruledateConstant= ruledateConstant EOF ;
    public final String entryRuledateConstant() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruledateConstant = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2446:2: (iv_ruledateConstant= ruledateConstant EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2447:2: iv_ruledateConstant= ruledateConstant EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateConstantRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruledateConstant_in_entryRuledateConstant4668);
            iv_ruledateConstant=ruledateConstant();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruledateConstant.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuledateConstant4679); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuledateConstant


    // $ANTLR start ruledateConstant
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2454:1: ruledateConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '$now' | kw= '$today' ) ;
    public final AntlrDatatypeRuleToken ruledateConstant() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2459:6: ( (kw= '$now' | kw= '$today' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2460:1: (kw= '$now' | kw= '$today' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2460:1: (kw= '$now' | kw= '$today' )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==54) ) {
                alt27=1;
            }
            else if ( (LA27_0==55) ) {
                alt27=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2460:1: (kw= '$now' | kw= '$today' )", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2461:2: kw= '$now'
                    {
                    kw=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_ruledateConstant4717); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDateConstantAccess().getNowKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2468:2: kw= '$today'
                    {
                    kw=(Token)input.LT(1);
                    match(input,55,FOLLOW_55_in_ruledateConstant4736); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDateConstantAccess().getTodayKeyword_1(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruledateConstant


    // $ANTLR start entryRuledateFunction
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2481:1: entryRuledateFunction returns [String current=null] : iv_ruledateFunction= ruledateFunction EOF ;
    public final String entryRuledateFunction() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruledateFunction = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2482:2: (iv_ruledateFunction= ruledateFunction EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2483:2: iv_ruledateFunction= ruledateFunction EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateFunctionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruledateFunction_in_entryRuledateFunction4777);
            iv_ruledateFunction=ruledateFunction();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruledateFunction.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuledateFunction4788); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuledateFunction


    // $ANTLR start ruledateFunction
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2490:1: ruledateFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'date' kw= '(' this_dateFunctionArgument_2= ruledateFunctionArgument (kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument )* kw= ')' ) ;
    public final AntlrDatatypeRuleToken ruledateFunction() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_dateFunctionArgument_2 = null;

        AntlrDatatypeRuleToken this_dateFunctionArgument_4 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2495:6: ( (kw= 'date' kw= '(' this_dateFunctionArgument_2= ruledateFunctionArgument (kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument )* kw= ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2496:1: (kw= 'date' kw= '(' this_dateFunctionArgument_2= ruledateFunctionArgument (kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument )* kw= ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2496:1: (kw= 'date' kw= '(' this_dateFunctionArgument_2= ruledateFunctionArgument (kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument )* kw= ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2497:2: kw= 'date' kw= '(' this_dateFunctionArgument_2= ruledateFunctionArgument (kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument )* kw= ')'
            {
            kw=(Token)input.LT(1);
            match(input,26,FOLLOW_26_in_ruledateFunction4826); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getDateFunctionAccess().getDateKeyword_0(), null); 
                  
            }
            kw=(Token)input.LT(1);
            match(input,43,FOLLOW_43_in_ruledateFunction4839); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getDateFunctionAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruledateFunctionArgument_in_ruledateFunction4861);
            this_dateFunctionArgument_2=ruledateFunctionArgument();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_dateFunctionArgument_2);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2519:1: (kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==28) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2520:2: kw= ',' this_dateFunctionArgument_4= ruledateFunctionArgument
            	    {
            	    kw=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_ruledateFunction4880); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              current.merge(kw);
            	              createLeafNode(grammarAccess.getDateFunctionAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode=createCompositeNode(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_3_1(), currentNode); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruledateFunctionArgument_in_ruledateFunction4902);
            	    this_dateFunctionArgument_4=ruledateFunctionArgument();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      		current.merge(this_dateFunctionArgument_4);
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode = currentNode.getParent();
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);

            kw=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_ruledateFunction4922); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getDateFunctionAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruledateFunction


    // $ANTLR start entryRuledateFunctionArgument
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2550:1: entryRuledateFunctionArgument returns [String current=null] : iv_ruledateFunctionArgument= ruledateFunctionArgument EOF ;
    public final String entryRuledateFunctionArgument() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruledateFunctionArgument = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2551:2: (iv_ruledateFunctionArgument= ruledateFunctionArgument EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2552:2: iv_ruledateFunctionArgument= ruledateFunctionArgument EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateFunctionArgumentRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruledateFunctionArgument_in_entryRuledateFunctionArgument4963);
            iv_ruledateFunctionArgument=ruledateFunctionArgument();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruledateFunctionArgument.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuledateFunctionArgument4974); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuledateFunctionArgument


    // $ANTLR start ruledateFunctionArgument
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2559:1: ruledateFunctionArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_dateFunctionArgumentMember_0= ruledateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember )? ) ;
    public final AntlrDatatypeRuleToken ruledateFunctionArgument() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_dateFunctionArgumentMember_0 = null;

        AntlrDatatypeRuleToken this_dateFunctionArgumentMember_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2564:6: ( (this_dateFunctionArgumentMember_0= ruledateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2565:1: (this_dateFunctionArgumentMember_0= ruledateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2565:1: (this_dateFunctionArgumentMember_0= ruledateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2566:5: this_dateFunctionArgumentMember_0= ruledateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember )?
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruledateFunctionArgumentMember_in_ruledateFunctionArgument5021);
            this_dateFunctionArgumentMember_0=ruledateFunctionArgumentMember();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_dateFunctionArgumentMember_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2576:1: ( (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=56 && LA30_0<=57)) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2576:2: (kw= '+' | kw= '-' ) this_dateFunctionArgumentMember_3= ruledateFunctionArgumentMember
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2576:2: (kw= '+' | kw= '-' )
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==56) ) {
                        alt29=1;
                    }
                    else if ( (LA29_0==57) ) {
                        alt29=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("2576:2: (kw= '+' | kw= '-' )", 29, 0, input);

                        throw nvae;
                    }
                    switch (alt29) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2577:2: kw= '+'
                            {
                            kw=(Token)input.LT(1);
                            match(input,56,FOLLOW_56_in_ruledateFunctionArgument5041); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getDateFunctionArgumentAccess().getPlusSignKeyword_1_0_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2584:2: kw= '-'
                            {
                            kw=(Token)input.LT(1);
                            match(input,57,FOLLOW_57_in_ruledateFunctionArgument5060); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getDateFunctionArgumentAccess().getHyphenMinusKeyword_1_0_1(), null); 
                                  
                            }

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_1_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruledateFunctionArgumentMember_in_ruledateFunctionArgument5083);
                    this_dateFunctionArgumentMember_3=ruledateFunctionArgumentMember();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_dateFunctionArgumentMember_3);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruledateFunctionArgument


    // $ANTLR start entryRuledateFunctionArgumentMember
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2608:1: entryRuledateFunctionArgumentMember returns [String current=null] : iv_ruledateFunctionArgumentMember= ruledateFunctionArgumentMember EOF ;
    public final String entryRuledateFunctionArgumentMember() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruledateFunctionArgumentMember = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2609:2: (iv_ruledateFunctionArgumentMember= ruledateFunctionArgumentMember EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2610:2: iv_ruledateFunctionArgumentMember= ruledateFunctionArgumentMember EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateFunctionArgumentMemberRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruledateFunctionArgumentMember_in_entryRuledateFunctionArgumentMember5131);
            iv_ruledateFunctionArgumentMember=ruledateFunctionArgumentMember();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruledateFunctionArgumentMember.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuledateFunctionArgumentMember5142); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuledateFunctionArgumentMember


    // $ANTLR start ruledateFunctionArgumentMember
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2617:1: ruledateFunctionArgumentMember returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT | this_dateConstant_1= ruledateConstant ) ;
    public final AntlrDatatypeRuleToken ruledateFunctionArgumentMember() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        AntlrDatatypeRuleToken this_dateConstant_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2622:6: ( (this_INT_0= RULE_INT | this_dateConstant_1= ruledateConstant ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2623:1: (this_INT_0= RULE_INT | this_dateConstant_1= ruledateConstant )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2623:1: (this_INT_0= RULE_INT | this_dateConstant_1= ruledateConstant )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==RULE_INT) ) {
                alt31=1;
            }
            else if ( ((LA31_0>=54 && LA31_0<=55)) ) {
                alt31=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2623:1: (this_INT_0= RULE_INT | this_dateConstant_1= ruledateConstant )", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2623:6: this_INT_0= RULE_INT
                    {
                    this_INT_0=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruledateFunctionArgumentMember5182); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_INT_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getDateFunctionArgumentMemberAccess().getINTTerminalRuleCall_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2632:5: this_dateConstant_1= ruledateConstant
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentMemberAccess().getDateConstantParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruledateConstant_in_ruledateFunctionArgumentMember5215);
                    this_dateConstant_1=ruledateConstant();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_dateConstant_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruledateFunctionArgumentMember


    // $ANTLR start entryRulerangeValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2650:1: entryRulerangeValidationRuleDeclaration returns [EObject current=null] : iv_rulerangeValidationRuleDeclaration= rulerangeValidationRuleDeclaration EOF ;
    public final EObject entryRulerangeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulerangeValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2651:2: (iv_rulerangeValidationRuleDeclaration= rulerangeValidationRuleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2652:2: iv_rulerangeValidationRuleDeclaration= rulerangeValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulerangeValidationRuleDeclaration_in_entryRulerangeValidationRuleDeclaration5260);
            iv_rulerangeValidationRuleDeclaration=rulerangeValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulerangeValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulerangeValidationRuleDeclaration5270); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulerangeValidationRuleDeclaration


    // $ANTLR start rulerangeValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2659:1: rulerangeValidationRuleDeclaration returns [EObject current=null] : ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_range_3_0= rulerange ) ) '}' ) ;
    public final EObject rulerangeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_1=null;
        Token lv_name_0_2=null;
        EObject lv_args_1_0 = null;

        EObject lv_range_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2664:6: ( ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_range_3_0= rulerange ) ) '}' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2665:1: ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_range_3_0= rulerange ) ) '}' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2665:1: ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_range_3_0= rulerange ) ) '}' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2665:2: ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_range_3_0= rulerange ) ) '}'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2665:2: ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2666:1: ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2666:1: ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2667:1: (lv_name_0_1= 'range' | lv_name_0_2= 'length' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2667:1: (lv_name_0_1= 'range' | lv_name_0_2= 'length' )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==58) ) {
                alt32=1;
            }
            else if ( (LA32_0==59) ) {
                alt32=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2667:1: (lv_name_0_1= 'range' | lv_name_0_2= 'length' )", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2668:3: lv_name_0_1= 'range'
                    {
                    lv_name_0_1=(Token)input.LT(1);
                    match(input,58,FOLLOW_58_in_rulerangeValidationRuleDeclaration5315); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameRangeKeyword_0_0_0(), "name"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "name", lv_name_0_1, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2686:8: lv_name_0_2= 'length'
                    {
                    lv_name_0_2=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_rulerangeValidationRuleDeclaration5344); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameLengthKeyword_0_0_1(), "name"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "name", lv_name_0_2, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;

            }


            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2707:2: ( (lv_args_1_0= rulefunctionArguments ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2708:1: (lv_args_1_0= rulefunctionArguments )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2708:1: (lv_args_1_0= rulefunctionArguments )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2709:3: lv_args_1_0= rulefunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionArguments_in_rulerangeValidationRuleDeclaration5381);
            lv_args_1_0=rulefunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"args",
              	        		lv_args_1_0, 
              	        		"functionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_rulerangeValidationRuleDeclaration5391); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2735:1: ( (lv_range_3_0= rulerange ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2736:1: (lv_range_3_0= rulerange )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2736:1: (lv_range_3_0= rulerange )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2737:3: lv_range_3_0= rulerange
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeRangeParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulerange_in_rulerangeValidationRuleDeclaration5412);
            lv_range_3_0=rulerange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"range",
              	        		lv_range_3_0, 
              	        		"range", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,29,FOLLOW_29_in_rulerangeValidationRuleDeclaration5422); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulerangeValidationRuleDeclaration


    // $ANTLR start entryRuleregexValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2771:1: entryRuleregexValidationRuleDeclaration returns [EObject current=null] : iv_ruleregexValidationRuleDeclaration= ruleregexValidationRuleDeclaration EOF ;
    public final EObject entryRuleregexValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleregexValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2772:2: (iv_ruleregexValidationRuleDeclaration= ruleregexValidationRuleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2773:2: iv_ruleregexValidationRuleDeclaration= ruleregexValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleregexValidationRuleDeclaration_in_entryRuleregexValidationRuleDeclaration5458);
            iv_ruleregexValidationRuleDeclaration=ruleregexValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleregexValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleregexValidationRuleDeclaration5468); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleregexValidationRuleDeclaration


    // $ANTLR start ruleregexValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2780:1: ruleregexValidationRuleDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= 'matches' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_exp_3_0= RULE_STRING ) ) '}' ) ;
    public final EObject ruleregexValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token lv_exp_3_0=null;
        EObject lv_args_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2785:6: ( ( ( (lv_name_0_0= 'matches' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_exp_3_0= RULE_STRING ) ) '}' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2786:1: ( ( (lv_name_0_0= 'matches' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_exp_3_0= RULE_STRING ) ) '}' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2786:1: ( ( (lv_name_0_0= 'matches' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_exp_3_0= RULE_STRING ) ) '}' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2786:2: ( (lv_name_0_0= 'matches' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) '{' ( (lv_exp_3_0= RULE_STRING ) ) '}'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2786:2: ( (lv_name_0_0= 'matches' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2787:1: (lv_name_0_0= 'matches' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2787:1: (lv_name_0_0= 'matches' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2788:3: lv_name_0_0= 'matches'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,60,FOLLOW_60_in_ruleregexValidationRuleDeclaration5511); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "matches", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2807:2: ( (lv_args_1_0= rulefunctionArguments ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2808:1: (lv_args_1_0= rulefunctionArguments )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2808:1: (lv_args_1_0= rulefunctionArguments )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2809:3: lv_args_1_0= rulefunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionArguments_in_ruleregexValidationRuleDeclaration5545);
            lv_args_1_0=rulefunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"args",
              	        		lv_args_1_0, 
              	        		"functionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_ruleregexValidationRuleDeclaration5555); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2835:1: ( (lv_exp_3_0= RULE_STRING ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2836:1: (lv_exp_3_0= RULE_STRING )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2836:1: (lv_exp_3_0= RULE_STRING )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2837:3: lv_exp_3_0= RULE_STRING
            {
            lv_exp_3_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleregexValidationRuleDeclaration5572); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpSTRINGTerminalRuleCall_3_0(), "exp"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"exp",
              	        		lv_exp_3_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,29,FOLLOW_29_in_ruleregexValidationRuleDeclaration5587); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleregexValidationRuleDeclaration


    // $ANTLR start entryRulerange
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2871:1: entryRulerange returns [EObject current=null] : iv_rulerange= rulerange EOF ;
    public final EObject entryRulerange() throws RecognitionException {
        EObject current = null;

        EObject iv_rulerange = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2872:2: (iv_rulerange= rulerange EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2873:2: iv_rulerange= rulerange EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRangeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulerange_in_entryRulerange5623);
            iv_rulerange=rulerange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulerange; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulerange5633); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulerange


    // $ANTLR start rulerange
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2880:1: rulerange returns [EObject current=null] : ( ( (lv_f_0_0= rulerangeBound ) ) '..' ( (lv_t_2_0= rulerangeBound ) ) ) ;
    public final EObject rulerange() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_f_0_0 = null;

        AntlrDatatypeRuleToken lv_t_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2885:6: ( ( ( (lv_f_0_0= rulerangeBound ) ) '..' ( (lv_t_2_0= rulerangeBound ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2886:1: ( ( (lv_f_0_0= rulerangeBound ) ) '..' ( (lv_t_2_0= rulerangeBound ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2886:1: ( ( (lv_f_0_0= rulerangeBound ) ) '..' ( (lv_t_2_0= rulerangeBound ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2886:2: ( (lv_f_0_0= rulerangeBound ) ) '..' ( (lv_t_2_0= rulerangeBound ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2886:2: ( (lv_f_0_0= rulerangeBound ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2887:1: (lv_f_0_0= rulerangeBound )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2887:1: (lv_f_0_0= rulerangeBound )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2888:3: lv_f_0_0= rulerangeBound
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getFRangeBoundParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulerangeBound_in_rulerange5679);
            lv_f_0_0=rulerangeBound();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"f",
              	        		lv_f_0_0, 
              	        		"rangeBound", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,61,FOLLOW_61_in_rulerange5689); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2914:1: ( (lv_t_2_0= rulerangeBound ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2915:1: (lv_t_2_0= rulerangeBound )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2915:1: (lv_t_2_0= rulerangeBound )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2916:3: lv_t_2_0= rulerangeBound
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getTRangeBoundParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulerangeBound_in_rulerange5710);
            lv_t_2_0=rulerangeBound();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"t",
              	        		lv_t_2_0, 
              	        		"rangeBound", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulerange


    // $ANTLR start entryRulerangeBound
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2946:1: entryRulerangeBound returns [String current=null] : iv_rulerangeBound= rulerangeBound EOF ;
    public final String entryRulerangeBound() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulerangeBound = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2947:2: (iv_rulerangeBound= rulerangeBound EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2948:2: iv_rulerangeBound= rulerangeBound EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRangeBoundRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulerangeBound_in_entryRulerangeBound5747);
            iv_rulerangeBound=rulerangeBound();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulerangeBound.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulerangeBound5758); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulerangeBound


    // $ANTLR start rulerangeBound
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2955:1: rulerangeBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT | kw= '?' ) ;
    public final AntlrDatatypeRuleToken rulerangeBound() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2960:6: ( (this_INT_0= RULE_INT | kw= '?' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2961:1: (this_INT_0= RULE_INT | kw= '?' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2961:1: (this_INT_0= RULE_INT | kw= '?' )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==RULE_INT) ) {
                alt33=1;
            }
            else if ( (LA33_0==62) ) {
                alt33=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2961:1: (this_INT_0= RULE_INT | kw= '?' )", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2961:6: this_INT_0= RULE_INT
                    {
                    this_INT_0=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_rulerangeBound5798); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_INT_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getRangeBoundAccess().getINTTerminalRuleCall_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2970:2: kw= '?'
                    {
                    kw=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_rulerangeBound5822); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRangeBoundAccess().getQuestionMarkKeyword_1(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulerangeBound


    // $ANTLR start entryRuleuniquenessValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2983:1: entryRuleuniquenessValidationRuleDeclaration returns [EObject current=null] : iv_ruleuniquenessValidationRuleDeclaration= ruleuniquenessValidationRuleDeclaration EOF ;
    public final EObject entryRuleuniquenessValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleuniquenessValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2984:2: (iv_ruleuniquenessValidationRuleDeclaration= ruleuniquenessValidationRuleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2985:2: iv_ruleuniquenessValidationRuleDeclaration= ruleuniquenessValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUniquenessValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleuniquenessValidationRuleDeclaration_in_entryRuleuniquenessValidationRuleDeclaration5862);
            iv_ruleuniquenessValidationRuleDeclaration=ruleuniquenessValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleuniquenessValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleuniquenessValidationRuleDeclaration5872); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleuniquenessValidationRuleDeclaration


    // $ANTLR start ruleuniquenessValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2992:1: ruleuniquenessValidationRuleDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) ) ;
    public final EObject ruleuniquenessValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_args_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2997:6: ( ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2998:1: ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2998:1: ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= rulefunctionArguments ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2998:2: ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= rulefunctionArguments ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2998:2: ( (lv_name_0_0= 'unique' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2999:1: (lv_name_0_0= 'unique' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2999:1: (lv_name_0_0= 'unique' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3000:3: lv_name_0_0= 'unique'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,14,FOLLOW_14_in_ruleuniquenessValidationRuleDeclaration5915); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUniquenessValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "unique", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3019:2: ( (lv_args_1_0= rulefunctionArguments ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3020:1: (lv_args_1_0= rulefunctionArguments )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3020:1: (lv_args_1_0= rulefunctionArguments )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3021:3: lv_args_1_0= rulefunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionArguments_in_ruleuniquenessValidationRuleDeclaration5949);
            lv_args_1_0=rulefunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUniquenessValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"args",
              	        		lv_args_1_0, 
              	        		"functionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleuniquenessValidationRuleDeclaration


    // $ANTLR start entryRuleerrorMessage
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3051:1: entryRuleerrorMessage returns [EObject current=null] : iv_ruleerrorMessage= ruleerrorMessage EOF ;
    public final EObject entryRuleerrorMessage() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleerrorMessage = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3052:2: (iv_ruleerrorMessage= ruleerrorMessage EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3053:2: iv_ruleerrorMessage= ruleerrorMessage EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getErrorMessageRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleerrorMessage_in_entryRuleerrorMessage5985);
            iv_ruleerrorMessage=ruleerrorMessage();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleerrorMessage; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleerrorMessage5995); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleerrorMessage


    // $ANTLR start ruleerrorMessage
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3060:1: ruleerrorMessage returns [EObject current=null] : ( ':' ( (lv_message_1_0= RULE_STRING ) ) ) ;
    public final EObject ruleerrorMessage() throws RecognitionException {
        EObject current = null;

        Token lv_message_1_0=null;

         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3065:6: ( ( ':' ( (lv_message_1_0= RULE_STRING ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3066:1: ( ':' ( (lv_message_1_0= RULE_STRING ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3066:1: ( ':' ( (lv_message_1_0= RULE_STRING ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3066:3: ':' ( (lv_message_1_0= RULE_STRING ) )
            {
            match(input,63,FOLLOW_63_in_ruleerrorMessage6030); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getErrorMessageAccess().getColonKeyword_0(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3070:1: ( (lv_message_1_0= RULE_STRING ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3071:1: (lv_message_1_0= RULE_STRING )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3071:1: (lv_message_1_0= RULE_STRING )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3072:3: lv_message_1_0= RULE_STRING
            {
            lv_message_1_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleerrorMessage6047); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getErrorMessageAccess().getMessageSTRINGTerminalRuleCall_1_0(), "message"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getErrorMessageRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"message",
              	        		lv_message_1_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleerrorMessage


    // $ANTLR start entryRulenativeValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3102:1: entryRulenativeValidationRuleDeclaration returns [EObject current=null] : iv_rulenativeValidationRuleDeclaration= rulenativeValidationRuleDeclaration EOF ;
    public final EObject entryRulenativeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulenativeValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3103:2: (iv_rulenativeValidationRuleDeclaration= rulenativeValidationRuleDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3104:2: iv_rulenativeValidationRuleDeclaration= rulenativeValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNativeValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulenativeValidationRuleDeclaration_in_entryRulenativeValidationRuleDeclaration6088);
            iv_rulenativeValidationRuleDeclaration=rulenativeValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulenativeValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulenativeValidationRuleDeclaration6098); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulenativeValidationRuleDeclaration


    // $ANTLR start rulenativeValidationRuleDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3111:1: rulenativeValidationRuleDeclaration returns [EObject current=null] : ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) ) ;
    public final EObject rulenativeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_type_2_1=null;
        Token lv_type_2_2=null;
        Token lv_type_2_3=null;
        Token lv_type_2_4=null;
        Token lv_type_2_5=null;
        Token lv_type_2_6=null;
        Token lv_type_2_7=null;
        Token lv_message_4_0=null;

         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3116:6: ( ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3117:1: ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3117:1: ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3117:2: ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3117:2: ( ( RULE_ID ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3118:1: ( RULE_ID )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3118:1: ( RULE_ID )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3119:3: RULE_ID
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            match(input,RULE_ID,FOLLOW_RULE_ID_in_rulenativeValidationRuleDeclaration6145); if (failed) return current;
            if ( backtracking==0 ) {

              		createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationCrossReference_0_0(), "field"); 
              	
            }

            }


            }

            match(input,36,FOLLOW_36_in_rulenativeValidationRuleDeclaration6155); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getFullStopKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3138:1: ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3139:1: ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3139:1: ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3140:1: (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3140:1: (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' )
            int alt34=7;
            switch ( input.LA(1) ) {
            case 14:
                {
                alt34=1;
                }
                break;
            case 64:
                {
                alt34=2;
                }
                break;
            case 65:
                {
                alt34=3;
                }
                break;
            case 66:
                {
                alt34=4;
                }
                break;
            case 67:
                {
                alt34=5;
                }
                break;
            case 68:
                {
                alt34=6;
                }
                break;
            case 69:
                {
                alt34=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("3140:1: (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' )", 34, 0, input);

                throw nvae;
            }

            switch (alt34) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3141:3: lv_type_2_1= 'unique'
                    {
                    lv_type_2_1=(Token)input.LT(1);
                    match(input,14,FOLLOW_14_in_rulenativeValidationRuleDeclaration6175); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeUniqueKeyword_2_0_0(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_1, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3159:8: lv_type_2_2= 'notNull'
                    {
                    lv_type_2_2=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_rulenativeValidationRuleDeclaration6204); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotNullKeyword_2_0_1(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_2, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3177:8: lv_type_2_3= 'NaN'
                    {
                    lv_type_2_3=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_rulenativeValidationRuleDeclaration6233); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNaNKeyword_2_0_2(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_3, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3195:8: lv_type_2_4= 'notEmpty'
                    {
                    lv_type_2_4=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_rulenativeValidationRuleDeclaration6262); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotEmptyKeyword_2_0_3(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_4, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3213:8: lv_type_2_5= 'notInt'
                    {
                    lv_type_2_5=(Token)input.LT(1);
                    match(input,67,FOLLOW_67_in_rulenativeValidationRuleDeclaration6291); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotIntKeyword_2_0_4(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_5, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3231:8: lv_type_2_6= 'notReal'
                    {
                    lv_type_2_6=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_rulenativeValidationRuleDeclaration6320); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotRealKeyword_2_0_5(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_6, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3249:8: lv_type_2_7= 'notBoolean'
                    {
                    lv_type_2_7=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_rulenativeValidationRuleDeclaration6349); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotBooleanKeyword_2_0_6(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_7, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;

            }


            }


            }

            match(input,13,FOLLOW_13_in_rulenativeValidationRuleDeclaration6375); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getEqualsSignKeyword_3(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3274:1: ( (lv_message_4_0= RULE_STRING ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3275:1: (lv_message_4_0= RULE_STRING )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3275:1: (lv_message_4_0= RULE_STRING )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3276:3: lv_message_4_0= RULE_STRING
            {
            lv_message_4_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_rulenativeValidationRuleDeclaration6392); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageSTRINGTerminalRuleCall_4_0(), "message"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"message",
              	        		lv_message_4_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulenativeValidationRuleDeclaration


    // $ANTLR start entryRulefunctionDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3306:1: entryRulefunctionDeclaration returns [EObject current=null] : iv_rulefunctionDeclaration= rulefunctionDeclaration EOF ;
    public final EObject entryRulefunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefunctionDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3307:2: (iv_rulefunctionDeclaration= rulefunctionDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3308:2: iv_rulefunctionDeclaration= rulefunctionDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefunctionDeclaration_in_entryRulefunctionDeclaration6433);
            iv_rulefunctionDeclaration=rulefunctionDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefunctionDeclaration6443); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefunctionDeclaration


    // $ANTLR start rulefunctionDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3315:1: rulefunctionDeclaration returns [EObject current=null] : ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= rulefunctionArgumentDeclaration ) ) ( (lv_body_4_0= rulefunctionBody ) ) ( (lv_m_5_0= ruleerrorMessage ) )? ) ;
    public final EObject rulefunctionDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_b_0_0=null;
        Token lv_name_2_0=null;
        EObject lv_arg_3_0 = null;

        EObject lv_body_4_0 = null;

        EObject lv_m_5_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3320:6: ( ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= rulefunctionArgumentDeclaration ) ) ( (lv_body_4_0= rulefunctionBody ) ) ( (lv_m_5_0= ruleerrorMessage ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:1: ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= rulefunctionArgumentDeclaration ) ) ( (lv_body_4_0= rulefunctionBody ) ) ( (lv_m_5_0= ruleerrorMessage ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:1: ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= rulefunctionArgumentDeclaration ) ) ( (lv_body_4_0= rulefunctionBody ) ) ( (lv_m_5_0= ruleerrorMessage ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:2: ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= rulefunctionArgumentDeclaration ) ) ( (lv_body_4_0= rulefunctionBody ) ) ( (lv_m_5_0= ruleerrorMessage ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:2: ( ( (lv_b_0_0= RULE_ID ) ) '%' )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==RULE_ID) ) {
                int LA35_1 = input.LA(2);

                if ( (LA35_1==70) ) {
                    alt35=1;
                }
            }
            switch (alt35) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:3: ( (lv_b_0_0= RULE_ID ) ) '%'
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:3: ( (lv_b_0_0= RULE_ID ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3322:1: (lv_b_0_0= RULE_ID )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3322:1: (lv_b_0_0= RULE_ID )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3323:3: lv_b_0_0= RULE_ID
                    {
                    lv_b_0_0=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_rulefunctionDeclaration6486); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getFunctionDeclarationAccess().getBIDTerminalRuleCall_0_0_0(), "b"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"b",
                      	        		lv_b_0_0, 
                      	        		"ID", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }


                    }

                    match(input,70,FOLLOW_70_in_rulefunctionDeclaration6501); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionDeclarationAccess().getPercentSignKeyword_0_1(), null); 
                          
                    }

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3349:3: ( (lv_name_2_0= RULE_ID ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3350:1: (lv_name_2_0= RULE_ID )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3350:1: (lv_name_2_0= RULE_ID )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3351:3: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)input.LT(1);
            match(input,RULE_ID,FOLLOW_RULE_ID_in_rulefunctionDeclaration6520); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_2_0, 
              	        		"ID", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3373:2: ( (lv_arg_3_0= rulefunctionArgumentDeclaration ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3374:1: (lv_arg_3_0= rulefunctionArgumentDeclaration )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3374:1: (lv_arg_3_0= rulefunctionArgumentDeclaration )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3375:3: lv_arg_3_0= rulefunctionArgumentDeclaration
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getArgFunctionArgumentDeclarationParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionArgumentDeclaration_in_rulefunctionDeclaration6546);
            lv_arg_3_0=rulefunctionArgumentDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"arg",
              	        		lv_arg_3_0, 
              	        		"functionArgumentDeclaration", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3397:2: ( (lv_body_4_0= rulefunctionBody ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3398:1: (lv_body_4_0= rulefunctionBody )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3398:1: (lv_body_4_0= rulefunctionBody )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3399:3: lv_body_4_0= rulefunctionBody
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyFunctionBodyParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionBody_in_rulefunctionDeclaration6567);
            lv_body_4_0=rulefunctionBody();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"body",
              	        		lv_body_4_0, 
              	        		"functionBody", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3421:2: ( (lv_m_5_0= ruleerrorMessage ) )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==63) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3422:1: (lv_m_5_0= ruleerrorMessage )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3422:1: (lv_m_5_0= ruleerrorMessage )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3423:3: lv_m_5_0= ruleerrorMessage
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getMErrorMessageParserRuleCall_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleerrorMessage_in_rulefunctionDeclaration6588);
                    lv_m_5_0=ruleerrorMessage();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"m",
                      	        		lv_m_5_0, 
                      	        		"errorMessage", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefunctionDeclaration


    // $ANTLR start entryRulefunctionArgumentDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3453:1: entryRulefunctionArgumentDeclaration returns [EObject current=null] : iv_rulefunctionArgumentDeclaration= rulefunctionArgumentDeclaration EOF ;
    public final EObject entryRulefunctionArgumentDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefunctionArgumentDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3454:2: (iv_rulefunctionArgumentDeclaration= rulefunctionArgumentDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3455:2: iv_rulefunctionArgumentDeclaration= rulefunctionArgumentDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionArgumentDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefunctionArgumentDeclaration_in_entryRulefunctionArgumentDeclaration6625);
            iv_rulefunctionArgumentDeclaration=rulefunctionArgumentDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefunctionArgumentDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefunctionArgumentDeclaration6635); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefunctionArgumentDeclaration


    // $ANTLR start rulefunctionArgumentDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3462:1: rulefunctionArgumentDeclaration returns [EObject current=null] : ( () '(' ( (lv_f_2_0= rulefunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= rulefunctionArgumentBody ) ) )* ')' ) ;
    public final EObject rulefunctionArgumentDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_f_2_0 = null;

        EObject lv_f_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3467:6: ( ( () '(' ( (lv_f_2_0= rulefunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= rulefunctionArgumentBody ) ) )* ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3468:1: ( () '(' ( (lv_f_2_0= rulefunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= rulefunctionArgumentBody ) ) )* ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3468:1: ( () '(' ( (lv_f_2_0= rulefunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= rulefunctionArgumentBody ) ) )* ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3468:2: () '(' ( (lv_f_2_0= rulefunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= rulefunctionArgumentBody ) ) )* ')'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3468:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3469:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,43,FOLLOW_43_in_rulefunctionArgumentDeclaration6682); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3486:1: ( (lv_f_2_0= rulefunctionArgumentBody ) )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=19 && LA37_0<=26)||LA37_0==30||LA37_0==34) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3487:1: (lv_f_2_0= rulefunctionArgumentBody )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3487:1: (lv_f_2_0= rulefunctionArgumentBody )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3488:3: lv_f_2_0= rulefunctionArgumentBody
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulefunctionArgumentBody_in_rulefunctionArgumentDeclaration6703);
                    lv_f_2_0=rulefunctionArgumentBody();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionArgumentDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"f",
                      	        		lv_f_2_0, 
                      	        		"functionArgumentBody", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3510:3: ( ',' ( (lv_f_4_0= rulefunctionArgumentBody ) ) )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==28) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3510:5: ',' ( (lv_f_4_0= rulefunctionArgumentBody ) )
            	    {
            	    match(input,28,FOLLOW_28_in_rulefunctionArgumentDeclaration6715); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3514:1: ( (lv_f_4_0= rulefunctionArgumentBody ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3515:1: (lv_f_4_0= rulefunctionArgumentBody )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3515:1: (lv_f_4_0= rulefunctionArgumentBody )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3516:3: lv_f_4_0= rulefunctionArgumentBody
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_3_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulefunctionArgumentBody_in_rulefunctionArgumentDeclaration6736);
            	    lv_f_4_0=rulefunctionArgumentBody();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getFunctionArgumentDeclarationRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"f",
            	      	        		lv_f_4_0, 
            	      	        		"functionArgumentBody", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

            match(input,44,FOLLOW_44_in_rulefunctionArgumentDeclaration6748); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefunctionArgumentDeclaration


    // $ANTLR start entryRulefunctionArgumentBody
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3550:1: entryRulefunctionArgumentBody returns [EObject current=null] : iv_rulefunctionArgumentBody= rulefunctionArgumentBody EOF ;
    public final EObject entryRulefunctionArgumentBody() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefunctionArgumentBody = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3551:2: (iv_rulefunctionArgumentBody= rulefunctionArgumentBody EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3552:2: iv_rulefunctionArgumentBody= rulefunctionArgumentBody EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionArgumentBodyRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefunctionArgumentBody_in_entryRulefunctionArgumentBody6784);
            iv_rulefunctionArgumentBody=rulefunctionArgumentBody();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefunctionArgumentBody; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefunctionArgumentBody6794); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefunctionArgumentBody


    // $ANTLR start rulefunctionArgumentBody
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3559:1: rulefunctionArgumentBody returns [EObject current=null] : ( (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) ) ( ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) ) ) ) ;
    public final EObject rulefunctionArgumentBody() throws RecognitionException {
        EObject current = null;

        Token lv_name_18_1=null;
        EObject this_charType_0 = null;

        EObject this_intEnum_1 = null;

        EObject this_intEnum_3 = null;

        EObject this_charEnum_4 = null;

        EObject this_charEnum_6 = null;

        AntlrDatatypeRuleToken lv_name_18_2 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3564:6: ( ( (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) ) ( ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3565:1: ( (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) ) ( ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3565:1: ( (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) ) ( ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) ) ( ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) )
            int alt39=14;
            switch ( input.LA(1) ) {
            case 30:
                {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==27) ) {
                    alt39=4;
                }
                else if ( (LA39_1==RULE_ID||LA39_1==23||(LA39_1>=25 && LA39_1<=26)||LA39_1==30||LA39_1==32||LA39_1==38||LA39_1==40||LA39_1==59||LA39_1==91||LA39_1==179||LA39_1==191||LA39_1==194||LA39_1==209||LA39_1==221) ) {
                    alt39=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) )", 39, 1, input);

                    throw nvae;
                }
                }
                break;
            case 20:
                {
                int LA39_2 = input.LA(2);

                if ( (LA39_2==27) ) {
                    alt39=2;
                }
                else if ( (LA39_2==RULE_ID||LA39_2==23||(LA39_2>=25 && LA39_2<=26)||LA39_2==30||LA39_2==38||LA39_2==40||LA39_2==59||LA39_2==91||LA39_2==179||LA39_2==191||LA39_2==194||LA39_2==209||LA39_2==221) ) {
                    alt39=6;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) )", 39, 2, input);

                    throw nvae;
                }
                }
                break;
            case 19:
                {
                switch ( input.LA(2) ) {
                case RULE_ID:
                case 23:
                case 25:
                case 26:
                case 38:
                case 40:
                case 59:
                case 91:
                case 179:
                case 191:
                case 194:
                case 209:
                case 221:
                    {
                    alt39=14;
                    }
                    break;
                case 30:
                    {
                    int LA39_16 = input.LA(3);

                    if ( (LA39_16==27) ) {
                        alt39=5;
                    }
                    else if ( (LA39_16==RULE_ID||LA39_16==23||(LA39_16>=25 && LA39_16<=26)||LA39_16==30||(LA39_16>=35 && LA39_16<=36)||LA39_16==38||LA39_16==40||LA39_16==59||LA39_16==91||LA39_16==179||LA39_16==191||LA39_16==194||LA39_16==209||LA39_16==221) ) {
                        alt39=14;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) )", 39, 16, input);

                        throw nvae;
                    }
                    }
                    break;
                case 20:
                    {
                    alt39=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) )", 39, 3, input);

                    throw nvae;
                }

                }
                break;
            case 21:
                {
                alt39=7;
                }
                break;
            case 22:
                {
                alt39=8;
                }
                break;
            case 23:
                {
                alt39=9;
                }
                break;
            case 24:
                {
                alt39=10;
                }
                break;
            case 25:
                {
                alt39=11;
                }
                break;
            case 26:
                {
                alt39=12;
                }
                break;
            case 34:
                {
                alt39=13;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("3565:2: (this_charType_0= rulecharType | this_intEnum_1= ruleintEnum | ( 'set' this_intEnum_3= ruleintEnum ) | this_charEnum_4= rulecharEnum | ( 'set' this_charEnum_6= rulecharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruletype ) | ( 'set' ruletype ) )", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3566:2: this_charType_0= rulecharType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharTypeParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecharType_in_rulefunctionArgumentBody6845);
                    this_charType_0=rulecharType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_charType_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3579:2: this_intEnum_1= ruleintEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleintEnum_in_rulefunctionArgumentBody6875);
                    this_intEnum_1=ruleintEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_intEnum_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3591:6: ( 'set' this_intEnum_3= ruleintEnum )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3591:6: ( 'set' this_intEnum_3= ruleintEnum )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3591:8: 'set' this_intEnum_3= ruleintEnum
                    {
                    match(input,19,FOLLOW_19_in_rulefunctionArgumentBody6891); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_2_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_2_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleintEnum_in_rulefunctionArgumentBody6916);
                    this_intEnum_3=ruleintEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_intEnum_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3609:2: this_charEnum_4= rulecharEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecharEnum_in_rulefunctionArgumentBody6947);
                    this_charEnum_4=rulecharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_charEnum_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3621:6: ( 'set' this_charEnum_6= rulecharEnum )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3621:6: ( 'set' this_charEnum_6= rulecharEnum )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3621:8: 'set' this_charEnum_6= rulecharEnum
                    {
                    match(input,19,FOLLOW_19_in_rulefunctionArgumentBody6963); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_4_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_4_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecharEnum_in_rulefunctionArgumentBody6988);
                    this_charEnum_6=rulecharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_charEnum_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3638:7: 'int'
                    {
                    match(input,20,FOLLOW_20_in_rulefunctionArgumentBody7004); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getIntKeyword_0_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3643:7: 'real'
                    {
                    match(input,21,FOLLOW_21_in_rulefunctionArgumentBody7020); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getRealKeyword_0_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3648:7: 'boolean'
                    {
                    match(input,22,FOLLOW_22_in_rulefunctionArgumentBody7036); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getBooleanKeyword_0_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3653:7: 'text'
                    {
                    match(input,23,FOLLOW_23_in_rulefunctionArgumentBody7052); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getTextKeyword_0_8(), null); 
                          
                    }

                    }
                    break;
                case 10 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3658:7: 'binary'
                    {
                    match(input,24,FOLLOW_24_in_rulefunctionArgumentBody7068); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getBinaryKeyword_0_9(), null); 
                          
                    }

                    }
                    break;
                case 11 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3663:7: 'file'
                    {
                    match(input,25,FOLLOW_25_in_rulefunctionArgumentBody7084); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getFileKeyword_0_10(), null); 
                          
                    }

                    }
                    break;
                case 12 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3668:7: 'date'
                    {
                    match(input,26,FOLLOW_26_in_rulefunctionArgumentBody7100); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getDateKeyword_0_11(), null); 
                          
                    }

                    }
                    break;
                case 13 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3673:6: ( 'ptr' ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3673:6: ( 'ptr' ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3673:8: 'ptr' ruletype
                    {
                    match(input,34,FOLLOW_34_in_rulefunctionArgumentBody7117); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getPtrKeyword_0_12_0(), null); 
                          
                    }
                    pushFollow(FOLLOW_ruletype_in_rulefunctionArgumentBody7126);
                    ruletype();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;
                case 14 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3678:6: ( 'set' ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3678:6: ( 'set' ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3678:8: 'set' ruletype
                    {
                    match(input,19,FOLLOW_19_in_rulefunctionArgumentBody7136); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_13_0(), null); 
                          
                    }
                    pushFollow(FOLLOW_ruletype_in_rulefunctionArgumentBody7145);
                    ruletype();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3682:11: ( ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3683:1: ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3683:1: ( (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3684:1: (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3684:1: (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==RULE_ID) ) {
                alt40=1;
            }
            else if ( (LA40_0==23||(LA40_0>=25 && LA40_0<=26)||LA40_0==30||LA40_0==38||LA40_0==40||LA40_0==59||LA40_0==91||LA40_0==179||LA40_0==191||LA40_0==194||LA40_0==209||LA40_0==221) ) {
                alt40=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("3684:1: (lv_name_18_1= RULE_ID | lv_name_18_2= rulekeyword )", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3685:3: lv_name_18_1= RULE_ID
                    {
                    lv_name_18_1=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_rulefunctionArgumentBody7158); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionArgumentBodyRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"name",
                      	        		lv_name_18_1, 
                      	        		"ID", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3706:8: lv_name_18_2= rulekeyword
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getNameKeywordParserRuleCall_1_0_1(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulekeyword_in_rulefunctionArgumentBody7182);
                    lv_name_18_2=rulekeyword();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionArgumentBodyRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"name",
                      	        		lv_name_18_2, 
                      	        		"keyword", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }
                    break;

            }


            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefunctionArgumentBody


    // $ANTLR start entryRulefunctionCall
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3738:1: entryRulefunctionCall returns [EObject current=null] : iv_rulefunctionCall= rulefunctionCall EOF ;
    public final EObject entryRulefunctionCall() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefunctionCall = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3739:2: (iv_rulefunctionCall= rulefunctionCall EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3740:2: iv_rulefunctionCall= rulefunctionCall EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionCallRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefunctionCall_in_entryRulefunctionCall7221);
            iv_rulefunctionCall=rulefunctionCall();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefunctionCall; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefunctionCall7231); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefunctionCall


    // $ANTLR start rulefunctionCall
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3747:1: rulefunctionCall returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) ( (lv_f_1_0= rulefunctionArguments ) ) ) ;
    public final EObject rulefunctionCall() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_f_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3752:6: ( ( ( (lv_name_0_0= RULE_ID ) ) ( (lv_f_1_0= rulefunctionArguments ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3753:1: ( ( (lv_name_0_0= RULE_ID ) ) ( (lv_f_1_0= rulefunctionArguments ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3753:1: ( ( (lv_name_0_0= RULE_ID ) ) ( (lv_f_1_0= rulefunctionArguments ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3753:2: ( (lv_name_0_0= RULE_ID ) ) ( (lv_f_1_0= rulefunctionArguments ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3753:2: ( (lv_name_0_0= RULE_ID ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3754:1: (lv_name_0_0= RULE_ID )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3754:1: (lv_name_0_0= RULE_ID )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3755:3: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,RULE_ID,FOLLOW_RULE_ID_in_rulefunctionCall7273); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_0_0, 
              	        		"ID", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3777:2: ( (lv_f_1_0= rulefunctionArguments ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3778:1: (lv_f_1_0= rulefunctionArguments )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3778:1: (lv_f_1_0= rulefunctionArguments )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3779:3: lv_f_1_0= rulefunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getFFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefunctionArguments_in_rulefunctionCall7299);
            lv_f_1_0=rulefunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"f",
              	        		lv_f_1_0, 
              	        		"functionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefunctionCall


    // $ANTLR start entryRulefunctionArguments
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3809:1: entryRulefunctionArguments returns [EObject current=null] : iv_rulefunctionArguments= rulefunctionArguments EOF ;
    public final EObject entryRulefunctionArguments() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefunctionArguments = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3810:2: (iv_rulefunctionArguments= rulefunctionArguments EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3811:2: iv_rulefunctionArguments= rulefunctionArguments EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionArgumentsRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefunctionArguments_in_entryRulefunctionArguments7335);
            iv_rulefunctionArguments=rulefunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefunctionArguments; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefunctionArguments7345); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefunctionArguments


    // $ANTLR start rulefunctionArguments
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3818:1: rulefunctionArguments returns [EObject current=null] : ( () '(' ( ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )* )? ')' ) ;
    public final EObject rulefunctionArguments() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_a_2_0 = null;

        AntlrDatatypeRuleToken lv_a_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3823:6: ( ( () '(' ( ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )* )? ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3824:1: ( () '(' ( ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )* )? ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3824:1: ( () '(' ( ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )* )? ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3824:2: () '(' ( ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )* )? ')'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3824:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3825:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,43,FOLLOW_43_in_rulefunctionArguments7392); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentsAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3842:1: ( ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )* )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==RULE_ID||LA42_0==23||(LA42_0>=25 && LA42_0<=26)||LA42_0==30||LA42_0==38||LA42_0==40||LA42_0==59||LA42_0==91||LA42_0==179||LA42_0==191||LA42_0==194||LA42_0==209||LA42_0==221) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3842:2: ( (lv_a_2_0= ruletype ) ) ( ',' ( (lv_a_4_0= ruletype ) ) )*
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3842:2: ( (lv_a_2_0= ruletype ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3843:1: (lv_a_2_0= ruletype )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3843:1: (lv_a_2_0= ruletype )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3844:3: lv_a_2_0= ruletype
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruletype_in_rulefunctionArguments7414);
                    lv_a_2_0=ruletype();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionArgumentsRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"a",
                      	        		lv_a_2_0, 
                      	        		"type", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3866:2: ( ',' ( (lv_a_4_0= ruletype ) ) )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==28) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3866:4: ',' ( (lv_a_4_0= ruletype ) )
                    	    {
                    	    match(input,28,FOLLOW_28_in_rulefunctionArguments7425); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_2_1_0(), null); 
                    	          
                    	    }
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3870:1: ( (lv_a_4_0= ruletype ) )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3871:1: (lv_a_4_0= ruletype )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3871:1: (lv_a_4_0= ruletype )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3872:3: lv_a_4_0= ruletype
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_1_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruletype_in_rulefunctionArguments7446);
                    	    lv_a_4_0=ruletype();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getFunctionArgumentsRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_4_0, 
                    	      	        		"type", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,44,FOLLOW_44_in_rulefunctionArguments7460); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentsAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefunctionArguments


    // $ANTLR start entryRulefunctionBody
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3906:1: entryRulefunctionBody returns [EObject current=null] : iv_rulefunctionBody= rulefunctionBody EOF ;
    public final EObject entryRulefunctionBody() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefunctionBody = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3907:2: (iv_rulefunctionBody= rulefunctionBody EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3908:2: iv_rulefunctionBody= rulefunctionBody EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionBodyRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefunctionBody_in_entryRulefunctionBody7496);
            iv_rulefunctionBody=rulefunctionBody();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefunctionBody; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefunctionBody7506); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefunctionBody


    // $ANTLR start rulefunctionBody
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3915:1: rulefunctionBody returns [EObject current=null] : ( '{' ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) ) '}' ) ;
    public final EObject rulefunctionBody() throws RecognitionException {
        EObject current = null;

        EObject lv_s_1_0 = null;

        EObject lv_e_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3920:6: ( ( '{' ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) ) '}' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3921:1: ( '{' ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) ) '}' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3921:1: ( '{' ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) ) '}' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3921:3: '{' ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) ) '}'
            {
            match(input,27,FOLLOW_27_in_rulefunctionBody7541); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_0(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3925:1: ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) )
            int alt43=2;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3925:2: ( (lv_s_1_0= rulestatement ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3925:2: ( (lv_s_1_0= rulestatement ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3926:1: (lv_s_1_0= rulestatement )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3926:1: (lv_s_1_0= rulestatement )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3927:3: lv_s_1_0= rulestatement
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulestatement_in_rulefunctionBody7563);
                    lv_s_1_0=rulestatement();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionBodyRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_1_0, 
                      	        		"statement", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3950:6: ( (lv_e_2_0= ruleexpression ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3950:6: ( (lv_e_2_0= ruleexpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3951:1: (lv_e_2_0= ruleexpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3951:1: (lv_e_2_0= ruleexpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3952:3: lv_e_2_0= ruleexpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getEExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleexpression_in_rulefunctionBody7590);
                    lv_e_2_0=ruleexpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionBodyRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"e",
                      	        		lv_e_2_0, 
                      	        		"expression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            match(input,29,FOLLOW_29_in_rulefunctionBody7601); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_2(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefunctionBody


    // $ANTLR start entryRulestatement
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3986:1: entryRulestatement returns [EObject current=null] : iv_rulestatement= rulestatement EOF ;
    public final EObject entryRulestatement() throws RecognitionException {
        EObject current = null;

        EObject iv_rulestatement = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3987:2: (iv_rulestatement= rulestatement EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3988:2: iv_rulestatement= rulestatement EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulestatement_in_entryRulestatement7637);
            iv_rulestatement=rulestatement();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulestatement; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulestatement7647); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulestatement


    // $ANTLR start rulestatement
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3995:1: rulestatement returns [EObject current=null] : this_queryRule_0= rulequeryRule ;
    public final EObject rulestatement() throws RecognitionException {
        EObject current = null;

        EObject this_queryRule_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4000:6: (this_queryRule_0= rulequeryRule )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4002:2: this_queryRule_0= rulequeryRule
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getStatementAccess().getQueryRuleParserRuleCall(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulequeryRule_in_rulestatement7696);
            this_queryRule_0=rulequeryRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_queryRule_0; 
                      currentNode = currentNode.getParent();
                  
            }

            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulestatement


    // $ANTLR start entryRuleunionRule
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4021:1: entryRuleunionRule returns [EObject current=null] : iv_ruleunionRule= ruleunionRule EOF ;
    public final EObject entryRuleunionRule() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleunionRule = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4022:2: (iv_ruleunionRule= ruleunionRule EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4023:2: iv_ruleunionRule= ruleunionRule EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUnionRuleRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleunionRule_in_entryRuleunionRule7730);
            iv_ruleunionRule=ruleunionRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleunionRule; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleunionRule7740); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleunionRule


    // $ANTLR start ruleunionRule
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4030:1: ruleunionRule returns [EObject current=null] : ( ( (lv_q_0_0= rulequeryRule ) ) ( 'union' ( (lv_q_2_0= rulequeryRule ) ) )* ) ;
    public final EObject ruleunionRule() throws RecognitionException {
        EObject current = null;

        EObject lv_q_0_0 = null;

        EObject lv_q_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4035:6: ( ( ( (lv_q_0_0= rulequeryRule ) ) ( 'union' ( (lv_q_2_0= rulequeryRule ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4036:1: ( ( (lv_q_0_0= rulequeryRule ) ) ( 'union' ( (lv_q_2_0= rulequeryRule ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4036:1: ( ( (lv_q_0_0= rulequeryRule ) ) ( 'union' ( (lv_q_2_0= rulequeryRule ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4036:2: ( (lv_q_0_0= rulequeryRule ) ) ( 'union' ( (lv_q_2_0= rulequeryRule ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4036:2: ( (lv_q_0_0= rulequeryRule ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4037:1: (lv_q_0_0= rulequeryRule )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4037:1: (lv_q_0_0= rulequeryRule )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4038:3: lv_q_0_0= rulequeryRule
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulequeryRule_in_ruleunionRule7786);
            lv_q_0_0=rulequeryRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUnionRuleRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"q",
              	        		lv_q_0_0, 
              	        		"queryRule", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4060:2: ( 'union' ( (lv_q_2_0= rulequeryRule ) ) )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==71) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4060:4: 'union' ( (lv_q_2_0= rulequeryRule ) )
            	    {
            	    match(input,71,FOLLOW_71_in_ruleunionRule7797); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getUnionRuleAccess().getUnionKeyword_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4064:1: ( (lv_q_2_0= rulequeryRule ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4065:1: (lv_q_2_0= rulequeryRule )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4065:1: (lv_q_2_0= rulequeryRule )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4066:3: lv_q_2_0= rulequeryRule
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulequeryRule_in_ruleunionRule7818);
            	    lv_q_2_0=rulequeryRule();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getUnionRuleRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"q",
            	      	        		lv_q_2_0, 
            	      	        		"queryRule", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleunionRule


    // $ANTLR start entryRulequeryRule
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4096:1: entryRulequeryRule returns [EObject current=null] : iv_rulequeryRule= rulequeryRule EOF ;
    public final EObject entryRulequeryRule() throws RecognitionException {
        EObject current = null;

        EObject iv_rulequeryRule = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4097:2: (iv_rulequeryRule= rulequeryRule EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4098:2: iv_rulequeryRule= rulequeryRule EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getQueryRuleRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulequeryRule_in_entryRulequeryRule7856);
            iv_rulequeryRule=rulequeryRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulequeryRule; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulequeryRule7866); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulequeryRule


    // $ANTLR start rulequeryRule
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4105:1: rulequeryRule returns [EObject current=null] : (this_selectFrom_0= ruleselectFrom ( (lv_where_1_0= rulewhereClause ) )? ( (lv_groupBy_2_0= rulegroupByClause ) )? ( (lv_orderBy_3_0= ruleorderByClause ) )? ) ;
    public final EObject rulequeryRule() throws RecognitionException {
        EObject current = null;

        EObject this_selectFrom_0 = null;

        EObject lv_where_1_0 = null;

        EObject lv_groupBy_2_0 = null;

        EObject lv_orderBy_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4110:6: ( (this_selectFrom_0= ruleselectFrom ( (lv_where_1_0= rulewhereClause ) )? ( (lv_groupBy_2_0= rulegroupByClause ) )? ( (lv_orderBy_3_0= ruleorderByClause ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4111:1: (this_selectFrom_0= ruleselectFrom ( (lv_where_1_0= rulewhereClause ) )? ( (lv_groupBy_2_0= rulegroupByClause ) )? ( (lv_orderBy_3_0= ruleorderByClause ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4111:1: (this_selectFrom_0= ruleselectFrom ( (lv_where_1_0= rulewhereClause ) )? ( (lv_groupBy_2_0= rulegroupByClause ) )? ( (lv_orderBy_3_0= ruleorderByClause ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4112:2: this_selectFrom_0= ruleselectFrom ( (lv_where_1_0= rulewhereClause ) )? ( (lv_groupBy_2_0= rulegroupByClause ) )? ( (lv_orderBy_3_0= ruleorderByClause ) )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getSelectFromParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleselectFrom_in_rulequeryRule7916);
            this_selectFrom_0=ruleselectFrom();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_selectFrom_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4123:1: ( (lv_where_1_0= rulewhereClause ) )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=158 && LA45_0<=160)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4124:1: (lv_where_1_0= rulewhereClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4124:1: (lv_where_1_0= rulewhereClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4125:3: lv_where_1_0= rulewhereClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getWhereWhereClauseParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulewhereClause_in_rulequeryRule7936);
                    lv_where_1_0=rulewhereClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"where",
                      	        		lv_where_1_0, 
                      	        		"whereClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4147:3: ( (lv_groupBy_2_0= rulegroupByClause ) )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0>=134 && LA46_0<=136)) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4148:1: (lv_groupBy_2_0= rulegroupByClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4148:1: (lv_groupBy_2_0= rulegroupByClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4149:3: lv_groupBy_2_0= rulegroupByClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getGroupByGroupByClauseParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulegroupByClause_in_rulequeryRule7958);
                    lv_groupBy_2_0=rulegroupByClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"groupBy",
                      	        		lv_groupBy_2_0, 
                      	        		"groupByClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4171:3: ( (lv_orderBy_3_0= ruleorderByClause ) )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ((LA47_0>=137 && LA47_0<=139)) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4172:1: (lv_orderBy_3_0= ruleorderByClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4172:1: (lv_orderBy_3_0= ruleorderByClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4173:3: lv_orderBy_3_0= ruleorderByClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getOrderByOrderByClauseParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleorderByClause_in_rulequeryRule7980);
                    lv_orderBy_3_0=ruleorderByClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"orderBy",
                      	        		lv_orderBy_3_0, 
                      	        		"orderByClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulequeryRule


    // $ANTLR start entryRuleselectFrom
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4203:1: entryRuleselectFrom returns [EObject current=null] : iv_ruleselectFrom= ruleselectFrom EOF ;
    public final EObject entryRuleselectFrom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleselectFrom = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4204:2: (iv_ruleselectFrom= ruleselectFrom EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4205:2: iv_ruleselectFrom= ruleselectFrom EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectFromRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleselectFrom_in_entryRuleselectFrom8017);
            iv_ruleselectFrom=ruleselectFrom();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleselectFrom; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleselectFrom8027); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleselectFrom


    // $ANTLR start ruleselectFrom
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4212:1: ruleselectFrom returns [EObject current=null] : ( () ( (lv_s_1_0= ruleselectClause ) )? ( (lv_from_2_0= rulefromClause ) )? ) ;
    public final EObject ruleselectFrom() throws RecognitionException {
        EObject current = null;

        EObject lv_s_1_0 = null;

        EObject lv_from_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4217:6: ( ( () ( (lv_s_1_0= ruleselectClause ) )? ( (lv_from_2_0= rulefromClause ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4218:1: ( () ( (lv_s_1_0= ruleselectClause ) )? ( (lv_from_2_0= rulefromClause ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4218:1: ( () ( (lv_s_1_0= ruleselectClause ) )? ( (lv_from_2_0= rulefromClause ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4218:2: () ( (lv_s_1_0= ruleselectClause ) )? ( (lv_from_2_0= rulefromClause ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4218:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4219:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getSelectFromAccess().getSelectFromAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getSelectFromAccess().getSelectFromAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4232:2: ( (lv_s_1_0= ruleselectClause ) )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( ((LA48_0>=80 && LA48_0<=82)) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4233:1: (lv_s_1_0= ruleselectClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4233:1: (lv_s_1_0= ruleselectClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4234:3: lv_s_1_0= ruleselectClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectFromAccess().getSSelectClauseParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleselectClause_in_ruleselectFrom8085);
                    lv_s_1_0=ruleselectClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectFromRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_1_0, 
                      	        		"selectClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4256:3: ( (lv_from_2_0= rulefromClause ) )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( ((LA49_0>=92 && LA49_0<=94)) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4257:1: (lv_from_2_0= rulefromClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4257:1: (lv_from_2_0= rulefromClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4258:3: lv_from_2_0= rulefromClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectFromAccess().getFromFromClauseParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulefromClause_in_ruleselectFrom8107);
                    lv_from_2_0=rulefromClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectFromRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"from",
                      	        		lv_from_2_0, 
                      	        		"fromClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleselectFrom


    // $ANTLR start entryRuleselectClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4288:1: entryRuleselectClause returns [EObject current=null] : iv_ruleselectClause= ruleselectClause EOF ;
    public final EObject entryRuleselectClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleselectClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4289:2: (iv_ruleselectClause= ruleselectClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4290:2: iv_ruleselectClause= ruleselectClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleselectClause_in_entryRuleselectClause8144);
            iv_ruleselectClause=ruleselectClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleselectClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleselectClause8154); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleselectClause


    // $ANTLR start ruleselectClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4297:1: ruleselectClause returns [EObject current=null] : ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject ) ) ;
    public final EObject ruleselectClause() throws RecognitionException {
        EObject current = null;

        EObject lv_s_3_0 = null;

        EObject lv_n_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4302:6: ( ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4303:1: ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4303:1: ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4303:2: () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4303:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4304:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getSelectClauseAccess().getSelectCauseAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getSelectClauseAccess().getSelectCauseAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            pushFollow(FOLLOW_ruleSELECT_in_ruleselectClause8200);
            ruleSELECT();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4317:12: ( ruleDISTINCT )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=83 && LA50_0<=85)) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4317:13: ruleDISTINCT
                    {
                    pushFollow(FOLLOW_ruleDISTINCT_in_ruleselectClause8202);
                    ruleDISTINCT();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4317:27: ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject )
            int alt51=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case RULE_STRING:
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 16:
            case 17:
            case 18:
            case 26:
            case 36:
            case 38:
            case 39:
            case 40:
            case 42:
            case 43:
            case 45:
            case 54:
            case 55:
            case 56:
            case 57:
            case 59:
            case 62:
            case 63:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 125:
            case 126:
            case 127:
            case 167:
            case 168:
            case 177:
            case 178:
            case 179:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
                {
                alt51=1;
                }
                break;
            case 86:
            case 87:
            case 88:
                {
                alt51=2;
                }
                break;
            case 89:
            case 90:
            case 91:
                {
                alt51=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("4317:27: ( ( (lv_s_3_0= ruleselectedPropertiesList ) ) | ( (lv_n_4_0= rulenewExpression ) ) | ruleselectObject )", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4317:28: ( (lv_s_3_0= ruleselectedPropertiesList ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4317:28: ( (lv_s_3_0= ruleselectedPropertiesList ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4318:1: (lv_s_3_0= ruleselectedPropertiesList )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4318:1: (lv_s_3_0= ruleselectedPropertiesList )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4319:3: lv_s_3_0= ruleselectedPropertiesList
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getSSelectedPropertiesListParserRuleCall_3_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleselectedPropertiesList_in_ruleselectClause8218);
                    lv_s_3_0=ruleselectedPropertiesList();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_3_0, 
                      	        		"selectedPropertiesList", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4342:6: ( (lv_n_4_0= rulenewExpression ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4342:6: ( (lv_n_4_0= rulenewExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4343:1: (lv_n_4_0= rulenewExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4343:1: (lv_n_4_0= rulenewExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4344:3: lv_n_4_0= rulenewExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getNNewExpressionParserRuleCall_3_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulenewExpression_in_ruleselectClause8245);
                    lv_n_4_0=rulenewExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"n",
                      	        		lv_n_4_0, 
                      	        		"newExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4367:6: ruleselectObject
                    {
                    pushFollow(FOLLOW_ruleselectObject_in_ruleselectClause8260);
                    ruleselectObject();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleselectClause


    // $ANTLR start entryRulenewExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4375:1: entryRulenewExpression returns [EObject current=null] : iv_rulenewExpression= rulenewExpression EOF ;
    public final EObject entryRulenewExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulenewExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4376:2: (iv_rulenewExpression= rulenewExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4377:2: iv_rulenewExpression= rulenewExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNewExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulenewExpression_in_entryRulenewExpression8289);
            iv_rulenewExpression=rulenewExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulenewExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulenewExpression8299); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulenewExpression


    // $ANTLR start rulenewExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4384:1: rulenewExpression returns [EObject current=null] : ( ruleNEW ( (lv_p_1_0= rulepath ) ) '(' ( (lv_s_3_0= ruleselectedPropertiesList ) ) ')' ) ;
    public final EObject rulenewExpression() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_p_1_0 = null;

        EObject lv_s_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4389:6: ( ( ruleNEW ( (lv_p_1_0= rulepath ) ) '(' ( (lv_s_3_0= ruleselectedPropertiesList ) ) ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4390:1: ( ruleNEW ( (lv_p_1_0= rulepath ) ) '(' ( (lv_s_3_0= ruleselectedPropertiesList ) ) ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4390:1: ( ruleNEW ( (lv_p_1_0= rulepath ) ) '(' ( (lv_s_3_0= ruleselectedPropertiesList ) ) ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4390:2: ruleNEW ( (lv_p_1_0= rulepath ) ) '(' ( (lv_s_3_0= ruleselectedPropertiesList ) ) ')'
            {
            pushFollow(FOLLOW_ruleNEW_in_rulenewExpression8333);
            ruleNEW();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4390:9: ( (lv_p_1_0= rulepath ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4391:1: (lv_p_1_0= rulepath )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4391:1: (lv_p_1_0= rulepath )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4392:3: lv_p_1_0= rulepath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getNewExpressionAccess().getPPathParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulepath_in_rulenewExpression8346);
            lv_p_1_0=rulepath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getNewExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"p",
              	        		lv_p_1_0, 
              	        		"path", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,43,FOLLOW_43_in_rulenewExpression8356); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNewExpressionAccess().getLeftParenthesisKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4418:1: ( (lv_s_3_0= ruleselectedPropertiesList ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4419:1: (lv_s_3_0= ruleselectedPropertiesList )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4419:1: (lv_s_3_0= ruleselectedPropertiesList )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4420:3: lv_s_3_0= ruleselectedPropertiesList
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getNewExpressionAccess().getSSelectedPropertiesListParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleselectedPropertiesList_in_rulenewExpression8377);
            lv_s_3_0=ruleselectedPropertiesList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getNewExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"s",
              	        		lv_s_3_0, 
              	        		"selectedPropertiesList", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_rulenewExpression8387); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNewExpressionAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulenewExpression


    // $ANTLR start entryRuleselectObject
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4454:1: entryRuleselectObject returns [String current=null] : iv_ruleselectObject= ruleselectObject EOF ;
    public final String entryRuleselectObject() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleselectObject = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4455:2: (iv_ruleselectObject= ruleselectObject EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4456:2: iv_ruleselectObject= ruleselectObject EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectObjectRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleselectObject_in_entryRuleselectObject8424);
            iv_ruleselectObject=ruleselectObject();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleselectObject.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleselectObject8435); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleselectObject


    // $ANTLR start ruleselectObject
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4463:1: ruleselectObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_OBJECT_0= ruleOBJECT kw= '(' this_identifier_2= ruleidentifier kw= ')' ) ;
    public final AntlrDatatypeRuleToken ruleselectObject() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_OBJECT_0 = null;

        AntlrDatatypeRuleToken this_identifier_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4468:6: ( (this_OBJECT_0= ruleOBJECT kw= '(' this_identifier_2= ruleidentifier kw= ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4469:1: (this_OBJECT_0= ruleOBJECT kw= '(' this_identifier_2= ruleidentifier kw= ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4469:1: (this_OBJECT_0= ruleOBJECT kw= '(' this_identifier_2= ruleidentifier kw= ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4470:5: this_OBJECT_0= ruleOBJECT kw= '(' this_identifier_2= ruleidentifier kw= ')'
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getSelectObjectAccess().getOBJECTParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleOBJECT_in_ruleselectObject8482);
            this_OBJECT_0=ruleOBJECT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_OBJECT_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            kw=(Token)input.LT(1);
            match(input,43,FOLLOW_43_in_ruleselectObject8500); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getSelectObjectAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getSelectObjectAccess().getIdentifierParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleidentifier_in_ruleselectObject8522);
            this_identifier_2=ruleidentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_identifier_2);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            kw=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_ruleselectObject8540); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getSelectObjectAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleselectObject


    // $ANTLR start entryRulefromClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4511:1: entryRulefromClause returns [EObject current=null] : iv_rulefromClause= rulefromClause EOF ;
    public final EObject entryRulefromClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefromClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4512:2: (iv_rulefromClause= rulefromClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4513:2: iv_rulefromClause= rulefromClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefromClause_in_entryRulefromClause8580);
            iv_rulefromClause=rulefromClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefromClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefromClause8590); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefromClause


    // $ANTLR start rulefromClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4520:1: rulefromClause returns [EObject current=null] : ( ruleFROM ( (lv_fromRange_1_0= rulefromRange ) ) ( ( (lv_fromJoin_2_0= rulefromJoin ) ) | ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) ) )* ) ;
    public final EObject rulefromClause() throws RecognitionException {
        EObject current = null;

        EObject lv_fromRange_1_0 = null;

        EObject lv_fromJoin_2_0 = null;

        EObject lv_fromRange_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4525:6: ( ( ruleFROM ( (lv_fromRange_1_0= rulefromRange ) ) ( ( (lv_fromJoin_2_0= rulefromJoin ) ) | ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4526:1: ( ruleFROM ( (lv_fromRange_1_0= rulefromRange ) ) ( ( (lv_fromJoin_2_0= rulefromJoin ) ) | ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4526:1: ( ruleFROM ( (lv_fromRange_1_0= rulefromRange ) ) ( ( (lv_fromJoin_2_0= rulefromJoin ) ) | ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4526:2: ruleFROM ( (lv_fromRange_1_0= rulefromRange ) ) ( ( (lv_fromJoin_2_0= rulefromJoin ) ) | ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) ) )*
            {
            pushFollow(FOLLOW_ruleFROM_in_rulefromClause8624);
            ruleFROM();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4526:10: ( (lv_fromRange_1_0= rulefromRange ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4527:1: (lv_fromRange_1_0= rulefromRange )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4527:1: (lv_fromRange_1_0= rulefromRange )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4528:3: lv_fromRange_1_0= rulefromRange
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulefromRange_in_rulefromClause8637);
            lv_fromRange_1_0=rulefromRange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"fromRange",
              	        		lv_fromRange_1_0, 
              	        		"fromRange", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4550:2: ( ( (lv_fromJoin_2_0= rulefromJoin ) ) | ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) ) )*
            loop52:
            do {
                int alt52=3;
                int LA52_0 = input.LA(1);

                if ( ((LA52_0>=95 && LA52_0<=100)||(LA52_0>=104 && LA52_0<=112)) ) {
                    alt52=1;
                }
                else if ( (LA52_0==28) ) {
                    alt52=2;
                }


                switch (alt52) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4550:3: ( (lv_fromJoin_2_0= rulefromJoin ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4550:3: ( (lv_fromJoin_2_0= rulefromJoin ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4551:1: (lv_fromJoin_2_0= rulefromJoin )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4551:1: (lv_fromJoin_2_0= rulefromJoin )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4552:3: lv_fromJoin_2_0= rulefromJoin
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromJoinFromJoinParserRuleCall_2_0_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulefromJoin_in_rulefromClause8659);
            	    lv_fromJoin_2_0=rulefromJoin();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"fromJoin",
            	      	        		lv_fromJoin_2_0, 
            	      	        		"fromJoin", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4575:6: ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4575:6: ( ',' ( (lv_fromRange_4_0= rulefromRange ) ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4575:8: ',' ( (lv_fromRange_4_0= rulefromRange ) )
            	    {
            	    match(input,28,FOLLOW_28_in_rulefromClause8676); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getFromClauseAccess().getCommaKeyword_2_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4579:1: ( (lv_fromRange_4_0= rulefromRange ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4580:1: (lv_fromRange_4_0= rulefromRange )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4580:1: (lv_fromRange_4_0= rulefromRange )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4581:3: lv_fromRange_4_0= rulefromRange
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_2_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulefromRange_in_rulefromClause8697);
            	    lv_fromRange_4_0=rulefromRange();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"fromRange",
            	      	        		lv_fromRange_4_0, 
            	      	        		"fromRange", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefromClause


    // $ANTLR start entryRulefromJoin
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4611:1: entryRulefromJoin returns [EObject current=null] : iv_rulefromJoin= rulefromJoin EOF ;
    public final EObject entryRulefromJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefromJoin = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4612:2: (iv_rulefromJoin= rulefromJoin EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4613:2: iv_rulefromJoin= rulefromJoin EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromJoinRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefromJoin_in_entryRulefromJoin8736);
            iv_rulefromJoin=rulefromJoin();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefromJoin; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefromJoin8746); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefromJoin


    // $ANTLR start rulefromJoin
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4620:1: rulefromJoin returns [EObject current=null] : ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_fromClassOrOuterQueryPath_7= rulefromClassOrOuterQueryPath ( (lv_w_8_0= rulewithClause ) )? ) ;
    public final EObject rulefromJoin() throws RecognitionException {
        EObject current = null;

        EObject this_fromClassOrOuterQueryPath_7 = null;

        EObject lv_w_8_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4625:6: ( ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_fromClassOrOuterQueryPath_7= rulefromClassOrOuterQueryPath ( (lv_w_8_0= rulewithClause ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:1: ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_fromClassOrOuterQueryPath_7= rulefromClassOrOuterQueryPath ( (lv_w_8_0= rulewithClause ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:1: ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_fromClassOrOuterQueryPath_7= rulefromClassOrOuterQueryPath ( (lv_w_8_0= rulewithClause ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:2: ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_fromClassOrOuterQueryPath_7= rulefromClassOrOuterQueryPath ( (lv_w_8_0= rulewithClause ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:2: ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )?
            int alt55=4;
            switch ( input.LA(1) ) {
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                    {
                    alt55=1;
                    }
                    break;
                case 104:
                case 105:
                case 106:
                    {
                    alt55=2;
                    }
                    break;
                case 107:
                case 108:
                case 109:
                    {
                    alt55=3;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:3: ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:3: ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:4: ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )?
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:4: ( ruleLEFT | ruleRIGHT )
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( ((LA53_0>=95 && LA53_0<=97)) ) {
                        alt53=1;
                    }
                    else if ( ((LA53_0>=98 && LA53_0<=100)) ) {
                        alt53=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4626:4: ( ruleLEFT | ruleRIGHT )", 53, 0, input);

                        throw nvae;
                    }
                    switch (alt53) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4626:5: ruleLEFT
                            {
                            pushFollow(FOLLOW_ruleLEFT_in_rulefromJoin8783);
                            ruleLEFT();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4627:6: ruleRIGHT
                            {
                            pushFollow(FOLLOW_ruleRIGHT_in_rulefromJoin8790);
                            ruleRIGHT();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4627:16: ( ruleOUTER )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( ((LA54_0>=101 && LA54_0<=103)) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4627:17: ruleOUTER
                            {
                            pushFollow(FOLLOW_ruleOUTER_in_rulefromJoin8793);
                            ruleOUTER();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4628:6: ruleFULL
                    {
                    pushFollow(FOLLOW_ruleFULL_in_rulefromJoin8803);
                    ruleFULL();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4629:6: ruleINNER
                    {
                    pushFollow(FOLLOW_ruleINNER_in_rulefromJoin8810);
                    ruleINNER();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            pushFollow(FOLLOW_ruleJOIN_in_rulefromJoin8813);
            ruleJOIN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4629:25: ( ruleFETCH )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( ((LA56_0>=113 && LA56_0<=115)) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4629:26: ruleFETCH
                    {
                    pushFollow(FOLLOW_ruleFETCH_in_rulefromJoin8815);
                    ruleFETCH();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getFromClassOrOuterQueryPathParserRuleCall_3(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulefromClassOrOuterQueryPath_in_rulefromJoin8834);
            this_fromClassOrOuterQueryPath_7=rulefromClassOrOuterQueryPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_fromClassOrOuterQueryPath_7; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4641:1: ( (lv_w_8_0= rulewithClause ) )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( ((LA57_0>=116 && LA57_0<=118)) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4642:1: (lv_w_8_0= rulewithClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4642:1: (lv_w_8_0= rulewithClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4643:3: lv_w_8_0= rulewithClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getWWithClauseParserRuleCall_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulewithClause_in_rulefromJoin8854);
                    lv_w_8_0=rulewithClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromJoinRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"w",
                      	        		lv_w_8_0, 
                      	        		"withClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefromJoin


    // $ANTLR start entryRulewithClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4673:1: entryRulewithClause returns [EObject current=null] : iv_rulewithClause= rulewithClause EOF ;
    public final EObject entryRulewithClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulewithClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4674:2: (iv_rulewithClause= rulewithClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4675:2: iv_rulewithClause= rulewithClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWithClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulewithClause_in_entryRulewithClause8891);
            iv_rulewithClause=rulewithClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulewithClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulewithClause8901); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulewithClause


    // $ANTLR start rulewithClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4682:1: rulewithClause returns [EObject current=null] : ( ruleWITH ( (lv_e_1_0= ruleexpression ) ) ) ;
    public final EObject rulewithClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4687:6: ( ( ruleWITH ( (lv_e_1_0= ruleexpression ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4688:1: ( ruleWITH ( (lv_e_1_0= ruleexpression ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4688:1: ( ruleWITH ( (lv_e_1_0= ruleexpression ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4688:2: ruleWITH ( (lv_e_1_0= ruleexpression ) )
            {
            pushFollow(FOLLOW_ruleWITH_in_rulewithClause8935);
            ruleWITH();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4688:10: ( (lv_e_1_0= ruleexpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4689:1: (lv_e_1_0= ruleexpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4689:1: (lv_e_1_0= ruleexpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4690:3: lv_e_1_0= ruleexpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleexpression_in_rulewithClause8948);
            lv_e_1_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulewithClause


    // $ANTLR start entryRulefromRange
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4720:1: entryRulefromRange returns [EObject current=null] : iv_rulefromRange= rulefromRange EOF ;
    public final EObject entryRulefromRange() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefromRange = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:2: (iv_rulefromRange= rulefromRange EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4722:2: iv_rulefromRange= rulefromRange EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromRangeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefromRange_in_entryRulefromRange8984);
            iv_rulefromRange=rulefromRange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefromRange; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefromRange8994); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefromRange


    // $ANTLR start rulefromRange
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4729:1: rulefromRange returns [EObject current=null] : (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration ) ;
    public final EObject rulefromRange() throws RecognitionException {
        EObject current = null;

        EObject this_fromClassOrOuterQueryPath_0 = null;

        AntlrDatatypeRuleToken lv_alias_1_0 = null;

        AntlrDatatypeRuleToken lv_p_3_0 = null;

        AntlrDatatypeRuleToken lv_p_6_0 = null;

        AntlrDatatypeRuleToken lv_alias_8_0 = null;

        EObject this_inCollectionElementsDeclaration_9 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4734:6: ( (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )
            int alt58=4;
            switch ( input.LA(1) ) {
            case 75:
                {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==RULE_ID) ) {
                    switch ( input.LA(3) ) {
                    case 119:
                        {
                        int LA58_28 = input.LA(4);

                        if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                            alt58=2;
                        }
                        else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                            alt58=4;
                        }
                        else {
                            if (backtracking>0) {failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 120:
                        {
                        int LA58_29 = input.LA(4);

                        if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                            alt58=4;
                        }
                        else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                            alt58=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 121:
                        {
                        int LA58_30 = input.LA(4);

                        if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                            alt58=4;
                        }
                        else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                            alt58=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                            throw nvae;
                        }
                        }
                        break;
                    case EOF:
                    case RULE_ID:
                    case 26:
                    case 28:
                    case 29:
                    case 36:
                    case 38:
                    case 39:
                    case 40:
                    case 42:
                    case 44:
                    case 45:
                    case 54:
                    case 55:
                    case 59:
                    case 71:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 128:
                    case 129:
                    case 130:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 158:
                    case 159:
                    case 160:
                    case 177:
                    case 178:
                    case 179:
                    case 189:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                        {
                        alt58=1;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_ID:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 2, input);

                    throw nvae;
                }

                }
                break;
            case 76:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 3, input);

                    throw nvae;
                }

                }
                break;
            case 77:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 4, input);

                    throw nvae;
                }

                }
                break;
            case 78:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 5, input);

                    throw nvae;
                }

                }
                break;
            case 42:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 6, input);

                    throw nvae;
                }

                }
                break;
            case 45:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 7, input);

                    throw nvae;
                }

                }
                break;
            case 54:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 8, input);

                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 9, input);

                    throw nvae;
                }

                }
                break;
            case 26:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 10, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 11, input);

                    throw nvae;
                }

                }
                break;
            case 40:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 12, input);

                    throw nvae;
                }

                }
                break;
            case 39:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 13, input);

                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 14, input);

                    throw nvae;
                }

                }
                break;
            case 189:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 15, input);

                    throw nvae;
                }

                }
                break;
            case 190:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 16, input);

                    throw nvae;
                }

                }
                break;
            case 191:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 17, input);

                    throw nvae;
                }

                }
                break;
            case 192:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 18, input);

                    throw nvae;
                }

                }
                break;
            case 193:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 19, input);

                    throw nvae;
                }

                }
                break;
            case 194:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 20, input);

                    throw nvae;
                }

                }
                break;
            case 92:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 21, input);

                    throw nvae;
                }

                }
                break;
            case 93:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 22, input);

                    throw nvae;
                }

                }
                break;
            case 94:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 23, input);

                    throw nvae;
                }

                }
                break;
            case 177:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 24, input);

                    throw nvae;
                }

                }
                break;
            case 178:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 25, input);

                    throw nvae;
                }

                }
                break;
            case 179:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt58=1;
                    }
                    break;
                case 119:
                    {
                    int LA58_28 = input.LA(3);

                    if ( ((LA58_28>=122 && LA58_28<=124)) ) {
                        alt58=2;
                    }
                    else if ( ((LA58_28>=125 && LA58_28<=127)) ) {
                        alt58=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA58_29 = input.LA(3);

                    if ( ((LA58_29>=125 && LA58_29<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_29>=122 && LA58_29<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA58_30 = input.LA(3);

                    if ( ((LA58_30>=125 && LA58_30<=127)) ) {
                        alt58=4;
                    }
                    else if ( ((LA58_30>=122 && LA58_30<=124)) ) {
                        alt58=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 26, input);

                    throw nvae;
                }

                }
                break;
            case 119:
            case 120:
            case 121:
                {
                alt58=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("4735:1: (this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) ) | this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration )", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4736:2: this_fromClassOrOuterQueryPath_0= rulefromClassOrOuterQueryPath
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getFromClassOrOuterQueryPathParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulefromClassOrOuterQueryPath_in_rulefromRange9044);
                    this_fromClassOrOuterQueryPath_0=rulefromClassOrOuterQueryPath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_fromClassOrOuterQueryPath_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4748:6: ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4748:6: ( ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4748:7: ( (lv_alias_1_0= ruleidentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulepath ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4748:7: ( (lv_alias_1_0= ruleidentifier ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4749:1: (lv_alias_1_0= ruleidentifier )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4749:1: (lv_alias_1_0= ruleidentifier )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4750:3: lv_alias_1_0= ruleidentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_1_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleidentifier_in_rulefromRange9071);
                    lv_alias_1_0=ruleidentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"alias",
                      	        		lv_alias_1_0, 
                      	        		"identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    pushFollow(FOLLOW_ruleIN_CLASS_in_rulefromRange9080);
                    ruleIN_CLASS();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4772:14: ( (lv_p_3_0= rulepath ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4773:1: (lv_p_3_0= rulepath )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4773:1: (lv_p_3_0= rulepath )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4774:3: lv_p_3_0= rulepath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_1_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulepath_in_rulefromRange9093);
                    lv_p_3_0=rulepath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"p",
                      	        		lv_p_3_0, 
                      	        		"path", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4797:6: ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4797:6: ( ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4797:7: ruleIN '(' ( (lv_p_6_0= rulepath ) ) ')' ( (lv_alias_8_0= ruleidentifier ) )
                    {
                    pushFollow(FOLLOW_ruleIN_in_rulefromRange9110);
                    ruleIN();
                    _fsp--;
                    if (failed) return current;
                    match(input,43,FOLLOW_43_in_rulefromRange9112); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFromRangeAccess().getLeftParenthesisKeyword_2_1(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4801:1: ( (lv_p_6_0= rulepath ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4802:1: (lv_p_6_0= rulepath )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4802:1: (lv_p_6_0= rulepath )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4803:3: lv_p_6_0= rulepath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_2_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulepath_in_rulefromRange9133);
                    lv_p_6_0=rulepath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"p",
                      	        		lv_p_6_0, 
                      	        		"path", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    match(input,44,FOLLOW_44_in_rulefromRange9143); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFromRangeAccess().getRightParenthesisKeyword_2_3(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4829:1: ( (lv_alias_8_0= ruleidentifier ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4830:1: (lv_alias_8_0= ruleidentifier )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4830:1: (lv_alias_8_0= ruleidentifier )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4831:3: lv_alias_8_0= ruleidentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_2_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleidentifier_in_rulefromRange9164);
                    lv_alias_8_0=ruleidentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"alias",
                      	        		lv_alias_8_0, 
                      	        		"identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4855:2: this_inCollectionElementsDeclaration_9= ruleinCollectionElementsDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getInCollectionElementsDeclarationParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleinCollectionElementsDeclaration_in_rulefromRange9196);
                    this_inCollectionElementsDeclaration_9=ruleinCollectionElementsDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_inCollectionElementsDeclaration_9; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefromRange


    // $ANTLR start entryRulefromClassOrOuterQueryPath
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4874:1: entryRulefromClassOrOuterQueryPath returns [EObject current=null] : iv_rulefromClassOrOuterQueryPath= rulefromClassOrOuterQueryPath EOF ;
    public final EObject entryRulefromClassOrOuterQueryPath() throws RecognitionException {
        EObject current = null;

        EObject iv_rulefromClassOrOuterQueryPath = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4875:2: (iv_rulefromClassOrOuterQueryPath= rulefromClassOrOuterQueryPath EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4876:2: iv_rulefromClassOrOuterQueryPath= rulefromClassOrOuterQueryPath EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulefromClassOrOuterQueryPath_in_entryRulefromClassOrOuterQueryPath9231);
            iv_rulefromClassOrOuterQueryPath=rulefromClassOrOuterQueryPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulefromClassOrOuterQueryPath; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulefromClassOrOuterQueryPath9241); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulefromClassOrOuterQueryPath


    // $ANTLR start rulefromClassOrOuterQueryPath
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4883:1: rulefromClassOrOuterQueryPath returns [EObject current=null] : ( () rulepath ( (lv_asAlias_2_0= ruleasAlias ) )? ( (lv_propertyFetch_3_0= rulepropertyFetch ) )? ) ;
    public final EObject rulefromClassOrOuterQueryPath() throws RecognitionException {
        EObject current = null;

        EObject lv_asAlias_2_0 = null;

        AntlrDatatypeRuleToken lv_propertyFetch_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4888:6: ( ( () rulepath ( (lv_asAlias_2_0= ruleasAlias ) )? ( (lv_propertyFetch_3_0= rulepropertyFetch ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4889:1: ( () rulepath ( (lv_asAlias_2_0= ruleasAlias ) )? ( (lv_propertyFetch_3_0= rulepropertyFetch ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4889:1: ( () rulepath ( (lv_asAlias_2_0= ruleasAlias ) )? ( (lv_propertyFetch_3_0= rulepropertyFetch ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4889:2: () rulepath ( (lv_asAlias_2_0= ruleasAlias ) )? ( (lv_propertyFetch_3_0= rulepropertyFetch ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4889:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4890:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            pushFollow(FOLLOW_rulepath_in_rulefromClassOrOuterQueryPath9287);
            rulepath();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4903:10: ( (lv_asAlias_2_0= ruleasAlias ) )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==RULE_ID||LA59_0==26||(LA59_0>=38 && LA59_0<=40)||LA59_0==42||LA59_0==45||(LA59_0>=54 && LA59_0<=55)||LA59_0==59||(LA59_0>=75 && LA59_0<=78)||(LA59_0>=92 && LA59_0<=94)||(LA59_0>=128 && LA59_0<=130)||(LA59_0>=177 && LA59_0<=179)||(LA59_0>=189 && LA59_0<=194)) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4904:1: (lv_asAlias_2_0= ruleasAlias )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4904:1: (lv_asAlias_2_0= ruleasAlias )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4905:3: lv_asAlias_2_0= ruleasAlias
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getAsAliasAsAliasParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleasAlias_in_rulefromClassOrOuterQueryPath9300);
                    lv_asAlias_2_0=ruleasAlias();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"asAlias",
                      	        		lv_asAlias_2_0, 
                      	        		"asAlias", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4927:3: ( (lv_propertyFetch_3_0= rulepropertyFetch ) )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=113 && LA60_0<=115)) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4928:1: (lv_propertyFetch_3_0= rulepropertyFetch )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4928:1: (lv_propertyFetch_3_0= rulepropertyFetch )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4929:3: lv_propertyFetch_3_0= rulepropertyFetch
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchPropertyFetchParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulepropertyFetch_in_rulefromClassOrOuterQueryPath9322);
                    lv_propertyFetch_3_0=rulepropertyFetch();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"propertyFetch",
                      	        		lv_propertyFetch_3_0, 
                      	        		"propertyFetch", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulefromClassOrOuterQueryPath


    // $ANTLR start entryRuleinCollectionElementsDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4959:1: entryRuleinCollectionElementsDeclaration returns [EObject current=null] : iv_ruleinCollectionElementsDeclaration= ruleinCollectionElementsDeclaration EOF ;
    public final EObject entryRuleinCollectionElementsDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleinCollectionElementsDeclaration = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4960:2: (iv_ruleinCollectionElementsDeclaration= ruleinCollectionElementsDeclaration EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4961:2: iv_ruleinCollectionElementsDeclaration= ruleinCollectionElementsDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getInCollectionElementsDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleinCollectionElementsDeclaration_in_entryRuleinCollectionElementsDeclaration9359);
            iv_ruleinCollectionElementsDeclaration=ruleinCollectionElementsDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleinCollectionElementsDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleinCollectionElementsDeclaration9369); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleinCollectionElementsDeclaration


    // $ANTLR start ruleinCollectionElementsDeclaration
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4968:1: ruleinCollectionElementsDeclaration returns [EObject current=null] : ( ( (lv_alias_0_0= ruleidentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulepath ) ) ')' ) ;
    public final EObject ruleinCollectionElementsDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_alias_0_0 = null;

        AntlrDatatypeRuleToken lv_p_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4973:6: ( ( ( (lv_alias_0_0= ruleidentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulepath ) ) ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4974:1: ( ( (lv_alias_0_0= ruleidentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulepath ) ) ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4974:1: ( ( (lv_alias_0_0= ruleidentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulepath ) ) ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4974:2: ( (lv_alias_0_0= ruleidentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulepath ) ) ')'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4974:2: ( (lv_alias_0_0= ruleidentifier ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4975:1: (lv_alias_0_0= ruleidentifier )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4975:1: (lv_alias_0_0= ruleidentifier )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4976:3: lv_alias_0_0= ruleidentifier
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasIdentifierParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleidentifier_in_ruleinCollectionElementsDeclaration9415);
            lv_alias_0_0=ruleidentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getInCollectionElementsDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"alias",
              	        		lv_alias_0_0, 
              	        		"identifier", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleIN_ELEMENTS_in_ruleinCollectionElementsDeclaration9424);
            ruleIN_ELEMENTS();
            _fsp--;
            if (failed) return current;
            match(input,43,FOLLOW_43_in_ruleinCollectionElementsDeclaration9426); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getInCollectionElementsDeclarationAccess().getLeftParenthesisKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5002:1: ( (lv_p_3_0= rulepath ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5003:1: (lv_p_3_0= rulepath )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5003:1: (lv_p_3_0= rulepath )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5004:3: lv_p_3_0= rulepath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getInCollectionElementsDeclarationAccess().getPPathParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulepath_in_ruleinCollectionElementsDeclaration9447);
            lv_p_3_0=rulepath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getInCollectionElementsDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"p",
              	        		lv_p_3_0, 
              	        		"path", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleinCollectionElementsDeclaration9457); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getInCollectionElementsDeclarationAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleinCollectionElementsDeclaration


    // $ANTLR start entryRuleasAlias
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5038:1: entryRuleasAlias returns [EObject current=null] : iv_ruleasAlias= ruleasAlias EOF ;
    public final EObject entryRuleasAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleasAlias = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5039:2: (iv_ruleasAlias= ruleasAlias EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5040:2: iv_ruleasAlias= ruleasAlias EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAsAliasRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleasAlias_in_entryRuleasAlias9493);
            iv_ruleasAlias=ruleasAlias();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleasAlias; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleasAlias9503); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleasAlias


    // $ANTLR start ruleasAlias
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5047:1: ruleasAlias returns [EObject current=null] : ( ( ruleAS )? ( (lv_alias_1_0= ruleidentifier ) ) ) ;
    public final EObject ruleasAlias() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_alias_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5052:6: ( ( ( ruleAS )? ( (lv_alias_1_0= ruleidentifier ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5053:1: ( ( ruleAS )? ( (lv_alias_1_0= ruleidentifier ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5053:1: ( ( ruleAS )? ( (lv_alias_1_0= ruleidentifier ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5053:2: ( ruleAS )? ( (lv_alias_1_0= ruleidentifier ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5053:2: ( ruleAS )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( ((LA61_0>=128 && LA61_0<=130)) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5053:3: ruleAS
                    {
                    pushFollow(FOLLOW_ruleAS_in_ruleasAlias9538);
                    ruleAS();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5053:11: ( (lv_alias_1_0= ruleidentifier ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5054:1: (lv_alias_1_0= ruleidentifier )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5054:1: (lv_alias_1_0= ruleidentifier )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5055:3: lv_alias_1_0= ruleidentifier
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAsAliasAccess().getAliasIdentifierParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleidentifier_in_ruleasAlias9553);
            lv_alias_1_0=ruleidentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAsAliasRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"alias",
              	        		lv_alias_1_0, 
              	        		"identifier", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleasAlias


    // $ANTLR start entryRulepropertyFetch
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5085:1: entryRulepropertyFetch returns [String current=null] : iv_rulepropertyFetch= rulepropertyFetch EOF ;
    public final String entryRulepropertyFetch() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulepropertyFetch = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5086:2: (iv_rulepropertyFetch= rulepropertyFetch EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5087:2: iv_rulepropertyFetch= rulepropertyFetch EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPropertyFetchRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulepropertyFetch_in_entryRulepropertyFetch9590);
            iv_rulepropertyFetch=rulepropertyFetch();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulepropertyFetch.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulepropertyFetch9601); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulepropertyFetch


    // $ANTLR start rulepropertyFetch
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5094:1: rulepropertyFetch returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES ) ;
    public final AntlrDatatypeRuleToken rulepropertyFetch() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_FETCH_0 = null;

        AntlrDatatypeRuleToken this_ALL_1 = null;

        AntlrDatatypeRuleToken this_PROPERTIES_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5099:6: ( (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5100:1: (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5100:1: (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5101:5: this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getFETCHParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleFETCH_in_rulepropertyFetch9648);
            this_FETCH_0=ruleFETCH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_FETCH_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getALLParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleALL_in_rulepropertyFetch9675);
            this_ALL_1=ruleALL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_ALL_1);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getPROPERTIESParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulePROPERTIES_in_rulepropertyFetch9702);
            this_PROPERTIES_2=rulePROPERTIES();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_PROPERTIES_2);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulepropertyFetch


    // $ANTLR start entryRulegroupByClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5141:1: entryRulegroupByClause returns [EObject current=null] : iv_rulegroupByClause= rulegroupByClause EOF ;
    public final EObject entryRulegroupByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulegroupByClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5142:2: (iv_rulegroupByClause= rulegroupByClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5143:2: iv_rulegroupByClause= rulegroupByClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getGroupByClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulegroupByClause_in_entryRulegroupByClause9747);
            iv_rulegroupByClause=rulegroupByClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulegroupByClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulegroupByClause9757); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulegroupByClause


    // $ANTLR start rulegroupByClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5150:1: rulegroupByClause returns [EObject current=null] : ( ruleGROUP_BY ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ( (lv_h_4_0= rulehavingClause ) )? ) ;
    public final EObject rulegroupByClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;

        EObject lv_e_3_0 = null;

        EObject lv_h_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5155:6: ( ( ruleGROUP_BY ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ( (lv_h_4_0= rulehavingClause ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5156:1: ( ruleGROUP_BY ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ( (lv_h_4_0= rulehavingClause ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5156:1: ( ruleGROUP_BY ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ( (lv_h_4_0= rulehavingClause ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5156:2: ruleGROUP_BY ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ( (lv_h_4_0= rulehavingClause ) )?
            {
            pushFollow(FOLLOW_ruleGROUP_BY_in_rulegroupByClause9791);
            ruleGROUP_BY();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5156:14: ( (lv_e_1_0= ruleexpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5157:1: (lv_e_1_0= ruleexpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5157:1: (lv_e_1_0= ruleexpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5158:3: lv_e_1_0= ruleexpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleexpression_in_rulegroupByClause9804);
            lv_e_1_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5180:2: ( ',' ( (lv_e_3_0= ruleexpression ) ) )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==28) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5180:4: ',' ( (lv_e_3_0= ruleexpression ) )
            	    {
            	    match(input,28,FOLLOW_28_in_rulegroupByClause9815); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getGroupByClauseAccess().getCommaKeyword_2_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5184:1: ( (lv_e_3_0= ruleexpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5185:1: (lv_e_3_0= ruleexpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5185:1: (lv_e_3_0= ruleexpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5186:3: lv_e_3_0= ruleexpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleexpression_in_rulegroupByClause9836);
            	    lv_e_3_0=ruleexpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"e",
            	      	        		lv_e_3_0, 
            	      	        		"expression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5208:4: ( (lv_h_4_0= rulehavingClause ) )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=155 && LA63_0<=157)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5209:1: (lv_h_4_0= rulehavingClause )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5209:1: (lv_h_4_0= rulehavingClause )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5210:3: lv_h_4_0= rulehavingClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getHHavingClauseParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulehavingClause_in_rulegroupByClause9859);
                    lv_h_4_0=rulehavingClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"h",
                      	        		lv_h_4_0, 
                      	        		"havingClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulegroupByClause


    // $ANTLR start entryRuleorderByClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5240:1: entryRuleorderByClause returns [EObject current=null] : iv_ruleorderByClause= ruleorderByClause EOF ;
    public final EObject entryRuleorderByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleorderByClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5241:2: (iv_ruleorderByClause= ruleorderByClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5242:2: iv_ruleorderByClause= ruleorderByClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOrderByClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleorderByClause_in_entryRuleorderByClause9896);
            iv_ruleorderByClause=ruleorderByClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleorderByClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleorderByClause9906); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleorderByClause


    // $ANTLR start ruleorderByClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5249:1: ruleorderByClause returns [EObject current=null] : ( ruleORDER_BY ( (lv_o_1_0= ruleorderElement ) ) ( ',' ( (lv_o_3_0= ruleorderElement ) ) )* ) ;
    public final EObject ruleorderByClause() throws RecognitionException {
        EObject current = null;

        EObject lv_o_1_0 = null;

        EObject lv_o_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5254:6: ( ( ruleORDER_BY ( (lv_o_1_0= ruleorderElement ) ) ( ',' ( (lv_o_3_0= ruleorderElement ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5255:1: ( ruleORDER_BY ( (lv_o_1_0= ruleorderElement ) ) ( ',' ( (lv_o_3_0= ruleorderElement ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5255:1: ( ruleORDER_BY ( (lv_o_1_0= ruleorderElement ) ) ( ',' ( (lv_o_3_0= ruleorderElement ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5255:2: ruleORDER_BY ( (lv_o_1_0= ruleorderElement ) ) ( ',' ( (lv_o_3_0= ruleorderElement ) ) )*
            {
            pushFollow(FOLLOW_ruleORDER_BY_in_ruleorderByClause9940);
            ruleORDER_BY();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5255:14: ( (lv_o_1_0= ruleorderElement ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5256:1: (lv_o_1_0= ruleorderElement )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5256:1: (lv_o_1_0= ruleorderElement )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5257:3: lv_o_1_0= ruleorderElement
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleorderElement_in_ruleorderByClause9953);
            lv_o_1_0=ruleorderElement();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getOrderByClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"o",
              	        		lv_o_1_0, 
              	        		"orderElement", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5279:2: ( ',' ( (lv_o_3_0= ruleorderElement ) ) )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==28) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5279:4: ',' ( (lv_o_3_0= ruleorderElement ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleorderByClause9964); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getOrderByClauseAccess().getCommaKeyword_2_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5283:1: ( (lv_o_3_0= ruleorderElement ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5284:1: (lv_o_3_0= ruleorderElement )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5284:1: (lv_o_3_0= ruleorderElement )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5285:3: lv_o_3_0= ruleorderElement
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleorderElement_in_ruleorderByClause9985);
            	    lv_o_3_0=ruleorderElement();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getOrderByClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"o",
            	      	        		lv_o_3_0, 
            	      	        		"orderElement", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleorderByClause


    // $ANTLR start entryRuleorderElement
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5315:1: entryRuleorderElement returns [EObject current=null] : iv_ruleorderElement= ruleorderElement EOF ;
    public final EObject entryRuleorderElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleorderElement = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5316:2: (iv_ruleorderElement= ruleorderElement EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5317:2: iv_ruleorderElement= ruleorderElement EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOrderElementRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleorderElement_in_entryRuleorderElement10023);
            iv_ruleorderElement=ruleorderElement();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleorderElement; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleorderElement10033); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleorderElement


    // $ANTLR start ruleorderElement
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5324:1: ruleorderElement returns [EObject current=null] : (this_expression_0= ruleexpression ( ruleascendingOrDescending )? ) ;
    public final EObject ruleorderElement() throws RecognitionException {
        EObject current = null;

        EObject this_expression_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5329:6: ( (this_expression_0= ruleexpression ( ruleascendingOrDescending )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5330:1: (this_expression_0= ruleexpression ( ruleascendingOrDescending )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5330:1: (this_expression_0= ruleexpression ( ruleascendingOrDescending )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5331:2: this_expression_0= ruleexpression ( ruleascendingOrDescending )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getOrderElementAccess().getExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleexpression_in_ruleorderElement10083);
            this_expression_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_expression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5342:1: ( ruleascendingOrDescending )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=143 && LA65_0<=154)) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5342:2: ruleascendingOrDescending
                    {
                    pushFollow(FOLLOW_ruleascendingOrDescending_in_ruleorderElement10092);
                    ruleascendingOrDescending();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleorderElement


    // $ANTLR start entryRuleascendingOrDescending
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5350:1: entryRuleascendingOrDescending returns [String current=null] : iv_ruleascendingOrDescending= ruleascendingOrDescending EOF ;
    public final String entryRuleascendingOrDescending() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleascendingOrDescending = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5351:2: (iv_ruleascendingOrDescending= ruleascendingOrDescending EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5352:2: iv_ruleascendingOrDescending= ruleascendingOrDescending EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAscendingOrDescendingRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleascendingOrDescending_in_entryRuleascendingOrDescending10123);
            iv_ruleascendingOrDescending=ruleascendingOrDescending();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleascendingOrDescending.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleascendingOrDescending10134); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleascendingOrDescending


    // $ANTLR start ruleascendingOrDescending
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5359:1: ruleascendingOrDescending returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ASC_0= ruleASC | this_DESC_1= ruleDESC ) ;
    public final AntlrDatatypeRuleToken ruleascendingOrDescending() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_ASC_0 = null;

        AntlrDatatypeRuleToken this_DESC_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5364:6: ( (this_ASC_0= ruleASC | this_DESC_1= ruleDESC ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5365:1: (this_ASC_0= ruleASC | this_DESC_1= ruleDESC )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5365:1: (this_ASC_0= ruleASC | this_DESC_1= ruleDESC )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( ((LA66_0>=143 && LA66_0<=148)) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=149 && LA66_0<=154)) ) {
                alt66=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("5365:1: (this_ASC_0= ruleASC | this_DESC_1= ruleDESC )", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5366:5: this_ASC_0= ruleASC
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getAscendingOrDescendingAccess().getASCParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleASC_in_ruleascendingOrDescending10181);
                    this_ASC_0=ruleASC();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ASC_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5378:5: this_DESC_1= ruleDESC
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getAscendingOrDescendingAccess().getDESCParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleDESC_in_ruleascendingOrDescending10214);
                    this_DESC_1=ruleDESC();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_DESC_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleascendingOrDescending


    // $ANTLR start entryRulehavingClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5396:1: entryRulehavingClause returns [EObject current=null] : iv_rulehavingClause= rulehavingClause EOF ;
    public final EObject entryRulehavingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulehavingClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5397:2: (iv_rulehavingClause= rulehavingClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5398:2: iv_rulehavingClause= rulehavingClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getHavingClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulehavingClause_in_entryRulehavingClause10259);
            iv_rulehavingClause=rulehavingClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulehavingClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulehavingClause10269); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulehavingClause


    // $ANTLR start rulehavingClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5405:1: rulehavingClause returns [EObject current=null] : ( ruleHAVING ( (lv_e_1_0= ruleexpression ) ) ) ;
    public final EObject rulehavingClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5410:6: ( ( ruleHAVING ( (lv_e_1_0= ruleexpression ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5411:1: ( ruleHAVING ( (lv_e_1_0= ruleexpression ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5411:1: ( ruleHAVING ( (lv_e_1_0= ruleexpression ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5411:2: ruleHAVING ( (lv_e_1_0= ruleexpression ) )
            {
            pushFollow(FOLLOW_ruleHAVING_in_rulehavingClause10303);
            ruleHAVING();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5411:12: ( (lv_e_1_0= ruleexpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5412:1: (lv_e_1_0= ruleexpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5412:1: (lv_e_1_0= ruleexpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5413:3: lv_e_1_0= ruleexpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getHavingClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleexpression_in_rulehavingClause10316);
            lv_e_1_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getHavingClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulehavingClause


    // $ANTLR start entryRulewhereClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5443:1: entryRulewhereClause returns [EObject current=null] : iv_rulewhereClause= rulewhereClause EOF ;
    public final EObject entryRulewhereClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulewhereClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5444:2: (iv_rulewhereClause= rulewhereClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5445:2: iv_rulewhereClause= rulewhereClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWhereClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulewhereClause_in_entryRulewhereClause10352);
            iv_rulewhereClause=rulewhereClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulewhereClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulewhereClause10362); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulewhereClause


    // $ANTLR start rulewhereClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5452:1: rulewhereClause returns [EObject current=null] : ( ruleWHERE ( (lv_e_1_0= ruleexpression ) ) ) ;
    public final EObject rulewhereClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5457:6: ( ( ruleWHERE ( (lv_e_1_0= ruleexpression ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5458:1: ( ruleWHERE ( (lv_e_1_0= ruleexpression ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5458:1: ( ruleWHERE ( (lv_e_1_0= ruleexpression ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5458:2: ruleWHERE ( (lv_e_1_0= ruleexpression ) )
            {
            pushFollow(FOLLOW_ruleWHERE_in_rulewhereClause10396);
            ruleWHERE();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5458:11: ( (lv_e_1_0= ruleexpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5459:1: (lv_e_1_0= ruleexpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5459:1: (lv_e_1_0= ruleexpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5460:3: lv_e_1_0= ruleexpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWhereClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleexpression_in_rulewhereClause10409);
            lv_e_1_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWhereClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulewhereClause


    // $ANTLR start entryRuleselectedPropertiesList
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5490:1: entryRuleselectedPropertiesList returns [EObject current=null] : iv_ruleselectedPropertiesList= ruleselectedPropertiesList EOF ;
    public final EObject entryRuleselectedPropertiesList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleselectedPropertiesList = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5491:2: (iv_ruleselectedPropertiesList= ruleselectedPropertiesList EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5492:2: iv_ruleselectedPropertiesList= ruleselectedPropertiesList EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectedPropertiesListRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleselectedPropertiesList_in_entryRuleselectedPropertiesList10445);
            iv_ruleselectedPropertiesList=ruleselectedPropertiesList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleselectedPropertiesList; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleselectedPropertiesList10455); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleselectedPropertiesList


    // $ANTLR start ruleselectedPropertiesList
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5499:1: ruleselectedPropertiesList returns [EObject current=null] : ( ( (lv_a_0_0= rulealiasedExpression ) ) ( ',' ( (lv_a_2_0= rulealiasedExpression ) ) )* ) ;
    public final EObject ruleselectedPropertiesList() throws RecognitionException {
        EObject current = null;

        EObject lv_a_0_0 = null;

        EObject lv_a_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5504:6: ( ( ( (lv_a_0_0= rulealiasedExpression ) ) ( ',' ( (lv_a_2_0= rulealiasedExpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5505:1: ( ( (lv_a_0_0= rulealiasedExpression ) ) ( ',' ( (lv_a_2_0= rulealiasedExpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5505:1: ( ( (lv_a_0_0= rulealiasedExpression ) ) ( ',' ( (lv_a_2_0= rulealiasedExpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5505:2: ( (lv_a_0_0= rulealiasedExpression ) ) ( ',' ( (lv_a_2_0= rulealiasedExpression ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5505:2: ( (lv_a_0_0= rulealiasedExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5506:1: (lv_a_0_0= rulealiasedExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5506:1: (lv_a_0_0= rulealiasedExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5507:3: lv_a_0_0= rulealiasedExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulealiasedExpression_in_ruleselectedPropertiesList10501);
            lv_a_0_0=rulealiasedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getSelectedPropertiesListRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"a",
              	        		lv_a_0_0, 
              	        		"aliasedExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5529:2: ( ',' ( (lv_a_2_0= rulealiasedExpression ) ) )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==28) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5529:4: ',' ( (lv_a_2_0= rulealiasedExpression ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleselectedPropertiesList10512); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getSelectedPropertiesListAccess().getCommaKeyword_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5533:1: ( (lv_a_2_0= rulealiasedExpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5534:1: (lv_a_2_0= rulealiasedExpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5534:1: (lv_a_2_0= rulealiasedExpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5535:3: lv_a_2_0= rulealiasedExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulealiasedExpression_in_ruleselectedPropertiesList10533);
            	    lv_a_2_0=rulealiasedExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getSelectedPropertiesListRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"a",
            	      	        		lv_a_2_0, 
            	      	        		"aliasedExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleselectedPropertiesList


    // $ANTLR start entryRulealiasedExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5565:1: entryRulealiasedExpression returns [EObject current=null] : iv_rulealiasedExpression= rulealiasedExpression EOF ;
    public final EObject entryRulealiasedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulealiasedExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5566:2: (iv_rulealiasedExpression= rulealiasedExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5567:2: iv_rulealiasedExpression= rulealiasedExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAliasedExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulealiasedExpression_in_entryRulealiasedExpression10571);
            iv_rulealiasedExpression=rulealiasedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulealiasedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulealiasedExpression10581); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulealiasedExpression


    // $ANTLR start rulealiasedExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5574:1: rulealiasedExpression returns [EObject current=null] : (this_expression_0= ruleexpression ( ruleAS ( (lv_id_2_0= ruleidentifier ) ) )? ) ;
    public final EObject rulealiasedExpression() throws RecognitionException {
        EObject current = null;

        EObject this_expression_0 = null;

        AntlrDatatypeRuleToken lv_id_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5579:6: ( (this_expression_0= ruleexpression ( ruleAS ( (lv_id_2_0= ruleidentifier ) ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5580:1: (this_expression_0= ruleexpression ( ruleAS ( (lv_id_2_0= ruleidentifier ) ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5580:1: (this_expression_0= ruleexpression ( ruleAS ( (lv_id_2_0= ruleidentifier ) ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5581:2: this_expression_0= ruleexpression ( ruleAS ( (lv_id_2_0= ruleidentifier ) ) )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getAliasedExpressionAccess().getExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleexpression_in_rulealiasedExpression10631);
            this_expression_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_expression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5592:1: ( ruleAS ( (lv_id_2_0= ruleidentifier ) ) )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=128 && LA68_0<=130)) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5592:2: ruleAS ( (lv_id_2_0= ruleidentifier ) )
                    {
                    pushFollow(FOLLOW_ruleAS_in_rulealiasedExpression10640);
                    ruleAS();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5592:8: ( (lv_id_2_0= ruleidentifier ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5593:1: (lv_id_2_0= ruleidentifier )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5593:1: (lv_id_2_0= ruleidentifier )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5594:3: lv_id_2_0= ruleidentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getAliasedExpressionAccess().getIdIdentifierParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleidentifier_in_rulealiasedExpression10653);
                    lv_id_2_0=ruleidentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getAliasedExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"id",
                      	        		lv_id_2_0, 
                      	        		"identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulealiasedExpression


    // $ANTLR start entryRuleexpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5624:1: entryRuleexpression returns [EObject current=null] : iv_ruleexpression= ruleexpression EOF ;
    public final EObject entryRuleexpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleexpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5625:2: (iv_ruleexpression= ruleexpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5626:2: iv_ruleexpression= ruleexpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleexpression_in_entryRuleexpression10691);
            iv_ruleexpression=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleexpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleexpression10701); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleexpression


    // $ANTLR start ruleexpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5633:1: ruleexpression returns [EObject current=null] : this_logicalOrExpression_0= rulelogicalOrExpression ;
    public final EObject ruleexpression() throws RecognitionException {
        EObject current = null;

        EObject this_logicalOrExpression_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5638:6: (this_logicalOrExpression_0= rulelogicalOrExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5640:2: this_logicalOrExpression_0= rulelogicalOrExpression
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulelogicalOrExpression_in_ruleexpression10750);
            this_logicalOrExpression_0=rulelogicalOrExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_logicalOrExpression_0; 
                      currentNode = currentNode.getParent();
                  
            }

            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleexpression


    // $ANTLR start entryRulelogicalOrExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5659:1: entryRulelogicalOrExpression returns [EObject current=null] : iv_rulelogicalOrExpression= rulelogicalOrExpression EOF ;
    public final EObject entryRulelogicalOrExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulelogicalOrExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5660:2: (iv_rulelogicalOrExpression= rulelogicalOrExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5661:2: iv_rulelogicalOrExpression= rulelogicalOrExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLogicalOrExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulelogicalOrExpression_in_entryRulelogicalOrExpression10784);
            iv_rulelogicalOrExpression=rulelogicalOrExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulelogicalOrExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulelogicalOrExpression10794); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulelogicalOrExpression


    // $ANTLR start rulelogicalOrExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5668:1: rulelogicalOrExpression returns [EObject current=null] : ( ( (lv_l_0_0= rulelogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) ) )* ) ;
    public final EObject rulelogicalOrExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_l_0_0 = null;

        EObject lv_l_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5673:6: ( ( ( (lv_l_0_0= rulelogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5674:1: ( ( (lv_l_0_0= rulelogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5674:1: ( ( (lv_l_0_0= rulelogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5674:2: ( (lv_l_0_0= rulelogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5674:2: ( (lv_l_0_0= rulelogicalAndExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5675:1: (lv_l_0_0= rulelogicalAndExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5675:1: (lv_l_0_0= rulelogicalAndExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5676:3: lv_l_0_0= rulelogicalAndExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulelogicalAndExpression_in_rulelogicalOrExpression10840);
            lv_l_0_0=rulelogicalAndExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"l",
              	        		lv_l_0_0, 
              	        		"logicalAndExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5698:2: ( ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) ) )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( ((LA69_0>=161 && LA69_0<=163)) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5698:3: ruleOR ( (lv_l_2_0= rulelogicalAndExpression ) )
            	    {
            	    pushFollow(FOLLOW_ruleOR_in_rulelogicalOrExpression10850);
            	    ruleOR();
            	    _fsp--;
            	    if (failed) return current;
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5698:9: ( (lv_l_2_0= rulelogicalAndExpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5699:1: (lv_l_2_0= rulelogicalAndExpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5699:1: (lv_l_2_0= rulelogicalAndExpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5700:3: lv_l_2_0= rulelogicalAndExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulelogicalAndExpression_in_rulelogicalOrExpression10863);
            	    lv_l_2_0=rulelogicalAndExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"l",
            	      	        		lv_l_2_0, 
            	      	        		"logicalAndExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulelogicalOrExpression


    // $ANTLR start entryRulelogicalAndExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5730:1: entryRulelogicalAndExpression returns [EObject current=null] : iv_rulelogicalAndExpression= rulelogicalAndExpression EOF ;
    public final EObject entryRulelogicalAndExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulelogicalAndExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5731:2: (iv_rulelogicalAndExpression= rulelogicalAndExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5732:2: iv_rulelogicalAndExpression= rulelogicalAndExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLogicalAndExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulelogicalAndExpression_in_entryRulelogicalAndExpression10901);
            iv_rulelogicalAndExpression=rulelogicalAndExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulelogicalAndExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulelogicalAndExpression10911); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulelogicalAndExpression


    // $ANTLR start rulelogicalAndExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5739:1: rulelogicalAndExpression returns [EObject current=null] : ( ( (lv_n_0_0= rulenegatedExpression ) ) ( ruleAND ( (lv_n_2_0= rulenegatedExpression ) ) )* ) ;
    public final EObject rulelogicalAndExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_n_0_0 = null;

        EObject lv_n_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5744:6: ( ( ( (lv_n_0_0= rulenegatedExpression ) ) ( ruleAND ( (lv_n_2_0= rulenegatedExpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5745:1: ( ( (lv_n_0_0= rulenegatedExpression ) ) ( ruleAND ( (lv_n_2_0= rulenegatedExpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5745:1: ( ( (lv_n_0_0= rulenegatedExpression ) ) ( ruleAND ( (lv_n_2_0= rulenegatedExpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5745:2: ( (lv_n_0_0= rulenegatedExpression ) ) ( ruleAND ( (lv_n_2_0= rulenegatedExpression ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5745:2: ( (lv_n_0_0= rulenegatedExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5746:1: (lv_n_0_0= rulenegatedExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5746:1: (lv_n_0_0= rulenegatedExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5747:3: lv_n_0_0= rulenegatedExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulenegatedExpression_in_rulelogicalAndExpression10957);
            lv_n_0_0=rulenegatedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"n",
              	        		lv_n_0_0, 
              	        		"negatedExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5769:2: ( ruleAND ( (lv_n_2_0= rulenegatedExpression ) ) )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( ((LA70_0>=164 && LA70_0<=166)) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5769:3: ruleAND ( (lv_n_2_0= rulenegatedExpression ) )
            	    {
            	    pushFollow(FOLLOW_ruleAND_in_rulelogicalAndExpression10967);
            	    ruleAND();
            	    _fsp--;
            	    if (failed) return current;
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5769:10: ( (lv_n_2_0= rulenegatedExpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5770:1: (lv_n_2_0= rulenegatedExpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5770:1: (lv_n_2_0= rulenegatedExpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5771:3: lv_n_2_0= rulenegatedExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulenegatedExpression_in_rulelogicalAndExpression10980);
            	    lv_n_2_0=rulenegatedExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"n",
            	      	        		lv_n_2_0, 
            	      	        		"negatedExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulelogicalAndExpression


    // $ANTLR start entryRulenegatedExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5801:1: entryRulenegatedExpression returns [EObject current=null] : iv_rulenegatedExpression= rulenegatedExpression EOF ;
    public final EObject entryRulenegatedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulenegatedExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5802:2: (iv_rulenegatedExpression= rulenegatedExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5803:2: iv_rulenegatedExpression= rulenegatedExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNegatedExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulenegatedExpression_in_entryRulenegatedExpression11018);
            iv_rulenegatedExpression=rulenegatedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulenegatedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulenegatedExpression11028); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulenegatedExpression


    // $ANTLR start rulenegatedExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5810:1: rulenegatedExpression returns [EObject current=null] : ( ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) ) | this_equalityExpression_2= ruleequalityExpression ) ;
    public final EObject rulenegatedExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_n_1_0 = null;

        EObject this_equalityExpression_2 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5815:6: ( ( ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) ) | this_equalityExpression_2= ruleequalityExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:1: ( ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) ) | this_equalityExpression_2= ruleequalityExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:1: ( ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) ) | this_equalityExpression_2= ruleequalityExpression )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==16||(LA71_0>=167 && LA71_0<=168)) ) {
                alt71=1;
            }
            else if ( ((LA71_0>=RULE_ID && LA71_0<=RULE_HEX)||(LA71_0>=17 && LA71_0<=18)||LA71_0==26||LA71_0==36||(LA71_0>=38 && LA71_0<=40)||(LA71_0>=42 && LA71_0<=43)||LA71_0==45||(LA71_0>=54 && LA71_0<=57)||LA71_0==59||(LA71_0>=62 && LA71_0<=63)||(LA71_0>=75 && LA71_0<=78)||(LA71_0>=92 && LA71_0<=94)||(LA71_0>=125 && LA71_0<=127)||(LA71_0>=177 && LA71_0<=179)||(LA71_0>=186 && LA71_0<=194)||(LA71_0>=201 && LA71_0<=230)||(LA71_0>=240 && LA71_0<=249)) ) {
                alt71=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("5816:1: ( ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) ) | this_equalityExpression_2= ruleequalityExpression )", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:2: ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:2: ( ruleNOT ( (lv_n_1_0= rulenegatedExpression ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:3: ruleNOT ( (lv_n_1_0= rulenegatedExpression ) )
                    {
                    pushFollow(FOLLOW_ruleNOT_in_rulenegatedExpression11063);
                    ruleNOT();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:10: ( (lv_n_1_0= rulenegatedExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5817:1: (lv_n_1_0= rulenegatedExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5817:1: (lv_n_1_0= rulenegatedExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5818:3: lv_n_1_0= rulenegatedExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getNegatedExpressionAccess().getNNegatedExpressionParserRuleCall_0_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulenegatedExpression_in_rulenegatedExpression11076);
                    lv_n_1_0=rulenegatedExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNegatedExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"n",
                      	        		lv_n_1_0, 
                      	        		"negatedExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5842:2: this_equalityExpression_2= ruleequalityExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getNegatedExpressionAccess().getEqualityExpressionParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleequalityExpression_in_rulenegatedExpression11108);
                    this_equalityExpression_2=ruleequalityExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_equalityExpression_2; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulenegatedExpression


    // $ANTLR start entryRuleequalityExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5861:1: entryRuleequalityExpression returns [EObject current=null] : iv_ruleequalityExpression= ruleequalityExpression EOF ;
    public final EObject entryRuleequalityExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleequalityExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5862:2: (iv_ruleequalityExpression= ruleequalityExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5863:2: iv_ruleequalityExpression= ruleequalityExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleequalityExpression_in_entryRuleequalityExpression11143);
            iv_ruleequalityExpression=ruleequalityExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleequalityExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleequalityExpression11153); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleequalityExpression


    // $ANTLR start ruleequalityExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5870:1: ruleequalityExpression returns [EObject current=null] : ( ( (lv_r_0_0= rulerelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) ) )* ) ;
    public final EObject ruleequalityExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_r_0_0 = null;

        EObject lv_r_6_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5875:6: ( ( ( (lv_r_0_0= rulerelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5876:1: ( ( (lv_r_0_0= rulerelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5876:1: ( ( (lv_r_0_0= rulerelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5876:2: ( (lv_r_0_0= rulerelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5876:2: ( (lv_r_0_0= rulerelationalExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5877:1: (lv_r_0_0= rulerelationalExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5877:1: (lv_r_0_0= rulerelationalExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5878:3: lv_r_0_0= rulerelationalExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulerelationalExpression_in_ruleequalityExpression11199);
            lv_r_0_0=rulerelationalExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"r",
              	        		lv_r_0_0, 
              	        		"relationalExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5900:2: ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) ) )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==13||LA74_0==50||LA74_0==52||(LA74_0>=169 && LA74_0<=171)) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5900:3: ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= rulerelationalExpression ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5900:3: ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' )
            	    int alt73=4;
            	    switch ( input.LA(1) ) {
            	    case 13:
            	        {
            	        alt73=1;
            	        }
            	        break;
            	    case 169:
            	    case 170:
            	    case 171:
            	        {
            	        alt73=2;
            	        }
            	        break;
            	    case 50:
            	        {
            	        alt73=3;
            	        }
            	        break;
            	    case 52:
            	        {
            	        alt73=4;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("5900:3: ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' )", 73, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt73) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5900:5: '='
            	            {
            	            match(input,13,FOLLOW_13_in_ruleequalityExpression11211); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getEqualityExpressionAccess().getEqualsSignKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5905:6: ( ruleIS ( ruleNOT )? )
            	            {
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5905:6: ( ruleIS ( ruleNOT )? )
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5905:7: ruleIS ( ruleNOT )?
            	            {
            	            pushFollow(FOLLOW_ruleIS_in_ruleequalityExpression11227);
            	            ruleIS();
            	            _fsp--;
            	            if (failed) return current;
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5905:13: ( ruleNOT )?
            	            int alt72=2;
            	            int LA72_0 = input.LA(1);

            	            if ( (LA72_0==16||(LA72_0>=167 && LA72_0<=168)) ) {
            	                alt72=1;
            	            }
            	            switch (alt72) {
            	                case 1 :
            	                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5905:14: ruleNOT
            	                    {
            	                    pushFollow(FOLLOW_ruleNOT_in_ruleequalityExpression11229);
            	                    ruleNOT();
            	                    _fsp--;
            	                    if (failed) return current;

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;
            	        case 3 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5906:7: '!='
            	            {
            	            match(input,50,FOLLOW_50_in_ruleequalityExpression11240); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_2(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5911:7: '<>'
            	            {
            	            match(input,52,FOLLOW_52_in_ruleequalityExpression11256); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getEqualityExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_0_3(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5915:2: ( (lv_r_6_0= rulerelationalExpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5916:1: (lv_r_6_0= rulerelationalExpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5916:1: (lv_r_6_0= rulerelationalExpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5917:3: lv_r_6_0= rulerelationalExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulerelationalExpression_in_ruleequalityExpression11278);
            	    lv_r_6_0=rulerelationalExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"r",
            	      	        		lv_r_6_0, 
            	      	        		"relationalExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleequalityExpression


    // $ANTLR start entryRulerelationalExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5947:1: entryRulerelationalExpression returns [EObject current=null] : iv_rulerelationalExpression= rulerelationalExpression EOF ;
    public final EObject entryRulerelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulerelationalExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5948:2: (iv_rulerelationalExpression= rulerelationalExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5949:2: iv_rulerelationalExpression= rulerelationalExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulerelationalExpression_in_entryRulerelationalExpression11316);
            iv_rulerelationalExpression=rulerelationalExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulerelationalExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulerelationalExpression11326); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulerelationalExpression


    // $ANTLR start rulerelationalExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5956:1: rulerelationalExpression returns [EObject current=null] : (this_concatenation_0= ruleconcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) ) ) ;
    public final EObject rulerelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_concatenation_0 = null;

        EObject lv_a_5_0 = null;

        EObject lv_i_8_0 = null;

        EObject lv_b_10_0 = null;

        EObject lv_c_12_0 = null;

        EObject lv_l_13_0 = null;

        AntlrDatatypeRuleToken lv_p_16_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5961:6: ( (this_concatenation_0= ruleconcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5962:1: (this_concatenation_0= ruleconcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5962:1: (this_concatenation_0= ruleconcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5963:2: this_concatenation_0= ruleconcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) )
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getConcatenationParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleconcatenation_in_rulerelationalExpression11376);
            this_concatenation_0=ruleconcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_concatenation_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5974:1: ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==EOF||LA80_0==13||(LA80_0>=28 && LA80_0<=29)||LA80_0==33||LA80_0==44||(LA80_0>=46 && LA80_0<=50)||LA80_0==52||LA80_0==71||(LA80_0>=92 && LA80_0<=100)||(LA80_0>=104 && LA80_0<=112)||(LA80_0>=128 && LA80_0<=130)||(LA80_0>=134 && LA80_0<=139)||(LA80_0>=143 && LA80_0<=166)||(LA80_0>=169 && LA80_0<=171)||(LA80_0>=195 && LA80_0<=197)) ) {
                alt80=1;
            }
            else if ( (LA80_0==16||LA80_0==53||(LA80_0>=119 && LA80_0<=121)||(LA80_0>=167 && LA80_0<=168)||(LA80_0>=172 && LA80_0<=179)) ) {
                alt80=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("5974:1: ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) ) )", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5974:2: ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )*
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5974:2: ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) ) )*
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( ((LA76_0>=46 && LA76_0<=49)) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5974:3: ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleadditiveExpression ) )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5974:3: ( '<' | '>' | '<=' | '>=' )
                    	    int alt75=4;
                    	    switch ( input.LA(1) ) {
                    	    case 46:
                    	        {
                    	        alt75=1;
                    	        }
                    	        break;
                    	    case 47:
                    	        {
                    	        alt75=2;
                    	        }
                    	        break;
                    	    case 48:
                    	        {
                    	        alt75=3;
                    	        }
                    	        break;
                    	    case 49:
                    	        {
                    	        alt75=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (backtracking>0) {failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("5974:3: ( '<' | '>' | '<=' | '>=' )", 75, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt75) {
                    	        case 1 :
                    	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5974:5: '<'
                    	            {
                    	            match(input,46,FOLLOW_46_in_rulerelationalExpression11388); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0_0(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5979:7: '>'
                    	            {
                    	            match(input,47,FOLLOW_47_in_rulerelationalExpression11404); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_0_1(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;
                    	        case 3 :
                    	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5984:7: '<='
                    	            {
                    	            match(input,48,FOLLOW_48_in_rulerelationalExpression11420); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_0_2(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;
                    	        case 4 :
                    	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5989:7: '>='
                    	            {
                    	            match(input,49,FOLLOW_49_in_rulerelationalExpression11436); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_3(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;

                    	    }

                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5993:2: ( (lv_a_5_0= ruleadditiveExpression ) )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5994:1: (lv_a_5_0= ruleadditiveExpression )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5994:1: (lv_a_5_0= ruleadditiveExpression )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5995:3: lv_a_5_0= ruleadditiveExpression
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_1_0_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleadditiveExpression_in_rulerelationalExpression11458);
                    	    lv_a_5_0=ruleadditiveExpression();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_5_0, 
                    	      	        		"additiveExpression", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop76;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:6: ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:6: ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:7: ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:7: ( ruleNOT )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==16||(LA77_0>=167 && LA77_0<=168)) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:8: ruleNOT
                            {
                            pushFollow(FOLLOW_ruleNOT_in_rulerelationalExpression11477);
                            ruleNOT();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:17: ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) )
                    int alt79=4;
                    switch ( input.LA(1) ) {
                    case 119:
                    case 120:
                    case 121:
                        {
                        alt79=1;
                        }
                        break;
                    case 172:
                    case 173:
                    case 174:
                        {
                        alt79=2;
                        }
                        break;
                    case 53:
                    case 175:
                    case 176:
                        {
                        alt79=3;
                        }
                        break;
                    case 177:
                    case 178:
                    case 179:
                        {
                        alt79=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("6018:17: ( ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) ) )", 79, 0, input);

                        throw nvae;
                    }

                    switch (alt79) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:18: ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:18: ( ruleIN ( (lv_i_8_0= rulecompoundExpr ) ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:19: ruleIN ( (lv_i_8_0= rulecompoundExpr ) )
                            {
                            pushFollow(FOLLOW_ruleIN_in_rulerelationalExpression11482);
                            ruleIN();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6018:25: ( (lv_i_8_0= rulecompoundExpr ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6019:1: (lv_i_8_0= rulecompoundExpr )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6019:1: (lv_i_8_0= rulecompoundExpr )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6020:3: lv_i_8_0= rulecompoundExpr
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getICompoundExprParserRuleCall_1_1_1_0_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_rulecompoundExpr_in_rulerelationalExpression11495);
                            lv_i_8_0=rulecompoundExpr();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"i",
                              	        		lv_i_8_0, 
                              	        		"compoundExpr", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6043:6: ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6043:6: ( ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6043:7: ruleBETWEEN ( (lv_b_10_0= rulebetweenList ) )
                            {
                            pushFollow(FOLLOW_ruleBETWEEN_in_rulerelationalExpression11512);
                            ruleBETWEEN();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6043:18: ( (lv_b_10_0= rulebetweenList ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6044:1: (lv_b_10_0= rulebetweenList )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6044:1: (lv_b_10_0= rulebetweenList )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6045:3: lv_b_10_0= rulebetweenList
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getBBetweenListParserRuleCall_1_1_1_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_rulebetweenList_in_rulerelationalExpression11525);
                            lv_b_10_0=rulebetweenList();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"b",
                              	        		lv_b_10_0, 
                              	        		"betweenList", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6068:6: ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6068:6: ( ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6068:7: ruleLIKE ( (lv_c_12_0= ruleconcatenation ) ) ( (lv_l_13_0= rulelikeEscape ) )
                            {
                            pushFollow(FOLLOW_ruleLIKE_in_rulerelationalExpression11542);
                            ruleLIKE();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6068:15: ( (lv_c_12_0= ruleconcatenation ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6069:1: (lv_c_12_0= ruleconcatenation )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6069:1: (lv_c_12_0= ruleconcatenation )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6070:3: lv_c_12_0= ruleconcatenation
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getCConcatenationParserRuleCall_1_1_1_2_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleconcatenation_in_rulerelationalExpression11555);
                            lv_c_12_0=ruleconcatenation();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"c",
                              	        		lv_c_12_0, 
                              	        		"concatenation", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }

                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6092:2: ( (lv_l_13_0= rulelikeEscape ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6093:1: (lv_l_13_0= rulelikeEscape )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6093:1: (lv_l_13_0= rulelikeEscape )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6094:3: lv_l_13_0= rulelikeEscape
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getLLikeEscapeParserRuleCall_1_1_1_2_2_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_rulelikeEscape_in_rulerelationalExpression11576);
                            lv_l_13_0=rulelikeEscape();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"l",
                              	        		lv_l_13_0, 
                              	        		"likeEscape", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 4 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:6: ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:6: ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:7: ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulepath ) )
                            {
                            pushFollow(FOLLOW_ruleMEMBER_in_rulerelationalExpression11593);
                            ruleMEMBER();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:17: ( ruleOF )?
                            int alt78=2;
                            int LA78_0 = input.LA(1);

                            if ( ((LA78_0>=180 && LA78_0<=182)) ) {
                                alt78=1;
                            }
                            switch (alt78) {
                                case 1 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:18: ruleOF
                                    {
                                    pushFollow(FOLLOW_ruleOF_in_rulerelationalExpression11595);
                                    ruleOF();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;

                            }

                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:26: ( (lv_p_16_0= rulepath ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6118:1: (lv_p_16_0= rulepath )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6118:1: (lv_p_16_0= rulepath )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6119:3: lv_p_16_0= rulepath
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getPPathParserRuleCall_1_1_1_3_2_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_rulepath_in_rulerelationalExpression11610);
                            lv_p_16_0=rulepath();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"p",
                              	        		lv_p_16_0, 
                              	        		"path", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulerelationalExpression


    // $ANTLR start entryRulelikeEscape
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6149:1: entryRulelikeEscape returns [EObject current=null] : iv_rulelikeEscape= rulelikeEscape EOF ;
    public final EObject entryRulelikeEscape() throws RecognitionException {
        EObject current = null;

        EObject iv_rulelikeEscape = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6150:2: (iv_rulelikeEscape= rulelikeEscape EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6151:2: iv_rulelikeEscape= rulelikeEscape EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLikeEscapeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulelikeEscape_in_entryRulelikeEscape11650);
            iv_rulelikeEscape=rulelikeEscape();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulelikeEscape; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulelikeEscape11660); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulelikeEscape


    // $ANTLR start rulelikeEscape
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6158:1: rulelikeEscape returns [EObject current=null] : ( () ( ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) ) )? ) ;
    public final EObject rulelikeEscape() throws RecognitionException {
        EObject current = null;

        EObject lv_c_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6163:6: ( ( () ( ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6164:1: ( () ( ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6164:1: ( () ( ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6164:2: () ( ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6164:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6165:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6178:2: ( ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) ) )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=183 && LA81_0<=185)) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6178:3: ruleESCAPE ( (lv_c_2_0= ruleconcatenation ) )
                    {
                    pushFollow(FOLLOW_ruleESCAPE_in_rulelikeEscape11707);
                    ruleESCAPE();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6178:13: ( (lv_c_2_0= ruleconcatenation ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6179:1: (lv_c_2_0= ruleconcatenation )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6179:1: (lv_c_2_0= ruleconcatenation )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6180:3: lv_c_2_0= ruleconcatenation
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getLikeEscapeAccess().getCConcatenationParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleconcatenation_in_rulelikeEscape11720);
                    lv_c_2_0=ruleconcatenation();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getLikeEscapeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"c",
                      	        		lv_c_2_0, 
                      	        		"concatenation", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulelikeEscape


    // $ANTLR start entryRulebetweenList
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6210:1: entryRulebetweenList returns [EObject current=null] : iv_rulebetweenList= rulebetweenList EOF ;
    public final EObject entryRulebetweenList() throws RecognitionException {
        EObject current = null;

        EObject iv_rulebetweenList = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6211:2: (iv_rulebetweenList= rulebetweenList EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6212:2: iv_rulebetweenList= rulebetweenList EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBetweenListRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulebetweenList_in_entryRulebetweenList11758);
            iv_rulebetweenList=rulebetweenList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulebetweenList; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulebetweenList11768); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulebetweenList


    // $ANTLR start rulebetweenList
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6219:1: rulebetweenList returns [EObject current=null] : ( ( (lv_c_0_0= ruleconcatenation ) ) ruleAND ( (lv_c_2_0= ruleconcatenation ) ) ) ;
    public final EObject rulebetweenList() throws RecognitionException {
        EObject current = null;

        EObject lv_c_0_0 = null;

        EObject lv_c_2_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6224:6: ( ( ( (lv_c_0_0= ruleconcatenation ) ) ruleAND ( (lv_c_2_0= ruleconcatenation ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6225:1: ( ( (lv_c_0_0= ruleconcatenation ) ) ruleAND ( (lv_c_2_0= ruleconcatenation ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6225:1: ( ( (lv_c_0_0= ruleconcatenation ) ) ruleAND ( (lv_c_2_0= ruleconcatenation ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6225:2: ( (lv_c_0_0= ruleconcatenation ) ) ruleAND ( (lv_c_2_0= ruleconcatenation ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6225:2: ( (lv_c_0_0= ruleconcatenation ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6226:1: (lv_c_0_0= ruleconcatenation )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6226:1: (lv_c_0_0= ruleconcatenation )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6227:3: lv_c_0_0= ruleconcatenation
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleconcatenation_in_rulebetweenList11814);
            lv_c_0_0=ruleconcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getBetweenListRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"c",
              	        		lv_c_0_0, 
              	        		"concatenation", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleAND_in_rulebetweenList11823);
            ruleAND();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6249:9: ( (lv_c_2_0= ruleconcatenation ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6250:1: (lv_c_2_0= ruleconcatenation )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6250:1: (lv_c_2_0= ruleconcatenation )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6251:3: lv_c_2_0= ruleconcatenation
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleconcatenation_in_rulebetweenList11836);
            lv_c_2_0=ruleconcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getBetweenListRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"c",
              	        		lv_c_2_0, 
              	        		"concatenation", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulebetweenList


    // $ANTLR start entryRuleconcatenation
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6281:1: entryRuleconcatenation returns [EObject current=null] : iv_ruleconcatenation= ruleconcatenation EOF ;
    public final EObject entryRuleconcatenation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleconcatenation = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6282:2: (iv_ruleconcatenation= ruleconcatenation EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6283:2: iv_ruleconcatenation= ruleconcatenation EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getConcatenationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleconcatenation_in_entryRuleconcatenation11872);
            iv_ruleconcatenation=ruleconcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleconcatenation; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleconcatenation11882); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleconcatenation


    // $ANTLR start ruleconcatenation
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6290:1: ruleconcatenation returns [EObject current=null] : (this_additiveExpression_0= ruleadditiveExpression ( '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )* )? ) ;
    public final EObject ruleconcatenation() throws RecognitionException {
        EObject current = null;

        EObject this_additiveExpression_0 = null;

        EObject lv_a_2_0 = null;

        EObject lv_a_4_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6295:6: ( (this_additiveExpression_0= ruleadditiveExpression ( '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )* )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6296:1: (this_additiveExpression_0= ruleadditiveExpression ( '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )* )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6296:1: (this_additiveExpression_0= ruleadditiveExpression ( '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )* )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6297:2: this_additiveExpression_0= ruleadditiveExpression ( '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )* )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleadditiveExpression_in_ruleconcatenation11932);
            this_additiveExpression_0=ruleadditiveExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_additiveExpression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6308:1: ( '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )* )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==72) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6308:3: '||' ( (lv_a_2_0= ruleadditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )*
                    {
                    match(input,72,FOLLOW_72_in_ruleconcatenation11942); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6312:1: ( (lv_a_2_0= ruleadditiveExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6313:1: (lv_a_2_0= ruleadditiveExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6313:1: (lv_a_2_0= ruleadditiveExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6314:3: lv_a_2_0= ruleadditiveExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleadditiveExpression_in_ruleconcatenation11963);
                    lv_a_2_0=ruleadditiveExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getConcatenationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"a",
                      	        		lv_a_2_0, 
                      	        		"additiveExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6336:2: ( '||' ( (lv_a_4_0= ruleadditiveExpression ) ) )*
                    loop82:
                    do {
                        int alt82=2;
                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==72) ) {
                            alt82=1;
                        }


                        switch (alt82) {
                    	case 1 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6336:4: '||' ( (lv_a_4_0= ruleadditiveExpression ) )
                    	    {
                    	    match(input,72,FOLLOW_72_in_ruleconcatenation11974); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_2_0(), null); 
                    	          
                    	    }
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6340:1: ( (lv_a_4_0= ruleadditiveExpression ) )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6341:1: (lv_a_4_0= ruleadditiveExpression )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6341:1: (lv_a_4_0= ruleadditiveExpression )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6342:3: lv_a_4_0= ruleadditiveExpression
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_2_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleadditiveExpression_in_ruleconcatenation11995);
                    	    lv_a_4_0=ruleadditiveExpression();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getConcatenationRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_4_0, 
                    	      	        		"additiveExpression", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop82;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleconcatenation


    // $ANTLR start entryRuleadditiveExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6372:1: entryRuleadditiveExpression returns [EObject current=null] : iv_ruleadditiveExpression= ruleadditiveExpression EOF ;
    public final EObject entryRuleadditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleadditiveExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6373:2: (iv_ruleadditiveExpression= ruleadditiveExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6374:2: iv_ruleadditiveExpression= ruleadditiveExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleadditiveExpression_in_entryRuleadditiveExpression12035);
            iv_ruleadditiveExpression=ruleadditiveExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleadditiveExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleadditiveExpression12045); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleadditiveExpression


    // $ANTLR start ruleadditiveExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6381:1: ruleadditiveExpression returns [EObject current=null] : ( ( (lv_m_0_0= rulemultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) ) )* ) ;
    public final EObject ruleadditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_m_0_0 = null;

        EObject lv_m_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6386:6: ( ( ( (lv_m_0_0= rulemultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6387:1: ( ( (lv_m_0_0= rulemultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6387:1: ( ( (lv_m_0_0= rulemultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6387:2: ( (lv_m_0_0= rulemultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6387:2: ( (lv_m_0_0= rulemultiplyExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6388:1: (lv_m_0_0= rulemultiplyExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6388:1: (lv_m_0_0= rulemultiplyExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6389:3: lv_m_0_0= rulemultiplyExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulemultiplyExpression_in_ruleadditiveExpression12091);
            lv_m_0_0=rulemultiplyExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"m",
              	        		lv_m_0_0, 
              	        		"multiplyExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6411:2: ( ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) ) )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( ((LA85_0>=56 && LA85_0<=57)) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6411:3: ( '+' | '-' ) ( (lv_m_3_0= rulemultiplyExpression ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6411:3: ( '+' | '-' )
            	    int alt84=2;
            	    int LA84_0 = input.LA(1);

            	    if ( (LA84_0==56) ) {
            	        alt84=1;
            	    }
            	    else if ( (LA84_0==57) ) {
            	        alt84=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6411:3: ( '+' | '-' )", 84, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt84) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6411:5: '+'
            	            {
            	            match(input,56,FOLLOW_56_in_ruleadditiveExpression12103); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6416:7: '-'
            	            {
            	            match(input,57,FOLLOW_57_in_ruleadditiveExpression12119); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6420:2: ( (lv_m_3_0= rulemultiplyExpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6421:1: (lv_m_3_0= rulemultiplyExpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6421:1: (lv_m_3_0= rulemultiplyExpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6422:3: lv_m_3_0= rulemultiplyExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulemultiplyExpression_in_ruleadditiveExpression12141);
            	    lv_m_3_0=rulemultiplyExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"m",
            	      	        		lv_m_3_0, 
            	      	        		"multiplyExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleadditiveExpression


    // $ANTLR start entryRulemultiplyExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6452:1: entryRulemultiplyExpression returns [EObject current=null] : iv_rulemultiplyExpression= rulemultiplyExpression EOF ;
    public final EObject entryRulemultiplyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulemultiplyExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6453:2: (iv_rulemultiplyExpression= rulemultiplyExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6454:2: iv_rulemultiplyExpression= rulemultiplyExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMultiplyExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulemultiplyExpression_in_entryRulemultiplyExpression12179);
            iv_rulemultiplyExpression=rulemultiplyExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulemultiplyExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulemultiplyExpression12189); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulemultiplyExpression


    // $ANTLR start rulemultiplyExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6461:1: rulemultiplyExpression returns [EObject current=null] : ( ( (lv_u_0_0= ruleunaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) ) )* ) ;
    public final EObject rulemultiplyExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_u_0_0 = null;

        EObject lv_u_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6466:6: ( ( ( (lv_u_0_0= ruleunaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6467:1: ( ( (lv_u_0_0= ruleunaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6467:1: ( ( (lv_u_0_0= ruleunaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6467:2: ( (lv_u_0_0= ruleunaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) ) )*
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6467:2: ( (lv_u_0_0= ruleunaryExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6468:1: (lv_u_0_0= ruleunaryExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6468:1: (lv_u_0_0= ruleunaryExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6469:3: lv_u_0_0= ruleunaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleunaryExpression_in_rulemultiplyExpression12235);
            lv_u_0_0=ruleunaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getMultiplyExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"u",
              	        		lv_u_0_0, 
              	        		"unaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6491:2: ( ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) ) )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( ((LA87_0>=73 && LA87_0<=74)) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6491:3: ( '*' | '/' ) ( (lv_u_3_0= ruleunaryExpression ) )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6491:3: ( '*' | '/' )
            	    int alt86=2;
            	    int LA86_0 = input.LA(1);

            	    if ( (LA86_0==73) ) {
            	        alt86=1;
            	    }
            	    else if ( (LA86_0==74) ) {
            	        alt86=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6491:3: ( '*' | '/' )", 86, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt86) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6491:5: '*'
            	            {
            	            match(input,73,FOLLOW_73_in_rulemultiplyExpression12247); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getMultiplyExpressionAccess().getAsteriskKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6496:7: '/'
            	            {
            	            match(input,74,FOLLOW_74_in_rulemultiplyExpression12263); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getMultiplyExpressionAccess().getSolidusKeyword_1_0_1(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6500:2: ( (lv_u_3_0= ruleunaryExpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6501:1: (lv_u_3_0= ruleunaryExpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6501:1: (lv_u_3_0= ruleunaryExpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6502:3: lv_u_3_0= ruleunaryExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleunaryExpression_in_rulemultiplyExpression12285);
            	    lv_u_3_0=ruleunaryExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getMultiplyExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"u",
            	      	        		lv_u_3_0, 
            	      	        		"unaryExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulemultiplyExpression


    // $ANTLR start entryRuleunaryExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6532:1: entryRuleunaryExpression returns [EObject current=null] : iv_ruleunaryExpression= ruleunaryExpression EOF ;
    public final EObject entryRuleunaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleunaryExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6533:2: (iv_ruleunaryExpression= ruleunaryExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6534:2: iv_ruleunaryExpression= ruleunaryExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleunaryExpression_in_entryRuleunaryExpression12323);
            iv_ruleunaryExpression=ruleunaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleunaryExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleunaryExpression12333); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleunaryExpression


    // $ANTLR start ruleunaryExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6541:1: ruleunaryExpression returns [EObject current=null] : ( ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) ) | this_caseExpression_4= rulecaseExpression | this_quantifiedExpression_5= rulequantifiedExpression | this_atom_6= ruleatom ) ;
    public final EObject ruleunaryExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_u_1_0 = null;

        EObject lv_u_3_0 = null;

        EObject this_caseExpression_4 = null;

        EObject this_quantifiedExpression_5 = null;

        EObject this_atom_6 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6546:6: ( ( ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) ) | this_caseExpression_4= rulecaseExpression | this_quantifiedExpression_5= rulequantifiedExpression | this_atom_6= ruleatom ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6547:1: ( ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) ) | this_caseExpression_4= rulecaseExpression | this_quantifiedExpression_5= rulequantifiedExpression | this_atom_6= ruleatom )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6547:1: ( ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) ) | this_caseExpression_4= rulecaseExpression | this_quantifiedExpression_5= rulequantifiedExpression | this_atom_6= ruleatom )
            int alt88=5;
            switch ( input.LA(1) ) {
            case 57:
                {
                alt88=1;
                }
                break;
            case 56:
                {
                alt88=2;
                }
                break;
            case 186:
            case 187:
            case 188:
                {
                alt88=3;
                }
                break;
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
                {
                alt88=4;
                }
                break;
            case RULE_ID:
            case RULE_STRING:
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 17:
            case 18:
            case 26:
            case 36:
            case 38:
            case 39:
            case 40:
            case 42:
            case 43:
            case 45:
            case 54:
            case 55:
            case 59:
            case 62:
            case 63:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 125:
            case 126:
            case 127:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
                {
                alt88=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("6547:1: ( ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) ) | this_caseExpression_4= rulecaseExpression | this_quantifiedExpression_5= rulequantifiedExpression | this_atom_6= ruleatom )", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6547:2: ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6547:2: ( '-' ( (lv_u_1_0= ruleunaryExpression ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6547:4: '-' ( (lv_u_1_0= ruleunaryExpression ) )
                    {
                    match(input,57,FOLLOW_57_in_ruleunaryExpression12369); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_0_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6551:1: ( (lv_u_1_0= ruleunaryExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6552:1: (lv_u_1_0= ruleunaryExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6552:1: (lv_u_1_0= ruleunaryExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6553:3: lv_u_1_0= ruleunaryExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_0_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleunaryExpression_in_ruleunaryExpression12390);
                    lv_u_1_0=ruleunaryExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_1_0, 
                      	        		"unaryExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6576:6: ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6576:6: ( '+' ( (lv_u_3_0= ruleunaryExpression ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6576:8: '+' ( (lv_u_3_0= ruleunaryExpression ) )
                    {
                    match(input,56,FOLLOW_56_in_ruleunaryExpression12408); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_1_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6580:1: ( (lv_u_3_0= ruleunaryExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6581:1: (lv_u_3_0= ruleunaryExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6581:1: (lv_u_3_0= ruleunaryExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6582:3: lv_u_3_0= ruleunaryExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleunaryExpression_in_ruleunaryExpression12429);
                    lv_u_3_0=ruleunaryExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_3_0, 
                      	        		"unaryExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6606:2: this_caseExpression_4= rulecaseExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getCaseExpressionParserRuleCall_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulecaseExpression_in_ruleunaryExpression12461);
                    this_caseExpression_4=rulecaseExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_caseExpression_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6619:2: this_quantifiedExpression_5= rulequantifiedExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getQuantifiedExpressionParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulequantifiedExpression_in_ruleunaryExpression12491);
                    this_quantifiedExpression_5=rulequantifiedExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_quantifiedExpression_5; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6632:2: this_atom_6= ruleatom
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getAtomParserRuleCall_4(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleatom_in_ruleunaryExpression12521);
                    this_atom_6=ruleatom();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_atom_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleunaryExpression


    // $ANTLR start entryRulecaseExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6651:1: entryRulecaseExpression returns [EObject current=null] : iv_rulecaseExpression= rulecaseExpression EOF ;
    public final EObject entryRulecaseExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecaseExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6652:2: (iv_rulecaseExpression= rulecaseExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6653:2: iv_rulecaseExpression= rulecaseExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCaseExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecaseExpression_in_entryRulecaseExpression12556);
            iv_rulecaseExpression=rulecaseExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecaseExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecaseExpression12566); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecaseExpression


    // $ANTLR start rulecaseExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6660:1: rulecaseExpression returns [EObject current=null] : ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) ) ;
    public final EObject rulecaseExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_w_1_0 = null;

        EObject lv_e_2_0 = null;

        EObject lv_u_5_0 = null;

        EObject lv_a_6_0 = null;

        EObject lv_e_7_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6665:6: ( ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:1: ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:1: ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) )
            int alt93=2;
            switch ( input.LA(1) ) {
            case 186:
                {
                int LA93_1 = input.LA(2);

                if ( (synpred157()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("6666:1: ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) )", 93, 1, input);

                    throw nvae;
                }
                }
                break;
            case 187:
                {
                int LA93_2 = input.LA(2);

                if ( (synpred157()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("6666:1: ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) )", 93, 2, input);

                    throw nvae;
                }
                }
                break;
            case 188:
                {
                int LA93_3 = input.LA(2);

                if ( (synpred157()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("6666:1: ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) )", 93, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("6666:1: ( ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND ) )", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:2: ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:2: ( ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:3: ruleCASE ( (lv_w_1_0= rulewhenClause ) )+ ( (lv_e_2_0= ruleelseClause ) )? ruleEND
                    {
                    pushFollow(FOLLOW_ruleCASE_in_rulecaseExpression12601);
                    ruleCASE();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:11: ( (lv_w_1_0= rulewhenClause ) )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( ((LA89_0>=192 && LA89_0<=194)) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6667:1: (lv_w_1_0= rulewhenClause )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6667:1: (lv_w_1_0= rulewhenClause )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6668:3: lv_w_1_0= rulewhenClause
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_rulewhenClause_in_rulecaseExpression12614);
                    	    lv_w_1_0=rulewhenClause();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"w",
                    	      	        		lv_w_1_0, 
                    	      	        		"whenClause", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (backtracking>0) {failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6690:3: ( (lv_e_2_0= ruleelseClause ) )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( ((LA90_0>=198 && LA90_0<=200)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6691:1: (lv_e_2_0= ruleelseClause )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6691:1: (lv_e_2_0= ruleelseClause )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6692:3: lv_e_2_0= ruleelseClause
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleelseClause_in_rulecaseExpression12636);
                            lv_e_2_0=ruleelseClause();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_2_0, 
                              	        		"elseClause", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_ruleEND_in_rulecaseExpression12646);
                    ruleEND();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6715:6: ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6715:6: ( ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6715:7: ruleCASE ( (lv_u_5_0= ruleunaryExpression ) ) ( (lv_a_6_0= rulealtWhenClause ) )+ ( (lv_e_7_0= ruleelseClause ) )? ruleEND
                    {
                    pushFollow(FOLLOW_ruleCASE_in_rulecaseExpression12655);
                    ruleCASE();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6715:15: ( (lv_u_5_0= ruleunaryExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6716:1: (lv_u_5_0= ruleunaryExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6716:1: (lv_u_5_0= ruleunaryExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6717:3: lv_u_5_0= ruleunaryExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleunaryExpression_in_rulecaseExpression12668);
                    lv_u_5_0=ruleunaryExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_5_0, 
                      	        		"unaryExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6739:2: ( (lv_a_6_0= rulealtWhenClause ) )+
                    int cnt91=0;
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( ((LA91_0>=192 && LA91_0<=194)) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6740:1: (lv_a_6_0= rulealtWhenClause )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6740:1: (lv_a_6_0= rulealtWhenClause )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6741:3: lv_a_6_0= rulealtWhenClause
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getAAltWhenClauseParserRuleCall_1_2_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_rulealtWhenClause_in_rulecaseExpression12689);
                    	    lv_a_6_0=rulealtWhenClause();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_6_0, 
                    	      	        		"altWhenClause", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt91 >= 1 ) break loop91;
                    	    if (backtracking>0) {failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(91, input);
                                throw eee;
                        }
                        cnt91++;
                    } while (true);

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6763:3: ( (lv_e_7_0= ruleelseClause ) )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( ((LA92_0>=198 && LA92_0<=200)) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6764:1: (lv_e_7_0= ruleelseClause )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6764:1: (lv_e_7_0= ruleelseClause )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6765:3: lv_e_7_0= ruleelseClause
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_1_3_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleelseClause_in_rulecaseExpression12711);
                            lv_e_7_0=ruleelseClause();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_7_0, 
                              	        		"elseClause", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_ruleEND_in_rulecaseExpression12721);
                    ruleEND();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecaseExpression


    // $ANTLR start entryRulewhenClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6795:1: entryRulewhenClause returns [EObject current=null] : iv_rulewhenClause= rulewhenClause EOF ;
    public final EObject entryRulewhenClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulewhenClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6796:2: (iv_rulewhenClause= rulewhenClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6797:2: iv_rulewhenClause= rulewhenClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWhenClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulewhenClause_in_entryRulewhenClause12750);
            iv_rulewhenClause=rulewhenClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulewhenClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulewhenClause12760); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulewhenClause


    // $ANTLR start rulewhenClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6804:1: rulewhenClause returns [EObject current=null] : ( ruleWHEN ( (lv_whenExpr_1_0= ruleexpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleunaryExpression ) ) ) ;
    public final EObject rulewhenClause() throws RecognitionException {
        EObject current = null;

        EObject lv_whenExpr_1_0 = null;

        EObject lv_thenExpr_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6809:6: ( ( ruleWHEN ( (lv_whenExpr_1_0= ruleexpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleunaryExpression ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6810:1: ( ruleWHEN ( (lv_whenExpr_1_0= ruleexpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleunaryExpression ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6810:1: ( ruleWHEN ( (lv_whenExpr_1_0= ruleexpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleunaryExpression ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6810:2: ruleWHEN ( (lv_whenExpr_1_0= ruleexpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleunaryExpression ) )
            {
            pushFollow(FOLLOW_ruleWHEN_in_rulewhenClause12794);
            ruleWHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6810:10: ( (lv_whenExpr_1_0= ruleexpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6811:1: (lv_whenExpr_1_0= ruleexpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6811:1: (lv_whenExpr_1_0= ruleexpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6812:3: lv_whenExpr_1_0= ruleexpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWhenClauseAccess().getWhenExprExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleexpression_in_rulewhenClause12807);
            lv_whenExpr_1_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"whenExpr",
              	        		lv_whenExpr_1_0, 
              	        		"expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleTHEN_in_rulewhenClause12816);
            ruleTHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6834:10: ( (lv_thenExpr_3_0= ruleunaryExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6835:1: (lv_thenExpr_3_0= ruleunaryExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6835:1: (lv_thenExpr_3_0= ruleunaryExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6836:3: lv_thenExpr_3_0= ruleunaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWhenClauseAccess().getThenExprUnaryExpressionParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleunaryExpression_in_rulewhenClause12829);
            lv_thenExpr_3_0=ruleunaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"thenExpr",
              	        		lv_thenExpr_3_0, 
              	        		"unaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulewhenClause


    // $ANTLR start entryRulealtWhenClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6866:1: entryRulealtWhenClause returns [EObject current=null] : iv_rulealtWhenClause= rulealtWhenClause EOF ;
    public final EObject entryRulealtWhenClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulealtWhenClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6867:2: (iv_rulealtWhenClause= rulealtWhenClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6868:2: iv_rulealtWhenClause= rulealtWhenClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAltWhenClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulealtWhenClause_in_entryRulealtWhenClause12865);
            iv_rulealtWhenClause=rulealtWhenClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulealtWhenClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulealtWhenClause12875); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulealtWhenClause


    // $ANTLR start rulealtWhenClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6875:1: rulealtWhenClause returns [EObject current=null] : ( ruleWHEN ( (lv_w_1_0= ruleunaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleunaryExpression ) ) ) ;
    public final EObject rulealtWhenClause() throws RecognitionException {
        EObject current = null;

        EObject lv_w_1_0 = null;

        EObject lv_t_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6880:6: ( ( ruleWHEN ( (lv_w_1_0= ruleunaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleunaryExpression ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6881:1: ( ruleWHEN ( (lv_w_1_0= ruleunaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleunaryExpression ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6881:1: ( ruleWHEN ( (lv_w_1_0= ruleunaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleunaryExpression ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6881:2: ruleWHEN ( (lv_w_1_0= ruleunaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleunaryExpression ) )
            {
            pushFollow(FOLLOW_ruleWHEN_in_rulealtWhenClause12909);
            ruleWHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6881:10: ( (lv_w_1_0= ruleunaryExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6882:1: (lv_w_1_0= ruleunaryExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6882:1: (lv_w_1_0= ruleunaryExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6883:3: lv_w_1_0= ruleunaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAltWhenClauseAccess().getWUnaryExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleunaryExpression_in_rulealtWhenClause12922);
            lv_w_1_0=ruleunaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAltWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"w",
              	        		lv_w_1_0, 
              	        		"unaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleTHEN_in_rulealtWhenClause12931);
            ruleTHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6905:10: ( (lv_t_3_0= ruleunaryExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6906:1: (lv_t_3_0= ruleunaryExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6906:1: (lv_t_3_0= ruleunaryExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6907:3: lv_t_3_0= ruleunaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAltWhenClauseAccess().getTUnaryExpressionParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleunaryExpression_in_rulealtWhenClause12944);
            lv_t_3_0=ruleunaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAltWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"t",
              	        		lv_t_3_0, 
              	        		"unaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulealtWhenClause


    // $ANTLR start entryRuleelseClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6937:1: entryRuleelseClause returns [EObject current=null] : iv_ruleelseClause= ruleelseClause EOF ;
    public final EObject entryRuleelseClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleelseClause = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6938:2: (iv_ruleelseClause= ruleelseClause EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6939:2: iv_ruleelseClause= ruleelseClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getElseClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleelseClause_in_entryRuleelseClause12980);
            iv_ruleelseClause=ruleelseClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleelseClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleelseClause12990); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleelseClause


    // $ANTLR start ruleelseClause
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6946:1: ruleelseClause returns [EObject current=null] : ( ruleELSE ( (lv_u_1_0= ruleunaryExpression ) ) ) ;
    public final EObject ruleelseClause() throws RecognitionException {
        EObject current = null;

        EObject lv_u_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6951:6: ( ( ruleELSE ( (lv_u_1_0= ruleunaryExpression ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6952:1: ( ruleELSE ( (lv_u_1_0= ruleunaryExpression ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6952:1: ( ruleELSE ( (lv_u_1_0= ruleunaryExpression ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6952:2: ruleELSE ( (lv_u_1_0= ruleunaryExpression ) )
            {
            pushFollow(FOLLOW_ruleELSE_in_ruleelseClause13024);
            ruleELSE();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6952:10: ( (lv_u_1_0= ruleunaryExpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6953:1: (lv_u_1_0= ruleunaryExpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6953:1: (lv_u_1_0= ruleunaryExpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6954:3: lv_u_1_0= ruleunaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getElseClauseAccess().getUUnaryExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleunaryExpression_in_ruleelseClause13037);
            lv_u_1_0=ruleunaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getElseClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"u",
              	        		lv_u_1_0, 
              	        		"unaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleelseClause


    // $ANTLR start entryRulequantifiedExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6984:1: entryRulequantifiedExpression returns [EObject current=null] : iv_rulequantifiedExpression= rulequantifiedExpression EOF ;
    public final EObject entryRulequantifiedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulequantifiedExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6985:2: (iv_rulequantifiedExpression= rulequantifiedExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6986:2: iv_rulequantifiedExpression= rulequantifiedExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getQuantifiedExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulequantifiedExpression_in_entryRulequantifiedExpression13073);
            iv_rulequantifiedExpression=rulequantifiedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulequantifiedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulequantifiedExpression13083); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulequantifiedExpression


    // $ANTLR start rulequantifiedExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6993:1: rulequantifiedExpression returns [EObject current=null] : ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) ) ) ;
    public final EObject rulequantifiedExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_s_8_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6998:6: ( ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6999:1: ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6999:1: ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6999:2: () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6999:2: ()
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7000:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7013:2: ( ruleSOME | ruleEXISTS | ruleALL | ruleANY )
            int alt94=4;
            switch ( input.LA(1) ) {
            case 201:
            case 202:
            case 203:
                {
                alt94=1;
                }
                break;
            case 204:
            case 205:
            case 206:
                {
                alt94=2;
                }
                break;
            case 207:
            case 208:
            case 209:
                {
                alt94=3;
                }
                break;
            case 210:
            case 211:
            case 212:
                {
                alt94=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7013:2: ( ruleSOME | ruleEXISTS | ruleALL | ruleANY )", 94, 0, input);

                throw nvae;
            }

            switch (alt94) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7013:3: ruleSOME
                    {
                    pushFollow(FOLLOW_ruleSOME_in_rulequantifiedExpression13130);
                    ruleSOME();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7014:6: ruleEXISTS
                    {
                    pushFollow(FOLLOW_ruleEXISTS_in_rulequantifiedExpression13137);
                    ruleEXISTS();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7015:6: ruleALL
                    {
                    pushFollow(FOLLOW_ruleALL_in_rulequantifiedExpression13144);
                    ruleALL();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7016:6: ruleANY
                    {
                    pushFollow(FOLLOW_ruleANY_in_rulequantifiedExpression13151);
                    ruleANY();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7016:14: ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) )
            int alt95=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 26:
            case 38:
            case 39:
            case 40:
            case 42:
            case 45:
            case 54:
            case 55:
            case 59:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
                {
                alt95=1;
                }
                break;
            case 125:
            case 126:
            case 127:
            case 228:
            case 229:
            case 230:
                {
                alt95=2;
                }
                break;
            case 43:
                {
                alt95=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7016:14: ( ruleidentifier | rulecollectionExpr | ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' ) )", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7016:15: ruleidentifier
                    {
                    pushFollow(FOLLOW_ruleidentifier_in_rulequantifiedExpression13154);
                    ruleidentifier();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7017:6: rulecollectionExpr
                    {
                    pushFollow(FOLLOW_rulecollectionExpr_in_rulequantifiedExpression13161);
                    rulecollectionExpr();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7018:6: ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7018:6: ( '(' ( (lv_s_8_0= ruleunionRule ) ) ')' )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7018:8: '(' ( (lv_s_8_0= ruleunionRule ) ) ')'
                    {
                    match(input,43,FOLLOW_43_in_rulequantifiedExpression13170); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getQuantifiedExpressionAccess().getLeftParenthesisKeyword_2_2_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7022:1: ( (lv_s_8_0= ruleunionRule ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7023:1: (lv_s_8_0= ruleunionRule )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7023:1: (lv_s_8_0= ruleunionRule )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7024:3: lv_s_8_0= ruleunionRule
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getSUnionRuleParserRuleCall_2_2_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleunionRule_in_rulequantifiedExpression13191);
                    lv_s_8_0=ruleunionRule();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQuantifiedExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_8_0, 
                      	        		"unionRule", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    match(input,44,FOLLOW_44_in_rulequantifiedExpression13201); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getQuantifiedExpressionAccess().getRightParenthesisKeyword_2_2_2(), null); 
                          
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulequantifiedExpression


    // $ANTLR start entryRuleatom
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7058:1: entryRuleatom returns [EObject current=null] : iv_ruleatom= ruleatom EOF ;
    public final EObject entryRuleatom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleatom = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7059:2: (iv_ruleatom= ruleatom EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7060:2: iv_ruleatom= ruleatom EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleatom_in_entryRuleatom13239);
            iv_ruleatom=ruleatom();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleatom; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleatom13249); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleatom


    // $ANTLR start ruleatom
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7067:1: ruleatom returns [EObject current=null] : (this_primaryExpression_0= ruleprimaryExpression ( ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? ) | ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' ) )* ) ;
    public final EObject ruleatom() throws RecognitionException {
        EObject current = null;

        EObject this_primaryExpression_0 = null;

        EObject lv_e_4_0 = null;

        EObject lv_exp_7_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7072:6: ( (this_primaryExpression_0= ruleprimaryExpression ( ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? ) | ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7073:1: (this_primaryExpression_0= ruleprimaryExpression ( ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? ) | ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7073:1: (this_primaryExpression_0= ruleprimaryExpression ( ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? ) | ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7074:2: this_primaryExpression_0= ruleprimaryExpression ( ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? ) | ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' ) )*
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getAtomAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleprimaryExpression_in_ruleatom13299);
            this_primaryExpression_0=ruleprimaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_primaryExpression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7085:1: ( ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? ) | ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' ) )*
            loop97:
            do {
                int alt97=3;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==36) ) {
                    alt97=1;
                }
                else if ( (LA97_0==32) ) {
                    alt97=2;
                }


                switch (alt97) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7085:2: ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7085:2: ( '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )? )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7085:4: '.' ruleidentifier ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )?
            	    {
            	    match(input,36,FOLLOW_36_in_ruleatom13310); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getAtomAccess().getFullStopKeyword_1_0_0(), null); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleidentifier_in_ruleatom13319);
            	    ruleidentifier();
            	    _fsp--;
            	    if (failed) return current;
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7089:15: ( '(' ( (lv_e_4_0= ruleexprList ) ) ')' )?
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==43) ) {
            	        alt96=1;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7089:17: '(' ( (lv_e_4_0= ruleexprList ) ) ')'
            	            {
            	            match(input,43,FOLLOW_43_in_ruleatom13322); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0_2_0(), null); 
            	                  
            	            }
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7093:1: ( (lv_e_4_0= ruleexprList ) )
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7094:1: (lv_e_4_0= ruleexprList )
            	            {
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7094:1: (lv_e_4_0= ruleexprList )
            	            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7095:3: lv_e_4_0= ruleexprList
            	            {
            	            if ( backtracking==0 ) {
            	               
            	              	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getEExprListParserRuleCall_1_0_2_1_0(), currentNode); 
            	              	    
            	            }
            	            pushFollow(FOLLOW_ruleexprList_in_ruleatom13343);
            	            lv_e_4_0=ruleexprList();
            	            _fsp--;
            	            if (failed) return current;
            	            if ( backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
            	              	            associateNodeWithAstElement(currentNode.getParent(), current);
            	              	        }
            	              	        try {
            	              	       		add(
            	              	       			current, 
            	              	       			"e",
            	              	        		lv_e_4_0, 
            	              	        		"exprList", 
            	              	        		currentNode);
            	              	        } catch (ValueConverterException vce) {
            	              				handleValueConverterException(vce);
            	              	        }
            	              	        currentNode = currentNode.getParent();
            	              	    
            	            }

            	            }


            	            }

            	            match(input,44,FOLLOW_44_in_ruleatom13353); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_0_2_2(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7122:6: ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7122:6: ( '[' ( (lv_exp_7_0= ruleexpression ) ) ']' )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7122:8: '[' ( (lv_exp_7_0= ruleexpression ) ) ']'
            	    {
            	    match(input,32,FOLLOW_32_in_ruleatom13373); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_1_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7126:1: ( (lv_exp_7_0= ruleexpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7127:1: (lv_exp_7_0= ruleexpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7127:1: (lv_exp_7_0= ruleexpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7128:3: lv_exp_7_0= ruleexpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExpExpressionParserRuleCall_1_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleexpression_in_ruleatom13394);
            	    lv_exp_7_0=ruleexpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"exp",
            	      	        		lv_exp_7_0, 
            	      	        		"expression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }

            	    match(input,33,FOLLOW_33_in_ruleatom13404); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_1_1_2(), null); 
            	          
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleatom


    // $ANTLR start entryRuleprimaryExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7162:1: entryRuleprimaryExpression returns [EObject current=null] : iv_ruleprimaryExpression= ruleprimaryExpression EOF ;
    public final EObject entryRuleprimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleprimaryExpression = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7163:2: (iv_ruleprimaryExpression= ruleprimaryExpression EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7164:2: iv_ruleprimaryExpression= ruleprimaryExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleprimaryExpression_in_entryRuleprimaryExpression13443);
            iv_ruleprimaryExpression=ruleprimaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleprimaryExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleprimaryExpression13453); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleprimaryExpression


    // $ANTLR start ruleprimaryExpression
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7171:1: ruleprimaryExpression returns [EObject current=null] : ( ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? ) | ruleconstant | ( ':' ruleidentifier ) | ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' ) | ( '?' ( RULE_INT )? ) ) ;
    public final EObject ruleprimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_ident_1_0 = null;

        EObject this_expressionOrVector_8 = null;

        EObject lv_s_9_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7176:6: ( ( ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? ) | ruleconstant | ( ':' ruleidentifier ) | ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' ) | ( '?' ( RULE_INT )? ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7177:1: ( ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? ) | ruleconstant | ( ':' ruleidentifier ) | ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' ) | ( '?' ( RULE_INT )? ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7177:1: ( ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? ) | ruleconstant | ( ':' ruleidentifier ) | ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' ) | ( '?' ( RULE_INT )? ) )
            int alt101=5;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 26:
            case 38:
            case 39:
            case 40:
            case 42:
            case 45:
            case 54:
            case 55:
            case 59:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 125:
            case 126:
            case 127:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
                {
                alt101=1;
                }
                break;
            case RULE_STRING:
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 17:
            case 18:
            case 36:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
                {
                alt101=2;
                }
                break;
            case 63:
                {
                alt101=3;
                }
                break;
            case 43:
                {
                alt101=4;
                }
                break;
            case 62:
                {
                alt101=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7177:1: ( ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? ) | ruleconstant | ( ':' ruleidentifier ) | ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' ) | ( '?' ( RULE_INT )? ) )", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7177:2: ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7177:2: ( () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7177:3: () ( (lv_ident_1_0= ruleidentPrimary ) ) ( '.' ruleCLASS )?
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7177:3: ()
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7178:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7191:2: ( (lv_ident_1_0= ruleidentPrimary ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7192:1: (lv_ident_1_0= ruleidentPrimary )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7192:1: (lv_ident_1_0= ruleidentPrimary )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7193:3: lv_ident_1_0= ruleidentPrimary
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentIdentPrimaryParserRuleCall_0_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleidentPrimary_in_ruleprimaryExpression13512);
                    lv_ident_1_0=ruleidentPrimary();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"ident",
                      	        		lv_ident_1_0, 
                      	        		"identPrimary", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7215:2: ( '.' ruleCLASS )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==36) ) {
                        int LA98_1 = input.LA(2);

                        if ( ((LA98_1>=122 && LA98_1<=124)) ) {
                            alt98=1;
                        }
                    }
                    switch (alt98) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7215:4: '.' ruleCLASS
                            {
                            match(input,36,FOLLOW_36_in_ruleprimaryExpression13523); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_2_0(), null); 
                                  
                            }
                            pushFollow(FOLLOW_ruleCLASS_in_ruleprimaryExpression13532);
                            ruleCLASS();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7220:6: ruleconstant
                    {
                    pushFollow(FOLLOW_ruleconstant_in_ruleprimaryExpression13542);
                    ruleconstant();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7221:6: ( ':' ruleidentifier )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7221:6: ( ':' ruleidentifier )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7221:8: ':' ruleidentifier
                    {
                    match(input,63,FOLLOW_63_in_ruleprimaryExpression13551); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getColonKeyword_2_0(), null); 
                          
                    }
                    pushFollow(FOLLOW_ruleidentifier_in_ruleprimaryExpression13560);
                    ruleidentifier();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7226:6: ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7226:6: ( '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')' )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7226:8: '(' (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) ) ')'
                    {
                    match(input,43,FOLLOW_43_in_ruleprimaryExpression13570); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7230:1: (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) )
                    int alt99=2;
                    alt99 = dfa99.predict(input);
                    switch (alt99) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7231:2: this_expressionOrVector_8= ruleexpressionOrVector
                            {
                            if ( backtracking==0 ) {
                               
                              	  /* */ 
                              	
                            }
                            if ( backtracking==0 ) {
                               
                                      currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionOrVectorParserRuleCall_3_1_0(), currentNode); 
                                  
                            }
                            pushFollow(FOLLOW_ruleexpressionOrVector_in_ruleprimaryExpression13596);
                            this_expressionOrVector_8=ruleexpressionOrVector();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {
                               
                                      current = this_expressionOrVector_8; 
                                      currentNode = currentNode.getParent();
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7243:6: ( (lv_s_9_0= ruleunionRule ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7243:6: ( (lv_s_9_0= ruleunionRule ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7244:1: (lv_s_9_0= ruleunionRule )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7244:1: (lv_s_9_0= ruleunionRule )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7245:3: lv_s_9_0= ruleunionRule
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSUnionRuleParserRuleCall_3_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleunionRule_in_ruleprimaryExpression13622);
                            lv_s_9_0=ruleunionRule();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"s",
                              	        		lv_s_9_0, 
                              	        		"unionRule", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }
                            break;

                    }

                    match(input,44,FOLLOW_44_in_ruleprimaryExpression13633); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
                          
                    }

                    }


                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7272:6: ( '?' ( RULE_INT )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7272:6: ( '?' ( RULE_INT )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7272:8: '?' ( RULE_INT )?
                    {
                    match(input,62,FOLLOW_62_in_ruleprimaryExpression13651); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getQuestionMarkKeyword_4_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7276:1: ( RULE_INT )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==RULE_INT) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7276:2: RULE_INT
                            {
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleprimaryExpression13661); if (failed) return current;
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getPrimaryExpressionAccess().getINTTerminalRuleCall_4_1(), null); 
                                  
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleprimaryExpression


    // $ANTLR start entryRuleexpressionOrVector
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7288:1: entryRuleexpressionOrVector returns [EObject current=null] : iv_ruleexpressionOrVector= ruleexpressionOrVector EOF ;
    public final EObject entryRuleexpressionOrVector() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleexpressionOrVector = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7289:2: (iv_ruleexpressionOrVector= ruleexpressionOrVector EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7290:2: iv_ruleexpressionOrVector= ruleexpressionOrVector EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getExpressionOrVectorRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleexpressionOrVector_in_entryRuleexpressionOrVector13699);
            iv_ruleexpressionOrVector=ruleexpressionOrVector();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleexpressionOrVector; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleexpressionOrVector13709); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleexpressionOrVector


    // $ANTLR start ruleexpressionOrVector
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7297:1: ruleexpressionOrVector returns [EObject current=null] : (this_expression_0= ruleexpression ( (lv_v_1_0= rulevectorExpr ) )? ) ;
    public final EObject ruleexpressionOrVector() throws RecognitionException {
        EObject current = null;

        EObject this_expression_0 = null;

        EObject lv_v_1_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7302:6: ( (this_expression_0= ruleexpression ( (lv_v_1_0= rulevectorExpr ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7303:1: (this_expression_0= ruleexpression ( (lv_v_1_0= rulevectorExpr ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7303:1: (this_expression_0= ruleexpression ( (lv_v_1_0= rulevectorExpr ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7304:2: this_expression_0= ruleexpression ( (lv_v_1_0= rulevectorExpr ) )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getExpressionOrVectorAccess().getExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleexpression_in_ruleexpressionOrVector13759);
            this_expression_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_expression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7315:1: ( (lv_v_1_0= rulevectorExpr ) )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==28) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7316:1: (lv_v_1_0= rulevectorExpr )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7316:1: (lv_v_1_0= rulevectorExpr )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7317:3: lv_v_1_0= rulevectorExpr
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getExpressionOrVectorAccess().getVVectorExprParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulevectorExpr_in_ruleexpressionOrVector13779);
                    lv_v_1_0=rulevectorExpr();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getExpressionOrVectorRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"v",
                      	        		lv_v_1_0, 
                      	        		"vectorExpr", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleexpressionOrVector


    // $ANTLR start entryRulevectorExpr
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7347:1: entryRulevectorExpr returns [EObject current=null] : iv_rulevectorExpr= rulevectorExpr EOF ;
    public final EObject entryRulevectorExpr() throws RecognitionException {
        EObject current = null;

        EObject iv_rulevectorExpr = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7348:2: (iv_rulevectorExpr= rulevectorExpr EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7349:2: iv_rulevectorExpr= rulevectorExpr EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getVectorExprRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulevectorExpr_in_entryRulevectorExpr13816);
            iv_rulevectorExpr=rulevectorExpr();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulevectorExpr; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulevectorExpr13826); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulevectorExpr


    // $ANTLR start rulevectorExpr
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7356:1: rulevectorExpr returns [EObject current=null] : ( ',' ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ) ;
    public final EObject rulevectorExpr() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;

        EObject lv_e_3_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7361:6: ( ( ',' ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7362:1: ( ',' ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7362:1: ( ',' ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7362:3: ',' ( (lv_e_1_0= ruleexpression ) ) ( ',' ( (lv_e_3_0= ruleexpression ) ) )*
            {
            match(input,28,FOLLOW_28_in_rulevectorExpr13861); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getVectorExprAccess().getCommaKeyword_0(), null); 
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7366:1: ( (lv_e_1_0= ruleexpression ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7367:1: (lv_e_1_0= ruleexpression )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7367:1: (lv_e_1_0= ruleexpression )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7368:3: lv_e_1_0= ruleexpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleexpression_in_rulevectorExpr13882);
            lv_e_1_0=ruleexpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getVectorExprRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7390:2: ( ',' ( (lv_e_3_0= ruleexpression ) ) )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==28) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7390:4: ',' ( (lv_e_3_0= ruleexpression ) )
            	    {
            	    match(input,28,FOLLOW_28_in_rulevectorExpr13893); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getVectorExprAccess().getCommaKeyword_2_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7394:1: ( (lv_e_3_0= ruleexpression ) )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7395:1: (lv_e_3_0= ruleexpression )
            	    {
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7395:1: (lv_e_3_0= ruleexpression )
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7396:3: lv_e_3_0= ruleexpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleexpression_in_rulevectorExpr13914);
            	    lv_e_3_0=ruleexpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getVectorExprRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"e",
            	      	        		lv_e_3_0, 
            	      	        		"expression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulevectorExpr


    // $ANTLR start entryRuleidentPrimary
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7426:1: entryRuleidentPrimary returns [EObject current=null] : iv_ruleidentPrimary= ruleidentPrimary EOF ;
    public final EObject entryRuleidentPrimary() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleidentPrimary = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7427:2: (iv_ruleidentPrimary= ruleidentPrimary EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7428:2: iv_ruleidentPrimary= ruleidentPrimary EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIdentPrimaryRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleidentPrimary_in_entryRuleidentPrimary13952);
            iv_ruleidentPrimary=ruleidentPrimary();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleidentPrimary; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleidentPrimary13962); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleidentPrimary


    // $ANTLR start ruleidentPrimary
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7435:1: ruleidentPrimary returns [EObject current=null] : ( ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? ) | this_aggregate_11= ruleaggregate ) ;
    public final EObject ruleidentPrimary() throws RecognitionException {
        EObject current = null;

        EObject lv_e_9_0 = null;

        EObject this_aggregate_11 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7440:6: ( ( ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? ) | this_aggregate_11= ruleaggregate ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7441:1: ( ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? ) | this_aggregate_11= ruleaggregate )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7441:1: ( ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? ) | this_aggregate_11= ruleaggregate )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==RULE_ID||LA106_0==26||(LA106_0>=38 && LA106_0<=40)||LA106_0==42||LA106_0==45||(LA106_0>=54 && LA106_0<=55)||LA106_0==59||(LA106_0>=75 && LA106_0<=78)||(LA106_0>=92 && LA106_0<=94)||(LA106_0>=177 && LA106_0<=179)||(LA106_0>=189 && LA106_0<=194)) ) {
                alt106=1;
            }
            else if ( ((LA106_0>=125 && LA106_0<=127)||(LA106_0>=213 && LA106_0<=230)) ) {
                alt106=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7441:1: ( ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? ) | this_aggregate_11= ruleaggregate )", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7441:2: ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7441:2: ( () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7441:3: () ruleidentifier ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )?
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7441:3: ()
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7442:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    pushFollow(FOLLOW_ruleidentifier_in_ruleidentPrimary14009);
                    ruleidentifier();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:16: ( ( '.' ruleidentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )*
                    loop104:
                    do {
                        int alt104=4;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==36) ) {
                            switch ( input.LA(2) ) {
                            case 125:
                            case 126:
                            case 127:
                                {
                                alt104=2;
                                }
                                break;
                            case 75:
                                {
                                int LA104_4 = input.LA(3);

                                if ( (LA104_4==RULE_ID) ) {
                                    int LA104_5 = input.LA(4);

                                    if ( (synpred177()) ) {
                                        alt104=1;
                                    }


                                }


                                }
                                break;
                            case RULE_ID:
                                {
                                int LA104_5 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 76:
                                {
                                int LA104_6 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 77:
                                {
                                int LA104_7 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 78:
                                {
                                int LA104_8 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 42:
                                {
                                int LA104_9 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 45:
                                {
                                int LA104_10 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 54:
                                {
                                int LA104_11 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 55:
                                {
                                int LA104_12 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 26:
                                {
                                int LA104_13 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 38:
                                {
                                int LA104_14 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 40:
                                {
                                int LA104_15 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 39:
                                {
                                int LA104_16 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 59:
                                {
                                int LA104_17 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 189:
                                {
                                int LA104_18 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 190:
                                {
                                int LA104_19 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 191:
                                {
                                int LA104_20 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 192:
                                {
                                int LA104_21 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 193:
                                {
                                int LA104_22 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 194:
                                {
                                int LA104_23 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 92:
                                {
                                int LA104_24 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 93:
                                {
                                int LA104_25 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 94:
                                {
                                int LA104_26 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 177:
                                {
                                int LA104_27 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 178:
                                {
                                int LA104_28 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 179:
                                {
                                int LA104_29 = input.LA(3);

                                if ( (synpred177()) ) {
                                    alt104=1;
                                }


                                }
                                break;
                            case 89:
                            case 90:
                            case 91:
                                {
                                alt104=3;
                                }
                                break;

                            }

                        }


                        switch (alt104) {
                    	case 1 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:17: ( '.' ruleidentifier )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:17: ( '.' ruleidentifier )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:19: '.' ruleidentifier
                    	    {
                    	    match(input,36,FOLLOW_36_in_ruleidentPrimary14013); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_0_0(), null); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleidentifier_in_ruleidentPrimary14022);
                    	    ruleidentifier();
                    	    _fsp--;
                    	    if (failed) return current;

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7460:6: ( '.' ruleELEMENTS )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7460:6: ( '.' ruleELEMENTS )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7460:8: '.' ruleELEMENTS
                    	    {
                    	    match(input,36,FOLLOW_36_in_ruleidentPrimary14032); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_1_0(), null); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleELEMENTS_in_ruleidentPrimary14041);
                    	    ruleELEMENTS();
                    	    _fsp--;
                    	    if (failed) return current;

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7465:6: ( '.' ruleOBJECT )
                    	    {
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7465:6: ( '.' ruleOBJECT )
                    	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7465:8: '.' ruleOBJECT
                    	    {
                    	    match(input,36,FOLLOW_36_in_ruleidentPrimary14051); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_2_0(), null); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleOBJECT_in_ruleidentPrimary14060);
                    	    ruleOBJECT();
                    	    _fsp--;
                    	    if (failed) return current;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop104;
                        }
                    } while (true);

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7469:14: ( '(' ( (lv_e_9_0= ruleexprList ) ) ')' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==43) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7469:16: '(' ( (lv_e_9_0= ruleexprList ) ) ')'
                            {
                            match(input,43,FOLLOW_43_in_ruleidentPrimary14066); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getIdentPrimaryAccess().getLeftParenthesisKeyword_0_3_0(), null); 
                                  
                            }
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7473:1: ( (lv_e_9_0= ruleexprList ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7474:1: (lv_e_9_0= ruleexprList )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7474:1: (lv_e_9_0= ruleexprList )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7475:3: lv_e_9_0= ruleexprList
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getIdentPrimaryAccess().getEExprListParserRuleCall_0_3_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleexprList_in_ruleidentPrimary14087);
                            lv_e_9_0=ruleexprList();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getIdentPrimaryRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_9_0, 
                              	        		"exprList", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }

                            match(input,44,FOLLOW_44_in_ruleidentPrimary14097); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getIdentPrimaryAccess().getRightParenthesisKeyword_0_3_2(), null); 
                                  
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7503:2: this_aggregate_11= ruleaggregate
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentPrimaryAccess().getAggregateParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleaggregate_in_ruleidentPrimary14131);
                    this_aggregate_11=ruleaggregate();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_aggregate_11; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleidentPrimary


    // $ANTLR start entryRuleaggregate
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7522:1: entryRuleaggregate returns [EObject current=null] : iv_ruleaggregate= ruleaggregate EOF ;
    public final EObject entryRuleaggregate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleaggregate = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7523:2: (iv_ruleaggregate= ruleaggregate EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7524:2: iv_ruleaggregate= ruleaggregate EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAggregateRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleaggregate_in_entryRuleaggregate14166);
            iv_ruleaggregate=ruleaggregate();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleaggregate; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleaggregate14176); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleaggregate


    // $ANTLR start ruleaggregate
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7531:1: ruleaggregate returns [EObject current=null] : ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' ) | ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' ) | rulecollectionExpr ) ;
    public final EObject ruleaggregate() throws RecognitionException {
        EObject current = null;

        EObject lv_a_6_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7536:6: ( ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' ) | ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' ) | rulecollectionExpr ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7537:1: ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' ) | ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' ) | rulecollectionExpr )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7537:1: ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' ) | ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' ) | rulecollectionExpr )
            int alt111=3;
            switch ( input.LA(1) ) {
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
                {
                alt111=1;
                }
                break;
            case 225:
            case 226:
            case 227:
                {
                alt111=2;
                }
                break;
            case 125:
            case 126:
            case 127:
            case 228:
            case 229:
            case 230:
                {
                alt111=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7537:1: ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' ) | ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' ) | rulecollectionExpr )", 111, 0, input);

                throw nvae;
            }

            switch (alt111) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7537:2: ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7537:2: ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')' )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7537:3: () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleadditiveExpression ) ) ')'
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7537:3: ()
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7538:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getAggregateAccess().getAggregateAction_0_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getAggregateAccess().getAggregateAction_0_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7551:2: ( ruleSUM | ruleAVG | ruleMAX | ruleMIN )
                    int alt107=4;
                    switch ( input.LA(1) ) {
                    case 213:
                    case 214:
                    case 215:
                        {
                        alt107=1;
                        }
                        break;
                    case 216:
                    case 217:
                    case 218:
                        {
                        alt107=2;
                        }
                        break;
                    case 219:
                    case 220:
                    case 221:
                        {
                        alt107=3;
                        }
                        break;
                    case 222:
                    case 223:
                    case 224:
                        {
                        alt107=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("7551:2: ( ruleSUM | ruleAVG | ruleMAX | ruleMIN )", 107, 0, input);

                        throw nvae;
                    }

                    switch (alt107) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7551:3: ruleSUM
                            {
                            pushFollow(FOLLOW_ruleSUM_in_ruleaggregate14224);
                            ruleSUM();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7552:6: ruleAVG
                            {
                            pushFollow(FOLLOW_ruleAVG_in_ruleaggregate14231);
                            ruleAVG();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7553:6: ruleMAX
                            {
                            pushFollow(FOLLOW_ruleMAX_in_ruleaggregate14238);
                            ruleMAX();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 4 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7554:6: ruleMIN
                            {
                            pushFollow(FOLLOW_ruleMIN_in_ruleaggregate14245);
                            ruleMIN();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    match(input,43,FOLLOW_43_in_ruleaggregate14248); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_0_2(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7558:1: ( (lv_a_6_0= ruleadditiveExpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7559:1: (lv_a_6_0= ruleadditiveExpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7559:1: (lv_a_6_0= ruleadditiveExpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7560:3: lv_a_6_0= ruleadditiveExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getAggregateAccess().getAAdditiveExpressionParserRuleCall_0_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleadditiveExpression_in_ruleaggregate14269);
                    lv_a_6_0=ruleadditiveExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getAggregateRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"a",
                      	        		lv_a_6_0, 
                      	        		"additiveExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    match(input,44,FOLLOW_44_in_ruleaggregate14279); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_0_4(), null); 
                          
                    }

                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7587:6: ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7587:6: ( ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')' )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7587:7: ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) ) ')'
                    {
                    pushFollow(FOLLOW_ruleCOUNT_in_ruleaggregate14296);
                    ruleCOUNT();
                    _fsp--;
                    if (failed) return current;
                    match(input,43,FOLLOW_43_in_ruleaggregate14298); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1_1(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7591:1: ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) )
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==73) ) {
                        alt110=1;
                    }
                    else if ( (LA110_0==RULE_ID||LA110_0==26||(LA110_0>=38 && LA110_0<=40)||LA110_0==42||LA110_0==45||(LA110_0>=54 && LA110_0<=55)||LA110_0==59||(LA110_0>=75 && LA110_0<=78)||(LA110_0>=83 && LA110_0<=85)||(LA110_0>=92 && LA110_0<=94)||(LA110_0>=125 && LA110_0<=127)||(LA110_0>=177 && LA110_0<=179)||(LA110_0>=189 && LA110_0<=194)||(LA110_0>=207 && LA110_0<=209)||(LA110_0>=228 && LA110_0<=230)) ) {
                        alt110=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("7591:1: ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) ) )", 110, 0, input);

                        throw nvae;
                    }
                    switch (alt110) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7591:3: '*'
                            {
                            match(input,73,FOLLOW_73_in_ruleaggregate14309); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getAggregateAccess().getAsteriskKeyword_1_2_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7596:6: ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7596:6: ( ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7596:7: ( ruleDISTINCT | ruleALL )? ( rulepath | rulecollectionExpr )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7596:7: ( ruleDISTINCT | ruleALL )?
                            int alt108=3;
                            int LA108_0 = input.LA(1);

                            if ( ((LA108_0>=83 && LA108_0<=85)) ) {
                                alt108=1;
                            }
                            else if ( ((LA108_0>=207 && LA108_0<=209)) ) {
                                alt108=2;
                            }
                            switch (alt108) {
                                case 1 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7596:8: ruleDISTINCT
                                    {
                                    pushFollow(FOLLOW_ruleDISTINCT_in_ruleaggregate14326);
                                    ruleDISTINCT();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:6: ruleALL
                                    {
                                    pushFollow(FOLLOW_ruleALL_in_ruleaggregate14333);
                                    ruleALL();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;

                            }

                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:15: ( rulepath | rulecollectionExpr )
                            int alt109=2;
                            int LA109_0 = input.LA(1);

                            if ( (LA109_0==RULE_ID||LA109_0==26||(LA109_0>=38 && LA109_0<=40)||LA109_0==42||LA109_0==45||(LA109_0>=54 && LA109_0<=55)||LA109_0==59||(LA109_0>=75 && LA109_0<=78)||(LA109_0>=92 && LA109_0<=94)||(LA109_0>=177 && LA109_0<=179)||(LA109_0>=189 && LA109_0<=194)) ) {
                                alt109=1;
                            }
                            else if ( ((LA109_0>=125 && LA109_0<=127)||(LA109_0>=228 && LA109_0<=230)) ) {
                                alt109=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7597:15: ( rulepath | rulecollectionExpr )", 109, 0, input);

                                throw nvae;
                            }
                            switch (alt109) {
                                case 1 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:16: rulepath
                                    {
                                    pushFollow(FOLLOW_rulepath_in_ruleaggregate14337);
                                    rulepath();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7598:6: rulecollectionExpr
                                    {
                                    pushFollow(FOLLOW_rulecollectionExpr_in_ruleaggregate14344);
                                    rulecollectionExpr();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    match(input,44,FOLLOW_44_in_ruleaggregate14349); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_1_3(), null); 
                          
                    }

                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7603:6: rulecollectionExpr
                    {
                    pushFollow(FOLLOW_rulecollectionExpr_in_ruleaggregate14365);
                    rulecollectionExpr();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleaggregate


    // $ANTLR start entryRulecollectionExpr
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7611:1: entryRulecollectionExpr returns [String current=null] : iv_rulecollectionExpr= rulecollectionExpr EOF ;
    public final String entryRulecollectionExpr() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulecollectionExpr = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7612:2: (iv_rulecollectionExpr= rulecollectionExpr EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7613:2: iv_rulecollectionExpr= rulecollectionExpr EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCollectionExprRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecollectionExpr_in_entryRulecollectionExpr14394);
            iv_rulecollectionExpr=rulecollectionExpr();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecollectionExpr.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecollectionExpr14405); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecollectionExpr


    // $ANTLR start rulecollectionExpr
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7620:1: rulecollectionExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_path_3= rulepath kw= ')' ) ;
    public final AntlrDatatypeRuleToken rulecollectionExpr() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_ELEMENTS_0 = null;

        AntlrDatatypeRuleToken this_INDICES_1 = null;

        AntlrDatatypeRuleToken this_path_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7625:6: ( ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_path_3= rulepath kw= ')' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7626:1: ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_path_3= rulepath kw= ')' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7626:1: ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_path_3= rulepath kw= ')' )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7626:2: (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_path_3= rulepath kw= ')'
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7626:2: (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( ((LA112_0>=125 && LA112_0<=127)) ) {
                alt112=1;
            }
            else if ( ((LA112_0>=228 && LA112_0<=230)) ) {
                alt112=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7626:2: (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES )", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7627:5: this_ELEMENTS_0= ruleELEMENTS
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getELEMENTSParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleELEMENTS_in_rulecollectionExpr14453);
                    this_ELEMENTS_0=ruleELEMENTS();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ELEMENTS_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7639:5: this_INDICES_1= ruleINDICES
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getINDICESParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleINDICES_in_rulecollectionExpr14486);
                    this_INDICES_1=ruleINDICES();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_INDICES_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }

            kw=(Token)input.LT(1);
            match(input,43,FOLLOW_43_in_rulecollectionExpr14505); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getCollectionExprAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getPathParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulepath_in_rulecollectionExpr14527);
            this_path_3=rulepath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_path_3);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            kw=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_rulecollectionExpr14545); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getCollectionExprAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecollectionExpr


    // $ANTLR start entryRulecompoundExpr
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7680:1: entryRulecompoundExpr returns [EObject current=null] : iv_rulecompoundExpr= rulecompoundExpr EOF ;
    public final EObject entryRulecompoundExpr() throws RecognitionException {
        EObject current = null;

        EObject iv_rulecompoundExpr = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7681:2: (iv_rulecompoundExpr= rulecompoundExpr EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7682:2: iv_rulecompoundExpr= rulecompoundExpr EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCompoundExprRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulecompoundExpr_in_entryRulecompoundExpr14585);
            iv_rulecompoundExpr=rulecompoundExpr();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulecompoundExpr; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulecompoundExpr14595); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulecompoundExpr


    // $ANTLR start rulecompoundExpr
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7689:1: rulecompoundExpr returns [EObject current=null] : ( rulecollectionExpr | rulepath | ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' ) ) ;
    public final EObject rulecompoundExpr() throws RecognitionException {
        EObject current = null;

        EObject lv_e_3_0 = null;

        EObject lv_e_5_0 = null;

        EObject lv_s_6_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7694:6: ( ( rulecollectionExpr | rulepath | ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7695:1: ( rulecollectionExpr | rulepath | ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7695:1: ( rulecollectionExpr | rulepath | ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' ) )
            int alt115=3;
            switch ( input.LA(1) ) {
            case 125:
            case 126:
            case 127:
            case 228:
            case 229:
            case 230:
                {
                alt115=1;
                }
                break;
            case RULE_ID:
            case 26:
            case 38:
            case 39:
            case 40:
            case 42:
            case 45:
            case 54:
            case 55:
            case 59:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
                {
                alt115=2;
                }
                break;
            case 43:
                {
                alt115=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7695:1: ( rulecollectionExpr | rulepath | ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' ) )", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7695:2: rulecollectionExpr
                    {
                    pushFollow(FOLLOW_rulecollectionExpr_in_rulecompoundExpr14629);
                    rulecollectionExpr();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7696:6: rulepath
                    {
                    pushFollow(FOLLOW_rulepath_in_rulecompoundExpr14636);
                    rulepath();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7697:6: ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7697:6: ( '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')' )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7697:8: '(' ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) ) ')'
                    {
                    match(input,43,FOLLOW_43_in_rulecompoundExpr14645); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCompoundExprAccess().getLeftParenthesisKeyword_2_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:1: ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) )
                    int alt114=2;
                    alt114 = dfa114.predict(input);
                    switch (alt114) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:2: ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:2: ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:3: ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )*
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:3: ( (lv_e_3_0= ruleexpression ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7702:1: (lv_e_3_0= ruleexpression )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7702:1: (lv_e_3_0= ruleexpression )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7703:3: lv_e_3_0= ruleexpression
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleexpression_in_rulecompoundExpr14668);
                            lv_e_3_0=ruleexpression();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		add(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_3_0, 
                              	        		"expression", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }

                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7725:2: ( ',' ( (lv_e_5_0= ruleexpression ) ) )*
                            loop113:
                            do {
                                int alt113=2;
                                int LA113_0 = input.LA(1);

                                if ( (LA113_0==28) ) {
                                    alt113=1;
                                }


                                switch (alt113) {
                            	case 1 :
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7725:4: ',' ( (lv_e_5_0= ruleexpression ) )
                            	    {
                            	    match(input,28,FOLLOW_28_in_rulecompoundExpr14679); if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	              createLeafNode(grammarAccess.getCompoundExprAccess().getCommaKeyword_2_1_0_1_0(), null); 
                            	          
                            	    }
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7729:1: ( (lv_e_5_0= ruleexpression ) )
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7730:1: (lv_e_5_0= ruleexpression )
                            	    {
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7730:1: (lv_e_5_0= ruleexpression )
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7731:3: lv_e_5_0= ruleexpression
                            	    {
                            	    if ( backtracking==0 ) {
                            	       
                            	      	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0(), currentNode); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleexpression_in_rulecompoundExpr14700);
                            	    lv_e_5_0=ruleexpression();
                            	    _fsp--;
                            	    if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
                            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                            	      	        }
                            	      	        try {
                            	      	       		add(
                            	      	       			current, 
                            	      	       			"e",
                            	      	        		lv_e_5_0, 
                            	      	        		"expression", 
                            	      	        		currentNode);
                            	      	        } catch (ValueConverterException vce) {
                            	      				handleValueConverterException(vce);
                            	      	        }
                            	      	        currentNode = currentNode.getParent();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop113;
                                }
                            } while (true);


                            }


                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7754:6: ( (lv_s_6_0= ruleunionRule ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7754:6: ( (lv_s_6_0= ruleunionRule ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7755:1: (lv_s_6_0= ruleunionRule )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7755:1: (lv_s_6_0= ruleunionRule )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7756:3: lv_s_6_0= ruleunionRule
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getSUnionRuleParserRuleCall_2_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleunionRule_in_rulecompoundExpr14730);
                            lv_s_6_0=ruleunionRule();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"s",
                              	        		lv_s_6_0, 
                              	        		"unionRule", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }
                            break;

                    }

                    match(input,44,FOLLOW_44_in_rulecompoundExpr14741); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCompoundExprAccess().getRightParenthesisKeyword_2_2(), null); 
                          
                    }

                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulecompoundExpr


    // $ANTLR start entryRuleexprList
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7790:1: entryRuleexprList returns [EObject current=null] : iv_ruleexprList= ruleexprList EOF ;
    public final EObject entryRuleexprList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleexprList = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7791:2: (iv_ruleexprList= ruleexprList EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7792:2: iv_ruleexprList= ruleexprList EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getExprListRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleexprList_in_entryRuleexprList14778);
            iv_ruleexprList=ruleexprList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleexprList; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleexprList14788); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleexprList


    // $ANTLR start ruleexprList
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7799:1: ruleexprList returns [EObject current=null] : ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) ) )? ) ;
    public final EObject ruleexprList() throws RecognitionException {
        EObject current = null;

        EObject lv_e_3_0 = null;

        EObject lv_e_5_0 = null;

        EObject lv_e_7_0 = null;

        AntlrDatatypeRuleToken lv_id_9_0 = null;

        EObject lv_e_11_0 = null;


         @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7804:6: ( ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) ) )? ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:1: ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) ) )? )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:1: ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) ) )? )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:2: ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) ) )?
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:2: ( ruleTRAILING | ruleLEADING | ruleBOTH )?
            int alt116=4;
            switch ( input.LA(1) ) {
                case 231:
                case 232:
                case 233:
                    {
                    alt116=1;
                    }
                    break;
                case 234:
                case 235:
                case 236:
                    {
                    alt116=2;
                    }
                    break;
                case 237:
                case 238:
                case 239:
                    {
                    alt116=3;
                    }
                    break;
            }

            switch (alt116) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:3: ruleTRAILING
                    {
                    pushFollow(FOLLOW_ruleTRAILING_in_ruleexprList14823);
                    ruleTRAILING();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7806:6: ruleLEADING
                    {
                    pushFollow(FOLLOW_ruleLEADING_in_ruleexprList14830);
                    ruleLEADING();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:6: ruleBOTH
                    {
                    pushFollow(FOLLOW_ruleBOTH_in_ruleexprList14837);
                    ruleBOTH();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:16: ( ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) ) )?
            int alt119=3;
            switch ( input.LA(1) ) {
                case RULE_ID:
                case RULE_STRING:
                case RULE_INT:
                case RULE_SIGNED_INT:
                case RULE_HEX:
                case 16:
                case 17:
                case 18:
                case 26:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 43:
                case 45:
                case 54:
                case 55:
                case 56:
                case 57:
                case 59:
                case 62:
                case 63:
                case 75:
                case 76:
                case 77:
                case 78:
                case 125:
                case 126:
                case 127:
                case 167:
                case 168:
                case 177:
                case 178:
                case 179:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                    {
                    alt119=1;
                    }
                    break;
                case 92:
                    {
                    int LA119_41 = input.LA(2);

                    if ( (synpred203()) ) {
                        alt119=1;
                    }
                    else if ( (synpred204()) ) {
                        alt119=2;
                    }
                    }
                    break;
                case 93:
                    {
                    int LA119_42 = input.LA(2);

                    if ( (synpred203()) ) {
                        alt119=1;
                    }
                    else if ( (synpred204()) ) {
                        alt119=2;
                    }
                    }
                    break;
                case 94:
                    {
                    int LA119_43 = input.LA(2);

                    if ( (synpred203()) ) {
                        alt119=1;
                    }
                    else if ( (synpred204()) ) {
                        alt119=2;
                    }
                    }
                    break;
            }

            switch (alt119) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:17: ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:17: ( ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:18: ( (lv_e_3_0= ruleexpression ) ) ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )?
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:18: ( (lv_e_3_0= ruleexpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7808:1: (lv_e_3_0= ruleexpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7808:1: (lv_e_3_0= ruleexpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7809:3: lv_e_3_0= ruleexpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleexpression_in_ruleexprList14854);
                    lv_e_3_0=ruleexpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"e",
                      	        		lv_e_3_0, 
                      	        		"expression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:2: ( ( ',' ( (lv_e_5_0= ruleexpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) ) )?
                    int alt118=4;
                    switch ( input.LA(1) ) {
                        case 28:
                            {
                            alt118=1;
                            }
                            break;
                        case 92:
                        case 93:
                        case 94:
                            {
                            alt118=2;
                            }
                            break;
                        case 128:
                        case 129:
                        case 130:
                            {
                            alt118=3;
                            }
                            break;
                    }

                    switch (alt118) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:3: ( ',' ( (lv_e_5_0= ruleexpression ) ) )+
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:3: ( ',' ( (lv_e_5_0= ruleexpression ) ) )+
                            int cnt117=0;
                            loop117:
                            do {
                                int alt117=2;
                                int LA117_0 = input.LA(1);

                                if ( (LA117_0==28) ) {
                                    alt117=1;
                                }


                                switch (alt117) {
                            	case 1 :
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:5: ',' ( (lv_e_5_0= ruleexpression ) )
                            	    {
                            	    match(input,28,FOLLOW_28_in_ruleexprList14866); if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	              createLeafNode(grammarAccess.getExprListAccess().getCommaKeyword_1_0_1_0_0(), null); 
                            	          
                            	    }
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7835:1: ( (lv_e_5_0= ruleexpression ) )
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7836:1: (lv_e_5_0= ruleexpression )
                            	    {
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7836:1: (lv_e_5_0= ruleexpression )
                            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7837:3: lv_e_5_0= ruleexpression
                            	    {
                            	    if ( backtracking==0 ) {
                            	       
                            	      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0(), currentNode); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleexpression_in_ruleexprList14887);
                            	    lv_e_5_0=ruleexpression();
                            	    _fsp--;
                            	    if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                            	      	        }
                            	      	        try {
                            	      	       		add(
                            	      	       			current, 
                            	      	       			"e",
                            	      	        		lv_e_5_0, 
                            	      	        		"expression", 
                            	      	        		currentNode);
                            	      	        } catch (ValueConverterException vce) {
                            	      				handleValueConverterException(vce);
                            	      	        }
                            	      	        currentNode = currentNode.getParent();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt117 >= 1 ) break loop117;
                            	    if (backtracking>0) {failed=true; return current;}
                                        EarlyExitException eee =
                                            new EarlyExitException(117, input);
                                        throw eee;
                                }
                                cnt117++;
                            } while (true);


                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:6: ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:6: ( ruleFROM ( (lv_e_7_0= ruleexpression ) ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:7: ruleFROM ( (lv_e_7_0= ruleexpression ) )
                            {
                            pushFollow(FOLLOW_ruleFROM_in_ruleexprList14905);
                            ruleFROM();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:15: ( (lv_e_7_0= ruleexpression ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7861:1: (lv_e_7_0= ruleexpression )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7861:1: (lv_e_7_0= ruleexpression )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7862:3: lv_e_7_0= ruleexpression
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleexpression_in_ruleexprList14918);
                            lv_e_7_0=ruleexpression();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		add(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_7_0, 
                              	        		"expression", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:6: ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:6: ( ruleAS ( (lv_id_9_0= ruleidentifier ) ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:7: ruleAS ( (lv_id_9_0= ruleidentifier ) )
                            {
                            pushFollow(FOLLOW_ruleAS_in_ruleexprList14935);
                            ruleAS();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:13: ( (lv_id_9_0= ruleidentifier ) )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7886:1: (lv_id_9_0= ruleidentifier )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7886:1: (lv_id_9_0= ruleidentifier )
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7887:3: lv_id_9_0= ruleidentifier
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleidentifier_in_ruleexprList14948);
                            lv_id_9_0=ruleidentifier();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"id",
                              	        		lv_id_9_0, 
                              	        		"identifier", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:6: ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:6: ( ruleFROM ( (lv_e_11_0= ruleexpression ) ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:7: ruleFROM ( (lv_e_11_0= ruleexpression ) )
                    {
                    pushFollow(FOLLOW_ruleFROM_in_ruleexprList14968);
                    ruleFROM();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:15: ( (lv_e_11_0= ruleexpression ) )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7911:1: (lv_e_11_0= ruleexpression )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7911:1: (lv_e_11_0= ruleexpression )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7912:3: lv_e_11_0= ruleexpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleexpression_in_ruleexprList14981);
                    lv_e_11_0=ruleexpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"e",
                      	        		lv_e_11_0, 
                      	        		"expression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleexprList


    // $ANTLR start entryRuleconstant
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7942:1: entryRuleconstant returns [String current=null] : iv_ruleconstant= ruleconstant EOF ;
    public final String entryRuleconstant() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleconstant = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7943:2: (iv_ruleconstant= ruleconstant EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7944:2: iv_ruleconstant= ruleconstant EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleconstant_in_entryRuleconstant15021);
            iv_ruleconstant=ruleconstant();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleconstant.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleconstant15032); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleconstant


    // $ANTLR start ruleconstant
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7951:1: ruleconstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_number_0= rulenumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY ) ;
    public final AntlrDatatypeRuleToken ruleconstant() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_1=null;
        AntlrDatatypeRuleToken this_number_0 = null;

        AntlrDatatypeRuleToken this_NULL_2 = null;

        AntlrDatatypeRuleToken this_TRUE_3 = null;

        AntlrDatatypeRuleToken this_FALSE_4 = null;

        AntlrDatatypeRuleToken this_EMPTY_5 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7956:6: ( (this_number_0= rulenumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7957:1: (this_number_0= rulenumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7957:1: (this_number_0= rulenumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY )
            int alt120=6;
            switch ( input.LA(1) ) {
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 36:
                {
                alt120=1;
                }
                break;
            case RULE_STRING:
                {
                alt120=2;
                }
                break;
            case 17:
            case 240:
            case 241:
                {
                alt120=3;
                }
                break;
            case 242:
            case 243:
            case 244:
                {
                alt120=4;
                }
                break;
            case 245:
            case 246:
            case 247:
                {
                alt120=5;
                }
                break;
            case 18:
            case 248:
            case 249:
                {
                alt120=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7957:1: (this_number_0= rulenumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY )", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7958:5: this_number_0= rulenumber
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulenumber_in_ruleconstant15079);
                    this_number_0=rulenumber();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_number_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7969:10: this_STRING_1= RULE_STRING
                    {
                    this_STRING_1=(Token)input.LT(1);
                    match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleconstant15105); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_STRING_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7978:5: this_NULL_2= ruleNULL
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getNULLParserRuleCall_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleNULL_in_ruleconstant15138);
                    this_NULL_2=ruleNULL();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_NULL_2);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7990:5: this_TRUE_3= ruleTRUE
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getTRUEParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleTRUE_in_ruleconstant15171);
                    this_TRUE_3=ruleTRUE();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_TRUE_3);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8002:5: this_FALSE_4= ruleFALSE
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getFALSEParserRuleCall_4(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFALSE_in_ruleconstant15204);
                    this_FALSE_4=ruleFALSE();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_FALSE_4);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8014:5: this_EMPTY_5= ruleEMPTY
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getEMPTYParserRuleCall_5(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleEMPTY_in_ruleconstant15237);
                    this_EMPTY_5=ruleEMPTY();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_EMPTY_5);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleconstant


    // $ANTLR start entryRulepath
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8032:1: entryRulepath returns [String current=null] : iv_rulepath= rulepath EOF ;
    public final String entryRulepath() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulepath = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8033:2: (iv_rulepath= rulepath EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8034:2: iv_rulepath= rulepath EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulepath_in_entryRulepath15283);
            iv_rulepath=rulepath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulepath.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulepath15294); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulepath


    // $ANTLR start rulepath
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8041:1: rulepath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_identifier_0= ruleidentifier (kw= '.' this_identifier_2= ruleidentifier )* ) ;
    public final AntlrDatatypeRuleToken rulepath() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_identifier_0 = null;

        AntlrDatatypeRuleToken this_identifier_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8046:6: ( (this_identifier_0= ruleidentifier (kw= '.' this_identifier_2= ruleidentifier )* ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8047:1: (this_identifier_0= ruleidentifier (kw= '.' this_identifier_2= ruleidentifier )* )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8047:1: (this_identifier_0= ruleidentifier (kw= '.' this_identifier_2= ruleidentifier )* )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8048:5: this_identifier_0= ruleidentifier (kw= '.' this_identifier_2= ruleidentifier )*
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPathAccess().getIdentifierParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleidentifier_in_rulepath15341);
            this_identifier_0=ruleidentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_identifier_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8058:1: (kw= '.' this_identifier_2= ruleidentifier )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==36) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8059:2: kw= '.' this_identifier_2= ruleidentifier
            	    {
            	    kw=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_rulepath15360); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              current.merge(kw);
            	              createLeafNode(grammarAccess.getPathAccess().getFullStopKeyword_1_0(), null); 
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode=createCompositeNode(grammarAccess.getPathAccess().getIdentifierParserRuleCall_1_1(), currentNode); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleidentifier_in_rulepath15382);
            	    this_identifier_2=ruleidentifier();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      		current.merge(this_identifier_2);
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode = currentNode.getParent();
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulepath


    // $ANTLR start entryRuleidentifier
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8083:1: entryRuleidentifier returns [String current=null] : iv_ruleidentifier= ruleidentifier EOF ;
    public final String entryRuleidentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleidentifier = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8084:2: (iv_ruleidentifier= ruleidentifier EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8085:2: iv_ruleidentifier= ruleidentifier EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleidentifier_in_entryRuleidentifier15430);
            iv_ruleidentifier=ruleidentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleidentifier.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleidentifier15441); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleidentifier


    // $ANTLR start ruleidentifier
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8092:1: ruleidentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER ) ;
    public final AntlrDatatypeRuleToken ruleidentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_ID_1=null;
        AntlrDatatypeRuleToken this_END_14 = null;

        AntlrDatatypeRuleToken this_WHEN_15 = null;

        AntlrDatatypeRuleToken this_FROM_16 = null;

        AntlrDatatypeRuleToken this_MEMBER_17 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8097:6: ( ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8098:1: ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8098:1: ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER )
            int alt123=17;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 75:
                {
                alt123=1;
                }
                break;
            case 76:
                {
                alt123=2;
                }
                break;
            case 77:
                {
                alt123=3;
                }
                break;
            case 78:
                {
                alt123=4;
                }
                break;
            case 42:
                {
                alt123=5;
                }
                break;
            case 45:
                {
                alt123=6;
                }
                break;
            case 54:
                {
                alt123=7;
                }
                break;
            case 55:
                {
                alt123=8;
                }
                break;
            case 26:
                {
                alt123=9;
                }
                break;
            case 38:
                {
                alt123=10;
                }
                break;
            case 40:
                {
                alt123=11;
                }
                break;
            case 39:
                {
                alt123=12;
                }
                break;
            case 59:
                {
                alt123=13;
                }
                break;
            case 189:
            case 190:
            case 191:
                {
                alt123=14;
                }
                break;
            case 192:
            case 193:
            case 194:
                {
                alt123=15;
                }
                break;
            case 92:
            case 93:
            case 94:
                {
                alt123=16;
                }
                break;
            case 177:
            case 178:
            case 179:
                {
                alt123=17;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8098:1: ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER )", 123, 0, input);

                throw nvae;
            }

            switch (alt123) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8098:2: ( (kw= '$' )? this_ID_1= RULE_ID )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8098:2: ( (kw= '$' )? this_ID_1= RULE_ID )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8098:3: (kw= '$' )? this_ID_1= RULE_ID
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8098:3: (kw= '$' )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==75) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8099:2: kw= '$'
                            {
                            kw=(Token)input.LT(1);
                            match(input,75,FOLLOW_75_in_ruleidentifier15481); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getIdentifierAccess().getDollarSignKeyword_0_0(), null); 
                                  
                            }

                            }
                            break;

                    }

                    this_ID_1=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleidentifier15498); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ID_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0_1(), null); 
                          
                    }

                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8113:2: kw= 'e'
                    {
                    kw=(Token)input.LT(1);
                    match(input,76,FOLLOW_76_in_ruleidentifier15523); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getEKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8120:2: kw= 'f'
                    {
                    kw=(Token)input.LT(1);
                    match(input,77,FOLLOW_77_in_ruleidentifier15542); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getFKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8127:2: kw= 'd'
                    {
                    kw=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_ruleidentifier15561); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getDKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8134:2: kw= 'upper'
                    {
                    kw=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_ruleidentifier15580); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getUpperKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8141:2: kw= 'lower'
                    {
                    kw=(Token)input.LT(1);
                    match(input,45,FOLLOW_45_in_ruleidentifier15599); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getLowerKeyword_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8148:2: kw= '$now'
                    {
                    kw=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_ruleidentifier15618); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getNowKeyword_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8155:2: kw= '$today'
                    {
                    kw=(Token)input.LT(1);
                    match(input,55,FOLLOW_55_in_ruleidentifier15637); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getTodayKeyword_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8162:2: kw= 'date'
                    {
                    kw=(Token)input.LT(1);
                    match(input,26,FOLLOW_26_in_ruleidentifier15656); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getDateKeyword_8(), null); 
                          
                    }

                    }
                    break;
                case 10 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8169:2: kw= 'title'
                    {
                    kw=(Token)input.LT(1);
                    match(input,38,FOLLOW_38_in_ruleidentifier15675); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getTitleKeyword_9(), null); 
                          
                    }

                    }
                    break;
                case 11 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8176:2: kw= 'type'
                    {
                    kw=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_ruleidentifier15694); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getTypeKeyword_10(), null); 
                          
                    }

                    }
                    break;
                case 12 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8183:2: kw= 'include'
                    {
                    kw=(Token)input.LT(1);
                    match(input,39,FOLLOW_39_in_ruleidentifier15713); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getIncludeKeyword_11(), null); 
                          
                    }

                    }
                    break;
                case 13 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8190:2: kw= 'length'
                    {
                    kw=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_ruleidentifier15732); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getLengthKeyword_12(), null); 
                          
                    }

                    }
                    break;
                case 14 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8197:5: this_END_14= ruleEND
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getENDParserRuleCall_13(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleEND_in_ruleidentifier15760);
                    this_END_14=ruleEND();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_END_14);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 15 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8209:5: this_WHEN_15= ruleWHEN
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getWHENParserRuleCall_14(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleWHEN_in_ruleidentifier15793);
                    this_WHEN_15=ruleWHEN();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_WHEN_15);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 16 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8221:5: this_FROM_16= ruleFROM
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getFROMParserRuleCall_15(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFROM_in_ruleidentifier15826);
                    this_FROM_16=ruleFROM();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_FROM_16);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 17 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8233:5: this_MEMBER_17= ruleMEMBER
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getMEMBERParserRuleCall_16(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleMEMBER_in_ruleidentifier15859);
                    this_MEMBER_17=ruleMEMBER();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_MEMBER_17);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleidentifier


    // $ANTLR start entryRulenumber
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8251:1: entryRulenumber returns [String current=null] : iv_rulenumber= rulenumber EOF ;
    public final String entryRulenumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulenumber = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8252:2: (iv_rulenumber= rulenumber EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8253:2: iv_rulenumber= rulenumber EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNumberRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulenumber_in_entryRulenumber15905);
            iv_rulenumber=rulenumber();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulenumber.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulenumber15916); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulenumber


    // $ANTLR start rulenumber
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8260:1: rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) ) ;
    public final AntlrDatatypeRuleToken rulenumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_INT_1=null;
        Token this_INT_5=null;
        Token this_HEX_8=null;
        Token this_INT_9=null;
        Token this_SIGNED_INT_10=null;
        Token this_INT_13=null;
        Token this_INT_17=null;
        Token this_INT_23=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8265:6: ( ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8266:1: ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8266:1: ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==36) ) {
                alt137=1;
            }
            else if ( ((LA137_0>=RULE_INT && LA137_0<=RULE_HEX)) ) {
                alt137=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8266:1: ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) )", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8266:2: (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8266:2: (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8267:2: kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )?
                    {
                    kw=(Token)input.LT(1);
                    match(input,36,FOLLOW_36_in_rulenumber15955); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNumberAccess().getFullStopKeyword_0_0(), null); 
                          
                    }
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8272:1: (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==RULE_INT) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8272:6: this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )?
                            {
                            this_INT_1=(Token)input.LT(1);
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_rulenumber15971); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_INT_1);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_0(), null); 
                                  
                            }
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8279:1: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )?
                            int alt125=2;
                            int LA125_0 = input.LA(1);

                            if ( (LA125_0==76) ) {
                                alt125=1;
                            }
                            switch (alt125) {
                                case 1 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8280:2: kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,76,FOLLOW_76_in_rulenumber15990); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getEKeyword_0_1_1_0(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8285:1: (kw= '+' | kw= '-' )?
                                    int alt124=3;
                                    int LA124_0 = input.LA(1);

                                    if ( (LA124_0==56) ) {
                                        alt124=1;
                                    }
                                    else if ( (LA124_0==57) ) {
                                        alt124=2;
                                    }
                                    switch (alt124) {
                                        case 1 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8286:2: kw= '+'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,56,FOLLOW_56_in_rulenumber16004); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_0_1_1_1_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8293:2: kw= '-'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,57,FOLLOW_57_in_rulenumber16023); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1_1_1_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    this_INT_5=(Token)input.LT(1);
                                    match(input,RULE_INT,FOLLOW_RULE_INT_in_rulenumber16040); if (failed) return current;
                                    if ( backtracking==0 ) {

                                      		current.merge(this_INT_5);
                                          
                                    }
                                    if ( backtracking==0 ) {
                                       
                                          createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_1_2(), null); 
                                          
                                    }

                                    }
                                    break;

                            }

                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8305:3: (kw= 'f' | kw= 'd' )?
                            int alt126=3;
                            int LA126_0 = input.LA(1);

                            if ( (LA126_0==77) ) {
                                alt126=1;
                            }
                            else if ( (LA126_0==78) ) {
                                alt126=2;
                            }
                            switch (alt126) {
                                case 1 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8306:2: kw= 'f'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,77,FOLLOW_77_in_rulenumber16061); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getFKeyword_0_1_2_0(), null); 
                                          
                                    }

                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8313:2: kw= 'd'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,78,FOLLOW_78_in_rulenumber16080); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getDKeyword_0_1_2_1(), null); 
                                          
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8319:6: ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? )
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8319:6: ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? )
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8319:7: (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )?
                    {
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8319:7: (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT )
                    int alt128=3;
                    switch ( input.LA(1) ) {
                    case RULE_HEX:
                        {
                        alt128=1;
                        }
                        break;
                    case RULE_INT:
                        {
                        alt128=2;
                        }
                        break;
                    case RULE_SIGNED_INT:
                        {
                        alt128=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("8319:7: (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT )", 128, 0, input);

                        throw nvae;
                    }

                    switch (alt128) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8319:12: this_HEX_8= RULE_HEX
                            {
                            this_HEX_8=(Token)input.LT(1);
                            match(input,RULE_HEX,FOLLOW_RULE_HEX_in_rulenumber16108); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_HEX_8);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_1_0_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8327:10: this_INT_9= RULE_INT
                            {
                            this_INT_9=(Token)input.LT(1);
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_rulenumber16134); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_INT_9);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_1(), null); 
                                  
                            }

                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8335:10: this_SIGNED_INT_10= RULE_SIGNED_INT
                            {
                            this_SIGNED_INT_10=(Token)input.LT(1);
                            match(input,RULE_SIGNED_INT,FOLLOW_RULE_SIGNED_INT_in_rulenumber16160); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_SIGNED_INT_10);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getSIGNED_INTTerminalRuleCall_1_0_2(), null); 
                                  
                            }

                            }
                            break;

                    }

                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8342:2: (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )?
                    int alt136=3;
                    switch ( input.LA(1) ) {
                        case 79:
                            {
                            alt136=1;
                            }
                            break;
                        case 36:
                            {
                            int LA136_2 = input.LA(2);

                            if ( (synpred251()) ) {
                                alt136=2;
                            }
                            }
                            break;
                        case 76:
                        case 77:
                        case 78:
                            {
                            alt136=2;
                            }
                            break;
                    }

                    switch (alt136) {
                        case 1 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8343:2: kw= 'l'
                            {
                            kw=(Token)input.LT(1);
                            match(input,79,FOLLOW_79_in_rulenumber16180); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getNumberAccess().getLKeyword_1_1_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:6: ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' )
                            {
                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:6: ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' )
                            int alt135=4;
                            switch ( input.LA(1) ) {
                            case 36:
                                {
                                alt135=1;
                                }
                                break;
                            case 76:
                                {
                                alt135=2;
                                }
                                break;
                            case 77:
                                {
                                alt135=3;
                                }
                                break;
                            case 78:
                                {
                                alt135=4;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("8349:6: ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' )", 135, 0, input);

                                throw nvae;
                            }

                            switch (alt135) {
                                case 1 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:7: (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? )
                                    {
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:7: (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? )
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8350:2: kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )?
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,36,FOLLOW_36_in_rulenumber16201); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_1_0_0(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8355:1: (this_INT_13= RULE_INT )?
                                    int alt129=2;
                                    int LA129_0 = input.LA(1);

                                    if ( (LA129_0==RULE_INT) ) {
                                        alt129=1;
                                    }
                                    switch (alt129) {
                                        case 1 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8355:6: this_INT_13= RULE_INT
                                            {
                                            this_INT_13=(Token)input.LT(1);
                                            match(input,RULE_INT,FOLLOW_RULE_INT_in_rulenumber16217); if (failed) return current;
                                            if ( backtracking==0 ) {

                                              		current.merge(this_INT_13);
                                                  
                                            }
                                            if ( backtracking==0 ) {
                                               
                                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8362:3: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )?
                                    int alt131=2;
                                    int LA131_0 = input.LA(1);

                                    if ( (LA131_0==76) ) {
                                        alt131=1;
                                    }
                                    switch (alt131) {
                                        case 1 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8363:2: kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,76,FOLLOW_76_in_rulenumber16238); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getEKeyword_1_1_1_0_2_0(), null); 
                                                  
                                            }
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8368:1: (kw= '+' | kw= '-' )?
                                            int alt130=3;
                                            int LA130_0 = input.LA(1);

                                            if ( (LA130_0==56) ) {
                                                alt130=1;
                                            }
                                            else if ( (LA130_0==57) ) {
                                                alt130=2;
                                            }
                                            switch (alt130) {
                                                case 1 :
                                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8369:2: kw= '+'
                                                    {
                                                    kw=(Token)input.LT(1);
                                                    match(input,56,FOLLOW_56_in_rulenumber16252); if (failed) return current;
                                                    if ( backtracking==0 ) {

                                                              current.merge(kw);
                                                              createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_0_2_1_0(), null); 
                                                          
                                                    }

                                                    }
                                                    break;
                                                case 2 :
                                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8376:2: kw= '-'
                                                    {
                                                    kw=(Token)input.LT(1);
                                                    match(input,57,FOLLOW_57_in_rulenumber16271); if (failed) return current;
                                                    if ( backtracking==0 ) {

                                                              current.merge(kw);
                                                              createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_0_2_1_1(), null); 
                                                          
                                                    }

                                                    }
                                                    break;

                                            }

                                            this_INT_17=(Token)input.LT(1);
                                            match(input,RULE_INT,FOLLOW_RULE_INT_in_rulenumber16288); if (failed) return current;
                                            if ( backtracking==0 ) {

                                              		current.merge(this_INT_17);
                                                  
                                            }
                                            if ( backtracking==0 ) {
                                               
                                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_2_2(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8388:3: (kw= 'f' | kw= 'd' )?
                                    int alt132=3;
                                    int LA132_0 = input.LA(1);

                                    if ( (LA132_0==77) ) {
                                        alt132=1;
                                    }
                                    else if ( (LA132_0==78) ) {
                                        alt132=2;
                                    }
                                    switch (alt132) {
                                        case 1 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8389:2: kw= 'f'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,77,FOLLOW_77_in_rulenumber16309); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_0_3_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8396:2: kw= 'd'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,78,FOLLOW_78_in_rulenumber16328); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_0_3_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8402:6: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? )
                                    {
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8402:6: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? )
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8403:2: kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )?
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,76,FOLLOW_76_in_rulenumber16351); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getEKeyword_1_1_1_1_0(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8408:1: (kw= '+' | kw= '-' )?
                                    int alt133=3;
                                    int LA133_0 = input.LA(1);

                                    if ( (LA133_0==56) ) {
                                        alt133=1;
                                    }
                                    else if ( (LA133_0==57) ) {
                                        alt133=2;
                                    }
                                    switch (alt133) {
                                        case 1 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8409:2: kw= '+'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,56,FOLLOW_56_in_rulenumber16365); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_1_1_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8416:2: kw= '-'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,57,FOLLOW_57_in_rulenumber16384); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_1_1_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    this_INT_23=(Token)input.LT(1);
                                    match(input,RULE_INT,FOLLOW_RULE_INT_in_rulenumber16401); if (failed) return current;
                                    if ( backtracking==0 ) {

                                      		current.merge(this_INT_23);
                                          
                                    }
                                    if ( backtracking==0 ) {
                                       
                                          createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_1_2(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8428:1: (kw= 'f' | kw= 'd' )?
                                    int alt134=3;
                                    int LA134_0 = input.LA(1);

                                    if ( (LA134_0==77) ) {
                                        alt134=1;
                                    }
                                    else if ( (LA134_0==78) ) {
                                        alt134=2;
                                    }
                                    switch (alt134) {
                                        case 1 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8429:2: kw= 'f'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,77,FOLLOW_77_in_rulenumber16420); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_1_3_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8436:2: kw= 'd'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,78,FOLLOW_78_in_rulenumber16439); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_1_3_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8443:2: kw= 'f'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,77,FOLLOW_77_in_rulenumber16461); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_2(), null); 
                                          
                                    }

                                    }
                                    break;
                                case 4 :
                                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8450:2: kw= 'd'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,78,FOLLOW_78_in_rulenumber16480); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_3(), null); 
                                          
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulenumber


    // $ANTLR start entryRuleSELECT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8463:1: entryRuleSELECT returns [String current=null] : iv_ruleSELECT= ruleSELECT EOF ;
    public final String entryRuleSELECT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSELECT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8464:2: (iv_ruleSELECT= ruleSELECT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8465:2: iv_ruleSELECT= ruleSELECT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSELECTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSELECT_in_entryRuleSELECT16525);
            iv_ruleSELECT=ruleSELECT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSELECT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSELECT16536); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSELECT


    // $ANTLR start ruleSELECT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8472:1: ruleSELECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'SELECT' | kw= 'Select' | kw= 'select' ) ;
    public final AntlrDatatypeRuleToken ruleSELECT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8477:6: ( (kw= 'SELECT' | kw= 'Select' | kw= 'select' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8478:1: (kw= 'SELECT' | kw= 'Select' | kw= 'select' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8478:1: (kw= 'SELECT' | kw= 'Select' | kw= 'select' )
            int alt138=3;
            switch ( input.LA(1) ) {
            case 80:
                {
                alt138=1;
                }
                break;
            case 81:
                {
                alt138=2;
                }
                break;
            case 82:
                {
                alt138=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8478:1: (kw= 'SELECT' | kw= 'Select' | kw= 'select' )", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8479:2: kw= 'SELECT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,80,FOLLOW_80_in_ruleSELECT16574); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSELECTAccess().getSELECTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8486:2: kw= 'Select'
                    {
                    kw=(Token)input.LT(1);
                    match(input,81,FOLLOW_81_in_ruleSELECT16593); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSELECTAccess().getSelectKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8493:2: kw= 'select'
                    {
                    kw=(Token)input.LT(1);
                    match(input,82,FOLLOW_82_in_ruleSELECT16612); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSELECTAccess().getSelectKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSELECT


    // $ANTLR start entryRuleDISTINCT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8506:1: entryRuleDISTINCT returns [String current=null] : iv_ruleDISTINCT= ruleDISTINCT EOF ;
    public final String entryRuleDISTINCT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDISTINCT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8507:2: (iv_ruleDISTINCT= ruleDISTINCT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8508:2: iv_ruleDISTINCT= ruleDISTINCT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDISTINCTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDISTINCT_in_entryRuleDISTINCT16653);
            iv_ruleDISTINCT=ruleDISTINCT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDISTINCT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDISTINCT16664); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDISTINCT


    // $ANTLR start ruleDISTINCT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8515:1: ruleDISTINCT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' ) ;
    public final AntlrDatatypeRuleToken ruleDISTINCT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8520:6: ( (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8521:1: (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8521:1: (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' )
            int alt139=3;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt139=1;
                }
                break;
            case 84:
                {
                alt139=2;
                }
                break;
            case 85:
                {
                alt139=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8521:1: (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' )", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8522:2: kw= 'DISTINCT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,83,FOLLOW_83_in_ruleDISTINCT16702); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDISTINCTAccess().getDISTINCTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8529:2: kw= 'Distinct'
                    {
                    kw=(Token)input.LT(1);
                    match(input,84,FOLLOW_84_in_ruleDISTINCT16721); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDISTINCTAccess().getDistinctKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8536:2: kw= 'distinct'
                    {
                    kw=(Token)input.LT(1);
                    match(input,85,FOLLOW_85_in_ruleDISTINCT16740); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDISTINCTAccess().getDistinctKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDISTINCT


    // $ANTLR start entryRuleNEW
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8549:1: entryRuleNEW returns [String current=null] : iv_ruleNEW= ruleNEW EOF ;
    public final String entryRuleNEW() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNEW = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8550:2: (iv_ruleNEW= ruleNEW EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8551:2: iv_ruleNEW= ruleNEW EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNEWRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNEW_in_entryRuleNEW16781);
            iv_ruleNEW=ruleNEW();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNEW.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNEW16792); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNEW


    // $ANTLR start ruleNEW
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8558:1: ruleNEW returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'NEW' | kw= 'New' | kw= 'new' ) ;
    public final AntlrDatatypeRuleToken ruleNEW() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8563:6: ( (kw= 'NEW' | kw= 'New' | kw= 'new' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8564:1: (kw= 'NEW' | kw= 'New' | kw= 'new' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8564:1: (kw= 'NEW' | kw= 'New' | kw= 'new' )
            int alt140=3;
            switch ( input.LA(1) ) {
            case 86:
                {
                alt140=1;
                }
                break;
            case 87:
                {
                alt140=2;
                }
                break;
            case 88:
                {
                alt140=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8564:1: (kw= 'NEW' | kw= 'New' | kw= 'new' )", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8565:2: kw= 'NEW'
                    {
                    kw=(Token)input.LT(1);
                    match(input,86,FOLLOW_86_in_ruleNEW16830); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNEWAccess().getNEWKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8572:2: kw= 'New'
                    {
                    kw=(Token)input.LT(1);
                    match(input,87,FOLLOW_87_in_ruleNEW16849); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNEWAccess().getNewKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8579:2: kw= 'new'
                    {
                    kw=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_ruleNEW16868); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNEWAccess().getNewKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNEW


    // $ANTLR start entryRuleOBJECT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8592:1: entryRuleOBJECT returns [String current=null] : iv_ruleOBJECT= ruleOBJECT EOF ;
    public final String entryRuleOBJECT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOBJECT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8593:2: (iv_ruleOBJECT= ruleOBJECT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8594:2: iv_ruleOBJECT= ruleOBJECT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOBJECTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOBJECT_in_entryRuleOBJECT16909);
            iv_ruleOBJECT=ruleOBJECT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOBJECT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOBJECT16920); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOBJECT


    // $ANTLR start ruleOBJECT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8601:1: ruleOBJECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OBJECT' | kw= 'Object' | kw= 'object' ) ;
    public final AntlrDatatypeRuleToken ruleOBJECT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8606:6: ( (kw= 'OBJECT' | kw= 'Object' | kw= 'object' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8607:1: (kw= 'OBJECT' | kw= 'Object' | kw= 'object' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8607:1: (kw= 'OBJECT' | kw= 'Object' | kw= 'object' )
            int alt141=3;
            switch ( input.LA(1) ) {
            case 89:
                {
                alt141=1;
                }
                break;
            case 90:
                {
                alt141=2;
                }
                break;
            case 91:
                {
                alt141=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8607:1: (kw= 'OBJECT' | kw= 'Object' | kw= 'object' )", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8608:2: kw= 'OBJECT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,89,FOLLOW_89_in_ruleOBJECT16958); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOBJECTAccess().getOBJECTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8615:2: kw= 'Object'
                    {
                    kw=(Token)input.LT(1);
                    match(input,90,FOLLOW_90_in_ruleOBJECT16977); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOBJECTAccess().getObjectKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8622:2: kw= 'object'
                    {
                    kw=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_ruleOBJECT16996); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOBJECTAccess().getObjectKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOBJECT


    // $ANTLR start entryRuleFROM
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8635:1: entryRuleFROM returns [String current=null] : iv_ruleFROM= ruleFROM EOF ;
    public final String entryRuleFROM() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFROM = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8636:2: (iv_ruleFROM= ruleFROM EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8637:2: iv_ruleFROM= ruleFROM EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFROMRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFROM_in_entryRuleFROM17037);
            iv_ruleFROM=ruleFROM();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFROM.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFROM17048); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFROM


    // $ANTLR start ruleFROM
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8644:1: ruleFROM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FROM' | kw= 'From' | kw= 'from' ) ;
    public final AntlrDatatypeRuleToken ruleFROM() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8649:6: ( (kw= 'FROM' | kw= 'From' | kw= 'from' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8650:1: (kw= 'FROM' | kw= 'From' | kw= 'from' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8650:1: (kw= 'FROM' | kw= 'From' | kw= 'from' )
            int alt142=3;
            switch ( input.LA(1) ) {
            case 92:
                {
                alt142=1;
                }
                break;
            case 93:
                {
                alt142=2;
                }
                break;
            case 94:
                {
                alt142=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8650:1: (kw= 'FROM' | kw= 'From' | kw= 'from' )", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8651:2: kw= 'FROM'
                    {
                    kw=(Token)input.LT(1);
                    match(input,92,FOLLOW_92_in_ruleFROM17086); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFROMAccess().getFROMKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8658:2: kw= 'From'
                    {
                    kw=(Token)input.LT(1);
                    match(input,93,FOLLOW_93_in_ruleFROM17105); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFROMAccess().getFromKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8665:2: kw= 'from'
                    {
                    kw=(Token)input.LT(1);
                    match(input,94,FOLLOW_94_in_ruleFROM17124); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFROMAccess().getFromKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFROM


    // $ANTLR start entryRuleLEFT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8678:1: entryRuleLEFT returns [String current=null] : iv_ruleLEFT= ruleLEFT EOF ;
    public final String entryRuleLEFT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLEFT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8679:2: (iv_ruleLEFT= ruleLEFT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8680:2: iv_ruleLEFT= ruleLEFT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLEFTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLEFT_in_entryRuleLEFT17165);
            iv_ruleLEFT=ruleLEFT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLEFT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLEFT17176); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLEFT


    // $ANTLR start ruleLEFT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8687:1: ruleLEFT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'LEFT' | kw= 'Left' | kw= 'left' ) ;
    public final AntlrDatatypeRuleToken ruleLEFT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8692:6: ( (kw= 'LEFT' | kw= 'Left' | kw= 'left' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8693:1: (kw= 'LEFT' | kw= 'Left' | kw= 'left' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8693:1: (kw= 'LEFT' | kw= 'Left' | kw= 'left' )
            int alt143=3;
            switch ( input.LA(1) ) {
            case 95:
                {
                alt143=1;
                }
                break;
            case 96:
                {
                alt143=2;
                }
                break;
            case 97:
                {
                alt143=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8693:1: (kw= 'LEFT' | kw= 'Left' | kw= 'left' )", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8694:2: kw= 'LEFT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,95,FOLLOW_95_in_ruleLEFT17214); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEFTAccess().getLEFTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8701:2: kw= 'Left'
                    {
                    kw=(Token)input.LT(1);
                    match(input,96,FOLLOW_96_in_ruleLEFT17233); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEFTAccess().getLeftKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8708:2: kw= 'left'
                    {
                    kw=(Token)input.LT(1);
                    match(input,97,FOLLOW_97_in_ruleLEFT17252); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEFTAccess().getLeftKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLEFT


    // $ANTLR start entryRuleRIGHT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8721:1: entryRuleRIGHT returns [String current=null] : iv_ruleRIGHT= ruleRIGHT EOF ;
    public final String entryRuleRIGHT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRIGHT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8722:2: (iv_ruleRIGHT= ruleRIGHT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8723:2: iv_ruleRIGHT= ruleRIGHT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRIGHTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRIGHT_in_entryRuleRIGHT17293);
            iv_ruleRIGHT=ruleRIGHT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRIGHT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRIGHT17304); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRIGHT


    // $ANTLR start ruleRIGHT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8730:1: ruleRIGHT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'RIGHT' | kw= 'Right' | kw= 'right' ) ;
    public final AntlrDatatypeRuleToken ruleRIGHT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8735:6: ( (kw= 'RIGHT' | kw= 'Right' | kw= 'right' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8736:1: (kw= 'RIGHT' | kw= 'Right' | kw= 'right' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8736:1: (kw= 'RIGHT' | kw= 'Right' | kw= 'right' )
            int alt144=3;
            switch ( input.LA(1) ) {
            case 98:
                {
                alt144=1;
                }
                break;
            case 99:
                {
                alt144=2;
                }
                break;
            case 100:
                {
                alt144=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8736:1: (kw= 'RIGHT' | kw= 'Right' | kw= 'right' )", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8737:2: kw= 'RIGHT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,98,FOLLOW_98_in_ruleRIGHT17342); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8744:2: kw= 'Right'
                    {
                    kw=(Token)input.LT(1);
                    match(input,99,FOLLOW_99_in_ruleRIGHT17361); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRIGHTAccess().getRightKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8751:2: kw= 'right'
                    {
                    kw=(Token)input.LT(1);
                    match(input,100,FOLLOW_100_in_ruleRIGHT17380); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRIGHTAccess().getRightKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRIGHT


    // $ANTLR start entryRuleOUTER
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8764:1: entryRuleOUTER returns [String current=null] : iv_ruleOUTER= ruleOUTER EOF ;
    public final String entryRuleOUTER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOUTER = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8765:2: (iv_ruleOUTER= ruleOUTER EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8766:2: iv_ruleOUTER= ruleOUTER EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOUTERRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOUTER_in_entryRuleOUTER17421);
            iv_ruleOUTER=ruleOUTER();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOUTER.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOUTER17432); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOUTER


    // $ANTLR start ruleOUTER
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8773:1: ruleOUTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' ) ;
    public final AntlrDatatypeRuleToken ruleOUTER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8778:6: ( (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8779:1: (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8779:1: (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' )
            int alt145=3;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt145=1;
                }
                break;
            case 102:
                {
                alt145=2;
                }
                break;
            case 103:
                {
                alt145=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8779:1: (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' )", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8780:2: kw= 'OUTER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,101,FOLLOW_101_in_ruleOUTER17470); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOUTERAccess().getOUTERKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8787:2: kw= 'Outer'
                    {
                    kw=(Token)input.LT(1);
                    match(input,102,FOLLOW_102_in_ruleOUTER17489); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOUTERAccess().getOuterKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8794:2: kw= 'outer'
                    {
                    kw=(Token)input.LT(1);
                    match(input,103,FOLLOW_103_in_ruleOUTER17508); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOUTERAccess().getOuterKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOUTER


    // $ANTLR start entryRuleFULL
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8807:1: entryRuleFULL returns [String current=null] : iv_ruleFULL= ruleFULL EOF ;
    public final String entryRuleFULL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFULL = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8808:2: (iv_ruleFULL= ruleFULL EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8809:2: iv_ruleFULL= ruleFULL EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFULLRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFULL_in_entryRuleFULL17549);
            iv_ruleFULL=ruleFULL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFULL.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFULL17560); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFULL


    // $ANTLR start ruleFULL
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8816:1: ruleFULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FULL' | kw= 'Full' | kw= 'full' ) ;
    public final AntlrDatatypeRuleToken ruleFULL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8821:6: ( (kw= 'FULL' | kw= 'Full' | kw= 'full' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8822:1: (kw= 'FULL' | kw= 'Full' | kw= 'full' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8822:1: (kw= 'FULL' | kw= 'Full' | kw= 'full' )
            int alt146=3;
            switch ( input.LA(1) ) {
            case 104:
                {
                alt146=1;
                }
                break;
            case 105:
                {
                alt146=2;
                }
                break;
            case 106:
                {
                alt146=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8822:1: (kw= 'FULL' | kw= 'Full' | kw= 'full' )", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8823:2: kw= 'FULL'
                    {
                    kw=(Token)input.LT(1);
                    match(input,104,FOLLOW_104_in_ruleFULL17598); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFULLAccess().getFULLKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8830:2: kw= 'Full'
                    {
                    kw=(Token)input.LT(1);
                    match(input,105,FOLLOW_105_in_ruleFULL17617); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFULLAccess().getFullKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8837:2: kw= 'full'
                    {
                    kw=(Token)input.LT(1);
                    match(input,106,FOLLOW_106_in_ruleFULL17636); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFULLAccess().getFullKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFULL


    // $ANTLR start entryRuleINNER
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8850:1: entryRuleINNER returns [String current=null] : iv_ruleINNER= ruleINNER EOF ;
    public final String entryRuleINNER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleINNER = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8851:2: (iv_ruleINNER= ruleINNER EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8852:2: iv_ruleINNER= ruleINNER EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getINNERRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleINNER_in_entryRuleINNER17677);
            iv_ruleINNER=ruleINNER();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleINNER.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleINNER17688); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleINNER


    // $ANTLR start ruleINNER
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8859:1: ruleINNER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'INNER' | kw= 'Inner' | kw= 'inner' ) ;
    public final AntlrDatatypeRuleToken ruleINNER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8864:6: ( (kw= 'INNER' | kw= 'Inner' | kw= 'inner' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8865:1: (kw= 'INNER' | kw= 'Inner' | kw= 'inner' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8865:1: (kw= 'INNER' | kw= 'Inner' | kw= 'inner' )
            int alt147=3;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt147=1;
                }
                break;
            case 108:
                {
                alt147=2;
                }
                break;
            case 109:
                {
                alt147=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8865:1: (kw= 'INNER' | kw= 'Inner' | kw= 'inner' )", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8866:2: kw= 'INNER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,107,FOLLOW_107_in_ruleINNER17726); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINNERAccess().getINNERKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8873:2: kw= 'Inner'
                    {
                    kw=(Token)input.LT(1);
                    match(input,108,FOLLOW_108_in_ruleINNER17745); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINNERAccess().getInnerKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8880:2: kw= 'inner'
                    {
                    kw=(Token)input.LT(1);
                    match(input,109,FOLLOW_109_in_ruleINNER17764); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINNERAccess().getInnerKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleINNER


    // $ANTLR start entryRuleJOIN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8893:1: entryRuleJOIN returns [String current=null] : iv_ruleJOIN= ruleJOIN EOF ;
    public final String entryRuleJOIN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleJOIN = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8894:2: (iv_ruleJOIN= ruleJOIN EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8895:2: iv_ruleJOIN= ruleJOIN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getJOINRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleJOIN_in_entryRuleJOIN17805);
            iv_ruleJOIN=ruleJOIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleJOIN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJOIN17816); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleJOIN


    // $ANTLR start ruleJOIN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8902:1: ruleJOIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'JOIN' | kw= 'Join' | kw= 'join' ) ;
    public final AntlrDatatypeRuleToken ruleJOIN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8907:6: ( (kw= 'JOIN' | kw= 'Join' | kw= 'join' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8908:1: (kw= 'JOIN' | kw= 'Join' | kw= 'join' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8908:1: (kw= 'JOIN' | kw= 'Join' | kw= 'join' )
            int alt148=3;
            switch ( input.LA(1) ) {
            case 110:
                {
                alt148=1;
                }
                break;
            case 111:
                {
                alt148=2;
                }
                break;
            case 112:
                {
                alt148=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8908:1: (kw= 'JOIN' | kw= 'Join' | kw= 'join' )", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8909:2: kw= 'JOIN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,110,FOLLOW_110_in_ruleJOIN17854); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getJOINAccess().getJOINKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8916:2: kw= 'Join'
                    {
                    kw=(Token)input.LT(1);
                    match(input,111,FOLLOW_111_in_ruleJOIN17873); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getJOINAccess().getJoinKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8923:2: kw= 'join'
                    {
                    kw=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_ruleJOIN17892); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getJOINAccess().getJoinKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleJOIN


    // $ANTLR start entryRuleFETCH
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8936:1: entryRuleFETCH returns [String current=null] : iv_ruleFETCH= ruleFETCH EOF ;
    public final String entryRuleFETCH() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFETCH = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8937:2: (iv_ruleFETCH= ruleFETCH EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8938:2: iv_ruleFETCH= ruleFETCH EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFETCHRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFETCH_in_entryRuleFETCH17933);
            iv_ruleFETCH=ruleFETCH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFETCH.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFETCH17944); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFETCH


    // $ANTLR start ruleFETCH
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8945:1: ruleFETCH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' ) ;
    public final AntlrDatatypeRuleToken ruleFETCH() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8950:6: ( (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8951:1: (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8951:1: (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' )
            int alt149=3;
            switch ( input.LA(1) ) {
            case 113:
                {
                alt149=1;
                }
                break;
            case 114:
                {
                alt149=2;
                }
                break;
            case 115:
                {
                alt149=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8951:1: (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' )", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8952:2: kw= 'FETCH'
                    {
                    kw=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_ruleFETCH17982); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFETCHAccess().getFETCHKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8959:2: kw= 'Fetch'
                    {
                    kw=(Token)input.LT(1);
                    match(input,114,FOLLOW_114_in_ruleFETCH18001); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFETCHAccess().getFetchKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8966:2: kw= 'fetch'
                    {
                    kw=(Token)input.LT(1);
                    match(input,115,FOLLOW_115_in_ruleFETCH18020); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFETCHAccess().getFetchKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFETCH


    // $ANTLR start entryRuleWITH
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8979:1: entryRuleWITH returns [String current=null] : iv_ruleWITH= ruleWITH EOF ;
    public final String entryRuleWITH() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWITH = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8980:2: (iv_ruleWITH= ruleWITH EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8981:2: iv_ruleWITH= ruleWITH EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWITHRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWITH_in_entryRuleWITH18061);
            iv_ruleWITH=ruleWITH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWITH.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWITH18072); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWITH


    // $ANTLR start ruleWITH
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8988:1: ruleWITH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'WITH' | kw= 'With' | kw= 'with' ) ;
    public final AntlrDatatypeRuleToken ruleWITH() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8993:6: ( (kw= 'WITH' | kw= 'With' | kw= 'with' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8994:1: (kw= 'WITH' | kw= 'With' | kw= 'with' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8994:1: (kw= 'WITH' | kw= 'With' | kw= 'with' )
            int alt150=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                alt150=1;
                }
                break;
            case 117:
                {
                alt150=2;
                }
                break;
            case 118:
                {
                alt150=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8994:1: (kw= 'WITH' | kw= 'With' | kw= 'with' )", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8995:2: kw= 'WITH'
                    {
                    kw=(Token)input.LT(1);
                    match(input,116,FOLLOW_116_in_ruleWITH18110); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWITHAccess().getWITHKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9002:2: kw= 'With'
                    {
                    kw=(Token)input.LT(1);
                    match(input,117,FOLLOW_117_in_ruleWITH18129); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWITHAccess().getWithKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9009:2: kw= 'with'
                    {
                    kw=(Token)input.LT(1);
                    match(input,118,FOLLOW_118_in_ruleWITH18148); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWITHAccess().getWithKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWITH


    // $ANTLR start entryRuleIN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9022:1: entryRuleIN returns [String current=null] : iv_ruleIN= ruleIN EOF ;
    public final String entryRuleIN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIN = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9023:2: (iv_ruleIN= ruleIN EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9024:2: iv_ruleIN= ruleIN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getINRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIN_in_entryRuleIN18189);
            iv_ruleIN=ruleIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIN18200); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIN


    // $ANTLR start ruleIN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9031:1: ruleIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'IN' | kw= 'In' | kw= 'in' ) ;
    public final AntlrDatatypeRuleToken ruleIN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9036:6: ( (kw= 'IN' | kw= 'In' | kw= 'in' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9037:1: (kw= 'IN' | kw= 'In' | kw= 'in' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9037:1: (kw= 'IN' | kw= 'In' | kw= 'in' )
            int alt151=3;
            switch ( input.LA(1) ) {
            case 119:
                {
                alt151=1;
                }
                break;
            case 120:
                {
                alt151=2;
                }
                break;
            case 121:
                {
                alt151=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9037:1: (kw= 'IN' | kw= 'In' | kw= 'in' )", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9038:2: kw= 'IN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,119,FOLLOW_119_in_ruleIN18238); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINAccess().getINKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9045:2: kw= 'In'
                    {
                    kw=(Token)input.LT(1);
                    match(input,120,FOLLOW_120_in_ruleIN18257); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINAccess().getInKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9052:2: kw= 'in'
                    {
                    kw=(Token)input.LT(1);
                    match(input,121,FOLLOW_121_in_ruleIN18276); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINAccess().getInKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIN


    // $ANTLR start entryRuleCLASS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9065:1: entryRuleCLASS returns [String current=null] : iv_ruleCLASS= ruleCLASS EOF ;
    public final String entryRuleCLASS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCLASS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9066:2: (iv_ruleCLASS= ruleCLASS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9067:2: iv_ruleCLASS= ruleCLASS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCLASSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCLASS_in_entryRuleCLASS18317);
            iv_ruleCLASS=ruleCLASS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCLASS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCLASS18328); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCLASS


    // $ANTLR start ruleCLASS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9074:1: ruleCLASS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'CLASS' | kw= 'Class' | kw= 'class' ) ;
    public final AntlrDatatypeRuleToken ruleCLASS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9079:6: ( (kw= 'CLASS' | kw= 'Class' | kw= 'class' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9080:1: (kw= 'CLASS' | kw= 'Class' | kw= 'class' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9080:1: (kw= 'CLASS' | kw= 'Class' | kw= 'class' )
            int alt152=3;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt152=1;
                }
                break;
            case 123:
                {
                alt152=2;
                }
                break;
            case 124:
                {
                alt152=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9080:1: (kw= 'CLASS' | kw= 'Class' | kw= 'class' )", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9081:2: kw= 'CLASS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,122,FOLLOW_122_in_ruleCLASS18366); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCLASSAccess().getCLASSKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9088:2: kw= 'Class'
                    {
                    kw=(Token)input.LT(1);
                    match(input,123,FOLLOW_123_in_ruleCLASS18385); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCLASSAccess().getClassKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9095:2: kw= 'class'
                    {
                    kw=(Token)input.LT(1);
                    match(input,124,FOLLOW_124_in_ruleCLASS18404); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCLASSAccess().getClassKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCLASS


    // $ANTLR start entryRuleIN_CLASS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9108:1: entryRuleIN_CLASS returns [String current=null] : iv_ruleIN_CLASS= ruleIN_CLASS EOF ;
    public final String entryRuleIN_CLASS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIN_CLASS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9109:2: (iv_ruleIN_CLASS= ruleIN_CLASS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9110:2: iv_ruleIN_CLASS= ruleIN_CLASS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIN_CLASSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIN_CLASS_in_entryRuleIN_CLASS18445);
            iv_ruleIN_CLASS=ruleIN_CLASS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIN_CLASS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIN_CLASS18456); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIN_CLASS


    // $ANTLR start ruleIN_CLASS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9117:1: ruleIN_CLASS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IN_0= ruleIN this_CLASS_1= ruleCLASS ) ;
    public final AntlrDatatypeRuleToken ruleIN_CLASS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_IN_0 = null;

        AntlrDatatypeRuleToken this_CLASS_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9122:6: ( (this_IN_0= ruleIN this_CLASS_1= ruleCLASS ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9123:1: (this_IN_0= ruleIN this_CLASS_1= ruleCLASS )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9123:1: (this_IN_0= ruleIN this_CLASS_1= ruleCLASS )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9124:5: this_IN_0= ruleIN this_CLASS_1= ruleCLASS
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_CLASSAccess().getINParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIN_in_ruleIN_CLASS18503);
            this_IN_0=ruleIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_IN_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_CLASSAccess().getCLASSParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleCLASS_in_ruleIN_CLASS18530);
            this_CLASS_1=ruleCLASS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_CLASS_1);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIN_CLASS


    // $ANTLR start entryRuleELEMENTS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9153:1: entryRuleELEMENTS returns [String current=null] : iv_ruleELEMENTS= ruleELEMENTS EOF ;
    public final String entryRuleELEMENTS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleELEMENTS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9154:2: (iv_ruleELEMENTS= ruleELEMENTS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9155:2: iv_ruleELEMENTS= ruleELEMENTS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getELEMENTSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleELEMENTS_in_entryRuleELEMENTS18576);
            iv_ruleELEMENTS=ruleELEMENTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleELEMENTS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleELEMENTS18587); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleELEMENTS


    // $ANTLR start ruleELEMENTS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9162:1: ruleELEMENTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' ) ;
    public final AntlrDatatypeRuleToken ruleELEMENTS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9167:6: ( (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9168:1: (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9168:1: (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' )
            int alt153=3;
            switch ( input.LA(1) ) {
            case 125:
                {
                alt153=1;
                }
                break;
            case 126:
                {
                alt153=2;
                }
                break;
            case 127:
                {
                alt153=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9168:1: (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' )", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9169:2: kw= 'ELEMENTS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,125,FOLLOW_125_in_ruleELEMENTS18625); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELEMENTSAccess().getELEMENTSKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9176:2: kw= 'Elements'
                    {
                    kw=(Token)input.LT(1);
                    match(input,126,FOLLOW_126_in_ruleELEMENTS18644); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELEMENTSAccess().getElementsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9183:2: kw= 'elements'
                    {
                    kw=(Token)input.LT(1);
                    match(input,127,FOLLOW_127_in_ruleELEMENTS18663); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELEMENTSAccess().getElementsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleELEMENTS


    // $ANTLR start entryRuleIN_ELEMENTS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9196:1: entryRuleIN_ELEMENTS returns [String current=null] : iv_ruleIN_ELEMENTS= ruleIN_ELEMENTS EOF ;
    public final String entryRuleIN_ELEMENTS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIN_ELEMENTS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9197:2: (iv_ruleIN_ELEMENTS= ruleIN_ELEMENTS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9198:2: iv_ruleIN_ELEMENTS= ruleIN_ELEMENTS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIN_ELEMENTSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIN_ELEMENTS_in_entryRuleIN_ELEMENTS18704);
            iv_ruleIN_ELEMENTS=ruleIN_ELEMENTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIN_ELEMENTS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIN_ELEMENTS18715); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIN_ELEMENTS


    // $ANTLR start ruleIN_ELEMENTS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9205:1: ruleIN_ELEMENTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS ) ;
    public final AntlrDatatypeRuleToken ruleIN_ELEMENTS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_IN_0 = null;

        AntlrDatatypeRuleToken this_ELEMENTS_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9210:6: ( (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9211:1: (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9211:1: (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9212:5: this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_ELEMENTSAccess().getINParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIN_in_ruleIN_ELEMENTS18762);
            this_IN_0=ruleIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_IN_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_ELEMENTSAccess().getELEMENTSParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleELEMENTS_in_ruleIN_ELEMENTS18789);
            this_ELEMENTS_1=ruleELEMENTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_ELEMENTS_1);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIN_ELEMENTS


    // $ANTLR start entryRuleAS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9241:1: entryRuleAS returns [String current=null] : iv_ruleAS= ruleAS EOF ;
    public final String entryRuleAS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9242:2: (iv_ruleAS= ruleAS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9243:2: iv_ruleAS= ruleAS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getASRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAS_in_entryRuleAS18835);
            iv_ruleAS=ruleAS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAS18846); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAS


    // $ANTLR start ruleAS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9250:1: ruleAS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'AS' | kw= 'As' | kw= 'as' ) ;
    public final AntlrDatatypeRuleToken ruleAS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9255:6: ( (kw= 'AS' | kw= 'As' | kw= 'as' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9256:1: (kw= 'AS' | kw= 'As' | kw= 'as' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9256:1: (kw= 'AS' | kw= 'As' | kw= 'as' )
            int alt154=3;
            switch ( input.LA(1) ) {
            case 128:
                {
                alt154=1;
                }
                break;
            case 129:
                {
                alt154=2;
                }
                break;
            case 130:
                {
                alt154=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9256:1: (kw= 'AS' | kw= 'As' | kw= 'as' )", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9257:2: kw= 'AS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,128,FOLLOW_128_in_ruleAS18884); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASAccess().getASKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9264:2: kw= 'As'
                    {
                    kw=(Token)input.LT(1);
                    match(input,129,FOLLOW_129_in_ruleAS18903); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASAccess().getAsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9271:2: kw= 'as'
                    {
                    kw=(Token)input.LT(1);
                    match(input,130,FOLLOW_130_in_ruleAS18922); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASAccess().getAsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAS


    // $ANTLR start entryRulePROPERTIES
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9284:1: entryRulePROPERTIES returns [String current=null] : iv_rulePROPERTIES= rulePROPERTIES EOF ;
    public final String entryRulePROPERTIES() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePROPERTIES = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9285:2: (iv_rulePROPERTIES= rulePROPERTIES EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9286:2: iv_rulePROPERTIES= rulePROPERTIES EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPROPERTIESRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulePROPERTIES_in_entryRulePROPERTIES18963);
            iv_rulePROPERTIES=rulePROPERTIES();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulePROPERTIES.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePROPERTIES18974); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulePROPERTIES


    // $ANTLR start rulePROPERTIES
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9293:1: rulePROPERTIES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' ) ;
    public final AntlrDatatypeRuleToken rulePROPERTIES() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9298:6: ( (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9299:1: (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9299:1: (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' )
            int alt155=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt155=1;
                }
                break;
            case 132:
                {
                alt155=2;
                }
                break;
            case 133:
                {
                alt155=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9299:1: (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' )", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9300:2: kw= 'PROPERTIES'
                    {
                    kw=(Token)input.LT(1);
                    match(input,131,FOLLOW_131_in_rulePROPERTIES19012); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getPROPERTIESAccess().getPROPERTIESKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9307:2: kw= 'Properties'
                    {
                    kw=(Token)input.LT(1);
                    match(input,132,FOLLOW_132_in_rulePROPERTIES19031); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9314:2: kw= 'properties'
                    {
                    kw=(Token)input.LT(1);
                    match(input,133,FOLLOW_133_in_rulePROPERTIES19050); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulePROPERTIES


    // $ANTLR start entryRuleGROUP_BY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9327:1: entryRuleGROUP_BY returns [String current=null] : iv_ruleGROUP_BY= ruleGROUP_BY EOF ;
    public final String entryRuleGROUP_BY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleGROUP_BY = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9328:2: (iv_ruleGROUP_BY= ruleGROUP_BY EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9329:2: iv_ruleGROUP_BY= ruleGROUP_BY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getGROUP_BYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleGROUP_BY_in_entryRuleGROUP_BY19091);
            iv_ruleGROUP_BY=ruleGROUP_BY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleGROUP_BY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleGROUP_BY19102); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleGROUP_BY


    // $ANTLR start ruleGROUP_BY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9336:1: ruleGROUP_BY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY ) ;
    public final AntlrDatatypeRuleToken ruleGROUP_BY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BY_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9341:6: ( ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9342:1: ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9342:1: ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9342:2: (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9342:2: (kw= 'GROUP' | kw= 'Group' | kw= 'group' )
            int alt156=3;
            switch ( input.LA(1) ) {
            case 134:
                {
                alt156=1;
                }
                break;
            case 135:
                {
                alt156=2;
                }
                break;
            case 136:
                {
                alt156=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9342:2: (kw= 'GROUP' | kw= 'Group' | kw= 'group' )", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9343:2: kw= 'GROUP'
                    {
                    kw=(Token)input.LT(1);
                    match(input,134,FOLLOW_134_in_ruleGROUP_BY19141); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getGROUP_BYAccess().getGROUPKeyword_0_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9350:2: kw= 'Group'
                    {
                    kw=(Token)input.LT(1);
                    match(input,135,FOLLOW_135_in_ruleGROUP_BY19160); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9357:2: kw= 'group'
                    {
                    kw=(Token)input.LT(1);
                    match(input,136,FOLLOW_136_in_ruleGROUP_BY19179); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_2(), null); 
                          
                    }

                    }
                    break;

            }

            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getGROUP_BYAccess().getBYParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleBY_in_ruleGROUP_BY19202);
            this_BY_3=ruleBY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_BY_3);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleGROUP_BY


    // $ANTLR start entryRuleORDER_BY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9381:1: entryRuleORDER_BY returns [String current=null] : iv_ruleORDER_BY= ruleORDER_BY EOF ;
    public final String entryRuleORDER_BY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleORDER_BY = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9382:2: (iv_ruleORDER_BY= ruleORDER_BY EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9383:2: iv_ruleORDER_BY= ruleORDER_BY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getORDER_BYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleORDER_BY_in_entryRuleORDER_BY19248);
            iv_ruleORDER_BY=ruleORDER_BY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleORDER_BY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleORDER_BY19259); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleORDER_BY


    // $ANTLR start ruleORDER_BY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9390:1: ruleORDER_BY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY ) ;
    public final AntlrDatatypeRuleToken ruleORDER_BY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BY_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9395:6: ( ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9396:1: ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9396:1: ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9396:2: (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9396:2: (kw= 'ORDER' | kw= 'Order' | kw= 'order' )
            int alt157=3;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt157=1;
                }
                break;
            case 138:
                {
                alt157=2;
                }
                break;
            case 139:
                {
                alt157=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9396:2: (kw= 'ORDER' | kw= 'Order' | kw= 'order' )", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9397:2: kw= 'ORDER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,137,FOLLOW_137_in_ruleORDER_BY19298); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORDER_BYAccess().getORDERKeyword_0_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9404:2: kw= 'Order'
                    {
                    kw=(Token)input.LT(1);
                    match(input,138,FOLLOW_138_in_ruleORDER_BY19317); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9411:2: kw= 'order'
                    {
                    kw=(Token)input.LT(1);
                    match(input,139,FOLLOW_139_in_ruleORDER_BY19336); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_2(), null); 
                          
                    }

                    }
                    break;

            }

            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getORDER_BYAccess().getBYParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleBY_in_ruleORDER_BY19359);
            this_BY_3=ruleBY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_BY_3);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleORDER_BY


    // $ANTLR start entryRuleBY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9435:1: entryRuleBY returns [String current=null] : iv_ruleBY= ruleBY EOF ;
    public final String entryRuleBY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBY = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9436:2: (iv_ruleBY= ruleBY EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9437:2: iv_ruleBY= ruleBY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBY_in_entryRuleBY19405);
            iv_ruleBY=ruleBY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBY19416); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBY


    // $ANTLR start ruleBY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9444:1: ruleBY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'BY' | kw= 'By' | kw= 'by' ) ;
    public final AntlrDatatypeRuleToken ruleBY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9449:6: ( (kw= 'BY' | kw= 'By' | kw= 'by' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9450:1: (kw= 'BY' | kw= 'By' | kw= 'by' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9450:1: (kw= 'BY' | kw= 'By' | kw= 'by' )
            int alt158=3;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt158=1;
                }
                break;
            case 141:
                {
                alt158=2;
                }
                break;
            case 142:
                {
                alt158=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9450:1: (kw= 'BY' | kw= 'By' | kw= 'by' )", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9451:2: kw= 'BY'
                    {
                    kw=(Token)input.LT(1);
                    match(input,140,FOLLOW_140_in_ruleBY19454); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBYAccess().getBYKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9458:2: kw= 'By'
                    {
                    kw=(Token)input.LT(1);
                    match(input,141,FOLLOW_141_in_ruleBY19473); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBYAccess().getByKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9465:2: kw= 'by'
                    {
                    kw=(Token)input.LT(1);
                    match(input,142,FOLLOW_142_in_ruleBY19492); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBYAccess().getByKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBY


    // $ANTLR start entryRuleASC
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9478:1: entryRuleASC returns [String current=null] : iv_ruleASC= ruleASC EOF ;
    public final String entryRuleASC() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleASC = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9479:2: (iv_ruleASC= ruleASC EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9480:2: iv_ruleASC= ruleASC EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getASCRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleASC_in_entryRuleASC19533);
            iv_ruleASC=ruleASC();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleASC.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleASC19544); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleASC


    // $ANTLR start ruleASC
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9487:1: ruleASC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' ) ;
    public final AntlrDatatypeRuleToken ruleASC() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9492:6: ( (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9493:1: (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9493:1: (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' )
            int alt159=6;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt159=1;
                }
                break;
            case 144:
                {
                alt159=2;
                }
                break;
            case 145:
                {
                alt159=3;
                }
                break;
            case 146:
                {
                alt159=4;
                }
                break;
            case 147:
                {
                alt159=5;
                }
                break;
            case 148:
                {
                alt159=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9493:1: (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' )", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9494:2: kw= 'ASC'
                    {
                    kw=(Token)input.LT(1);
                    match(input,143,FOLLOW_143_in_ruleASC19582); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getASCKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9501:2: kw= 'Asc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,144,FOLLOW_144_in_ruleASC19601); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9508:2: kw= 'asc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,145,FOLLOW_145_in_ruleASC19620); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9515:2: kw= 'ASCENDING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,146,FOLLOW_146_in_ruleASC19639); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getASCENDINGKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9522:2: kw= 'Ascending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,147,FOLLOW_147_in_ruleASC19658); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscendingKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9529:2: kw= 'ascending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,148,FOLLOW_148_in_ruleASC19677); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscendingKeyword_5(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleASC


    // $ANTLR start entryRuleDESC
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9542:1: entryRuleDESC returns [String current=null] : iv_ruleDESC= ruleDESC EOF ;
    public final String entryRuleDESC() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDESC = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9543:2: (iv_ruleDESC= ruleDESC EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9544:2: iv_ruleDESC= ruleDESC EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDESCRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDESC_in_entryRuleDESC19718);
            iv_ruleDESC=ruleDESC();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDESC.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDESC19729); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDESC


    // $ANTLR start ruleDESC
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9551:1: ruleDESC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' ) ;
    public final AntlrDatatypeRuleToken ruleDESC() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9556:6: ( (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9557:1: (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9557:1: (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' )
            int alt160=6;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt160=1;
                }
                break;
            case 150:
                {
                alt160=2;
                }
                break;
            case 151:
                {
                alt160=3;
                }
                break;
            case 152:
                {
                alt160=4;
                }
                break;
            case 153:
                {
                alt160=5;
                }
                break;
            case 154:
                {
                alt160=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9557:1: (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' )", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9558:2: kw= 'DESC'
                    {
                    kw=(Token)input.LT(1);
                    match(input,149,FOLLOW_149_in_ruleDESC19767); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDESCKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9565:2: kw= 'Desc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,150,FOLLOW_150_in_ruleDESC19786); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9572:2: kw= 'desc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,151,FOLLOW_151_in_ruleDESC19805); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9579:2: kw= 'DESCENDING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,152,FOLLOW_152_in_ruleDESC19824); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDESCENDINGKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9586:2: kw= 'Descending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,153,FOLLOW_153_in_ruleDESC19843); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescendingKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9593:2: kw= 'descending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,154,FOLLOW_154_in_ruleDESC19862); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescendingKeyword_5(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDESC


    // $ANTLR start entryRuleHAVING
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9606:1: entryRuleHAVING returns [String current=null] : iv_ruleHAVING= ruleHAVING EOF ;
    public final String entryRuleHAVING() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleHAVING = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9607:2: (iv_ruleHAVING= ruleHAVING EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9608:2: iv_ruleHAVING= ruleHAVING EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getHAVINGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleHAVING_in_entryRuleHAVING19903);
            iv_ruleHAVING=ruleHAVING();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleHAVING.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleHAVING19914); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleHAVING


    // $ANTLR start ruleHAVING
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9615:1: ruleHAVING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'HAVING' | kw= 'Having' | kw= 'having' ) ;
    public final AntlrDatatypeRuleToken ruleHAVING() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9620:6: ( (kw= 'HAVING' | kw= 'Having' | kw= 'having' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9621:1: (kw= 'HAVING' | kw= 'Having' | kw= 'having' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9621:1: (kw= 'HAVING' | kw= 'Having' | kw= 'having' )
            int alt161=3;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt161=1;
                }
                break;
            case 156:
                {
                alt161=2;
                }
                break;
            case 157:
                {
                alt161=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9621:1: (kw= 'HAVING' | kw= 'Having' | kw= 'having' )", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9622:2: kw= 'HAVING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,155,FOLLOW_155_in_ruleHAVING19952); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getHAVINGAccess().getHAVINGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9629:2: kw= 'Having'
                    {
                    kw=(Token)input.LT(1);
                    match(input,156,FOLLOW_156_in_ruleHAVING19971); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getHAVINGAccess().getHavingKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9636:2: kw= 'having'
                    {
                    kw=(Token)input.LT(1);
                    match(input,157,FOLLOW_157_in_ruleHAVING19990); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getHAVINGAccess().getHavingKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleHAVING


    // $ANTLR start entryRuleWHERE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9649:1: entryRuleWHERE returns [String current=null] : iv_ruleWHERE= ruleWHERE EOF ;
    public final String entryRuleWHERE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWHERE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9650:2: (iv_ruleWHERE= ruleWHERE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9651:2: iv_ruleWHERE= ruleWHERE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWHERERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWHERE_in_entryRuleWHERE20031);
            iv_ruleWHERE=ruleWHERE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWHERE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWHERE20042); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWHERE


    // $ANTLR start ruleWHERE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9658:1: ruleWHERE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'WHERE' | kw= 'Where' | kw= 'where' ) ;
    public final AntlrDatatypeRuleToken ruleWHERE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9663:6: ( (kw= 'WHERE' | kw= 'Where' | kw= 'where' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9664:1: (kw= 'WHERE' | kw= 'Where' | kw= 'where' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9664:1: (kw= 'WHERE' | kw= 'Where' | kw= 'where' )
            int alt162=3;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt162=1;
                }
                break;
            case 159:
                {
                alt162=2;
                }
                break;
            case 160:
                {
                alt162=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9664:1: (kw= 'WHERE' | kw= 'Where' | kw= 'where' )", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9665:2: kw= 'WHERE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,158,FOLLOW_158_in_ruleWHERE20080); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHEREAccess().getWHEREKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9672:2: kw= 'Where'
                    {
                    kw=(Token)input.LT(1);
                    match(input,159,FOLLOW_159_in_ruleWHERE20099); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHEREAccess().getWhereKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9679:2: kw= 'where'
                    {
                    kw=(Token)input.LT(1);
                    match(input,160,FOLLOW_160_in_ruleWHERE20118); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHEREAccess().getWhereKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWHERE


    // $ANTLR start entryRuleOR
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9692:1: entryRuleOR returns [String current=null] : iv_ruleOR= ruleOR EOF ;
    public final String entryRuleOR() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOR = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9693:2: (iv_ruleOR= ruleOR EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9694:2: iv_ruleOR= ruleOR EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getORRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOR_in_entryRuleOR20159);
            iv_ruleOR=ruleOR();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOR.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOR20170); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOR


    // $ANTLR start ruleOR
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9701:1: ruleOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OR' | kw= 'Or' | kw= 'or' ) ;
    public final AntlrDatatypeRuleToken ruleOR() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9706:6: ( (kw= 'OR' | kw= 'Or' | kw= 'or' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9707:1: (kw= 'OR' | kw= 'Or' | kw= 'or' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9707:1: (kw= 'OR' | kw= 'Or' | kw= 'or' )
            int alt163=3;
            switch ( input.LA(1) ) {
            case 161:
                {
                alt163=1;
                }
                break;
            case 162:
                {
                alt163=2;
                }
                break;
            case 163:
                {
                alt163=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9707:1: (kw= 'OR' | kw= 'Or' | kw= 'or' )", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9708:2: kw= 'OR'
                    {
                    kw=(Token)input.LT(1);
                    match(input,161,FOLLOW_161_in_ruleOR20208); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORAccess().getORKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9715:2: kw= 'Or'
                    {
                    kw=(Token)input.LT(1);
                    match(input,162,FOLLOW_162_in_ruleOR20227); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORAccess().getOrKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9722:2: kw= 'or'
                    {
                    kw=(Token)input.LT(1);
                    match(input,163,FOLLOW_163_in_ruleOR20246); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORAccess().getOrKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOR


    // $ANTLR start entryRuleAND
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9735:1: entryRuleAND returns [String current=null] : iv_ruleAND= ruleAND EOF ;
    public final String entryRuleAND() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAND = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9736:2: (iv_ruleAND= ruleAND EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9737:2: iv_ruleAND= ruleAND EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getANDRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAND_in_entryRuleAND20287);
            iv_ruleAND=ruleAND();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAND.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAND20298); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAND


    // $ANTLR start ruleAND
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9744:1: ruleAND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'AND' | kw= 'And' | kw= 'and' ) ;
    public final AntlrDatatypeRuleToken ruleAND() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9749:6: ( (kw= 'AND' | kw= 'And' | kw= 'and' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9750:1: (kw= 'AND' | kw= 'And' | kw= 'and' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9750:1: (kw= 'AND' | kw= 'And' | kw= 'and' )
            int alt164=3;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt164=1;
                }
                break;
            case 165:
                {
                alt164=2;
                }
                break;
            case 166:
                {
                alt164=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9750:1: (kw= 'AND' | kw= 'And' | kw= 'and' )", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9751:2: kw= 'AND'
                    {
                    kw=(Token)input.LT(1);
                    match(input,164,FOLLOW_164_in_ruleAND20336); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANDAccess().getANDKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9758:2: kw= 'And'
                    {
                    kw=(Token)input.LT(1);
                    match(input,165,FOLLOW_165_in_ruleAND20355); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANDAccess().getAndKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9765:2: kw= 'and'
                    {
                    kw=(Token)input.LT(1);
                    match(input,166,FOLLOW_166_in_ruleAND20374); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANDAccess().getAndKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAND


    // $ANTLR start entryRuleNOT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9778:1: entryRuleNOT returns [String current=null] : iv_ruleNOT= ruleNOT EOF ;
    public final String entryRuleNOT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNOT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9779:2: (iv_ruleNOT= ruleNOT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9780:2: iv_ruleNOT= ruleNOT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNOTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNOT_in_entryRuleNOT20415);
            iv_ruleNOT=ruleNOT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNOT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNOT20426); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNOT


    // $ANTLR start ruleNOT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9787:1: ruleNOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'NOT' | kw= 'Not' | kw= 'not' ) ;
    public final AntlrDatatypeRuleToken ruleNOT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9792:6: ( (kw= 'NOT' | kw= 'Not' | kw= 'not' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9793:1: (kw= 'NOT' | kw= 'Not' | kw= 'not' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9793:1: (kw= 'NOT' | kw= 'Not' | kw= 'not' )
            int alt165=3;
            switch ( input.LA(1) ) {
            case 167:
                {
                alt165=1;
                }
                break;
            case 168:
                {
                alt165=2;
                }
                break;
            case 16:
                {
                alt165=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9793:1: (kw= 'NOT' | kw= 'Not' | kw= 'not' )", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9794:2: kw= 'NOT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,167,FOLLOW_167_in_ruleNOT20464); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNOTAccess().getNOTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9801:2: kw= 'Not'
                    {
                    kw=(Token)input.LT(1);
                    match(input,168,FOLLOW_168_in_ruleNOT20483); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNOTAccess().getNotKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9808:2: kw= 'not'
                    {
                    kw=(Token)input.LT(1);
                    match(input,16,FOLLOW_16_in_ruleNOT20502); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNOTAccess().getNotKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNOT


    // $ANTLR start entryRuleIS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9821:1: entryRuleIS returns [String current=null] : iv_ruleIS= ruleIS EOF ;
    public final String entryRuleIS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9822:2: (iv_ruleIS= ruleIS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9823:2: iv_ruleIS= ruleIS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getISRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIS_in_entryRuleIS20543);
            iv_ruleIS=ruleIS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIS20554); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIS


    // $ANTLR start ruleIS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9830:1: ruleIS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'IS' | kw= 'Is' | kw= 'is' ) ;
    public final AntlrDatatypeRuleToken ruleIS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9835:6: ( (kw= 'IS' | kw= 'Is' | kw= 'is' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9836:1: (kw= 'IS' | kw= 'Is' | kw= 'is' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9836:1: (kw= 'IS' | kw= 'Is' | kw= 'is' )
            int alt166=3;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt166=1;
                }
                break;
            case 170:
                {
                alt166=2;
                }
                break;
            case 171:
                {
                alt166=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9836:1: (kw= 'IS' | kw= 'Is' | kw= 'is' )", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9837:2: kw= 'IS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,169,FOLLOW_169_in_ruleIS20592); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getISAccess().getISKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9844:2: kw= 'Is'
                    {
                    kw=(Token)input.LT(1);
                    match(input,170,FOLLOW_170_in_ruleIS20611); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getISAccess().getIsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9851:2: kw= 'is'
                    {
                    kw=(Token)input.LT(1);
                    match(input,171,FOLLOW_171_in_ruleIS20630); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getISAccess().getIsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIS


    // $ANTLR start entryRuleBETWEEN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9864:1: entryRuleBETWEEN returns [String current=null] : iv_ruleBETWEEN= ruleBETWEEN EOF ;
    public final String entryRuleBETWEEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBETWEEN = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9865:2: (iv_ruleBETWEEN= ruleBETWEEN EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9866:2: iv_ruleBETWEEN= ruleBETWEEN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBETWEENRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBETWEEN_in_entryRuleBETWEEN20671);
            iv_ruleBETWEEN=ruleBETWEEN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBETWEEN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBETWEEN20682); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBETWEEN


    // $ANTLR start ruleBETWEEN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9873:1: ruleBETWEEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' ) ;
    public final AntlrDatatypeRuleToken ruleBETWEEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9878:6: ( (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9879:1: (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9879:1: (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' )
            int alt167=3;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt167=1;
                }
                break;
            case 173:
                {
                alt167=2;
                }
                break;
            case 174:
                {
                alt167=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9879:1: (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' )", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9880:2: kw= 'BETWEEN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,172,FOLLOW_172_in_ruleBETWEEN20720); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBETWEENAccess().getBETWEENKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9887:2: kw= 'Between'
                    {
                    kw=(Token)input.LT(1);
                    match(input,173,FOLLOW_173_in_ruleBETWEEN20739); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBETWEENAccess().getBetweenKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9894:2: kw= 'between'
                    {
                    kw=(Token)input.LT(1);
                    match(input,174,FOLLOW_174_in_ruleBETWEEN20758); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBETWEENAccess().getBetweenKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBETWEEN


    // $ANTLR start entryRuleLIKE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9907:1: entryRuleLIKE returns [String current=null] : iv_ruleLIKE= ruleLIKE EOF ;
    public final String entryRuleLIKE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLIKE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9908:2: (iv_ruleLIKE= ruleLIKE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9909:2: iv_ruleLIKE= ruleLIKE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLIKERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLIKE_in_entryRuleLIKE20799);
            iv_ruleLIKE=ruleLIKE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLIKE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLIKE20810); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLIKE


    // $ANTLR start ruleLIKE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9916:1: ruleLIKE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'LIKE' | kw= 'Like' | kw= 'like' ) ;
    public final AntlrDatatypeRuleToken ruleLIKE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9921:6: ( (kw= 'LIKE' | kw= 'Like' | kw= 'like' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9922:1: (kw= 'LIKE' | kw= 'Like' | kw= 'like' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9922:1: (kw= 'LIKE' | kw= 'Like' | kw= 'like' )
            int alt168=3;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt168=1;
                }
                break;
            case 176:
                {
                alt168=2;
                }
                break;
            case 53:
                {
                alt168=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9922:1: (kw= 'LIKE' | kw= 'Like' | kw= 'like' )", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9923:2: kw= 'LIKE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,175,FOLLOW_175_in_ruleLIKE20848); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLIKEAccess().getLIKEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9930:2: kw= 'Like'
                    {
                    kw=(Token)input.LT(1);
                    match(input,176,FOLLOW_176_in_ruleLIKE20867); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLIKEAccess().getLikeKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9937:2: kw= 'like'
                    {
                    kw=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_ruleLIKE20886); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLIKEAccess().getLikeKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLIKE


    // $ANTLR start entryRuleMEMBER
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9950:1: entryRuleMEMBER returns [String current=null] : iv_ruleMEMBER= ruleMEMBER EOF ;
    public final String entryRuleMEMBER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleMEMBER = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9951:2: (iv_ruleMEMBER= ruleMEMBER EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9952:2: iv_ruleMEMBER= ruleMEMBER EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMEMBERRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMEMBER_in_entryRuleMEMBER20927);
            iv_ruleMEMBER=ruleMEMBER();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMEMBER.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMEMBER20938); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMEMBER


    // $ANTLR start ruleMEMBER
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9959:1: ruleMEMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'MEMBER' | kw= 'Member' | kw= 'member' ) ;
    public final AntlrDatatypeRuleToken ruleMEMBER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9964:6: ( (kw= 'MEMBER' | kw= 'Member' | kw= 'member' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9965:1: (kw= 'MEMBER' | kw= 'Member' | kw= 'member' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9965:1: (kw= 'MEMBER' | kw= 'Member' | kw= 'member' )
            int alt169=3;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt169=1;
                }
                break;
            case 178:
                {
                alt169=2;
                }
                break;
            case 179:
                {
                alt169=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9965:1: (kw= 'MEMBER' | kw= 'Member' | kw= 'member' )", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9966:2: kw= 'MEMBER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,177,FOLLOW_177_in_ruleMEMBER20976); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMEMBERAccess().getMEMBERKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9973:2: kw= 'Member'
                    {
                    kw=(Token)input.LT(1);
                    match(input,178,FOLLOW_178_in_ruleMEMBER20995); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMEMBERAccess().getMemberKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9980:2: kw= 'member'
                    {
                    kw=(Token)input.LT(1);
                    match(input,179,FOLLOW_179_in_ruleMEMBER21014); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMEMBERAccess().getMemberKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMEMBER


    // $ANTLR start entryRuleOF
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9993:1: entryRuleOF returns [String current=null] : iv_ruleOF= ruleOF EOF ;
    public final String entryRuleOF() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOF = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9994:2: (iv_ruleOF= ruleOF EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9995:2: iv_ruleOF= ruleOF EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOFRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOF_in_entryRuleOF21055);
            iv_ruleOF=ruleOF();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOF.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOF21066); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOF


    // $ANTLR start ruleOF
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10002:1: ruleOF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OF' | kw= 'Of' | kw= 'of' ) ;
    public final AntlrDatatypeRuleToken ruleOF() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10007:6: ( (kw= 'OF' | kw= 'Of' | kw= 'of' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10008:1: (kw= 'OF' | kw= 'Of' | kw= 'of' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10008:1: (kw= 'OF' | kw= 'Of' | kw= 'of' )
            int alt170=3;
            switch ( input.LA(1) ) {
            case 180:
                {
                alt170=1;
                }
                break;
            case 181:
                {
                alt170=2;
                }
                break;
            case 182:
                {
                alt170=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10008:1: (kw= 'OF' | kw= 'Of' | kw= 'of' )", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10009:2: kw= 'OF'
                    {
                    kw=(Token)input.LT(1);
                    match(input,180,FOLLOW_180_in_ruleOF21104); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOFAccess().getOFKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10016:2: kw= 'Of'
                    {
                    kw=(Token)input.LT(1);
                    match(input,181,FOLLOW_181_in_ruleOF21123); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOFAccess().getOfKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10023:2: kw= 'of'
                    {
                    kw=(Token)input.LT(1);
                    match(input,182,FOLLOW_182_in_ruleOF21142); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOFAccess().getOfKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOF


    // $ANTLR start entryRuleESCAPE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10036:1: entryRuleESCAPE returns [String current=null] : iv_ruleESCAPE= ruleESCAPE EOF ;
    public final String entryRuleESCAPE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleESCAPE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10037:2: (iv_ruleESCAPE= ruleESCAPE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10038:2: iv_ruleESCAPE= ruleESCAPE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getESCAPERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleESCAPE_in_entryRuleESCAPE21183);
            iv_ruleESCAPE=ruleESCAPE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleESCAPE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleESCAPE21194); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleESCAPE


    // $ANTLR start ruleESCAPE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10045:1: ruleESCAPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' ) ;
    public final AntlrDatatypeRuleToken ruleESCAPE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10050:6: ( (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10051:1: (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10051:1: (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' )
            int alt171=3;
            switch ( input.LA(1) ) {
            case 183:
                {
                alt171=1;
                }
                break;
            case 184:
                {
                alt171=2;
                }
                break;
            case 185:
                {
                alt171=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10051:1: (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' )", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10052:2: kw= 'ESCAPE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,183,FOLLOW_183_in_ruleESCAPE21232); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getESCAPEAccess().getESCAPEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10059:2: kw= 'Escape'
                    {
                    kw=(Token)input.LT(1);
                    match(input,184,FOLLOW_184_in_ruleESCAPE21251); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getESCAPEAccess().getEscapeKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10066:2: kw= 'escape'
                    {
                    kw=(Token)input.LT(1);
                    match(input,185,FOLLOW_185_in_ruleESCAPE21270); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getESCAPEAccess().getEscapeKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleESCAPE


    // $ANTLR start entryRuleCASE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10079:1: entryRuleCASE returns [String current=null] : iv_ruleCASE= ruleCASE EOF ;
    public final String entryRuleCASE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCASE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10080:2: (iv_ruleCASE= ruleCASE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10081:2: iv_ruleCASE= ruleCASE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCASERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCASE_in_entryRuleCASE21311);
            iv_ruleCASE=ruleCASE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCASE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCASE21322); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCASE


    // $ANTLR start ruleCASE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10088:1: ruleCASE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'CASE' | kw= 'Case' | kw= 'case' ) ;
    public final AntlrDatatypeRuleToken ruleCASE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10093:6: ( (kw= 'CASE' | kw= 'Case' | kw= 'case' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10094:1: (kw= 'CASE' | kw= 'Case' | kw= 'case' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10094:1: (kw= 'CASE' | kw= 'Case' | kw= 'case' )
            int alt172=3;
            switch ( input.LA(1) ) {
            case 186:
                {
                alt172=1;
                }
                break;
            case 187:
                {
                alt172=2;
                }
                break;
            case 188:
                {
                alt172=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10094:1: (kw= 'CASE' | kw= 'Case' | kw= 'case' )", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10095:2: kw= 'CASE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,186,FOLLOW_186_in_ruleCASE21360); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCASEAccess().getCASEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10102:2: kw= 'Case'
                    {
                    kw=(Token)input.LT(1);
                    match(input,187,FOLLOW_187_in_ruleCASE21379); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCASEAccess().getCaseKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10109:2: kw= 'case'
                    {
                    kw=(Token)input.LT(1);
                    match(input,188,FOLLOW_188_in_ruleCASE21398); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCASEAccess().getCaseKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCASE


    // $ANTLR start entryRuleEND
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10122:1: entryRuleEND returns [String current=null] : iv_ruleEND= ruleEND EOF ;
    public final String entryRuleEND() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleEND = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10123:2: (iv_ruleEND= ruleEND EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10124:2: iv_ruleEND= ruleEND EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getENDRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEND_in_entryRuleEND21439);
            iv_ruleEND=ruleEND();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEND.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEND21450); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEND


    // $ANTLR start ruleEND
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10131:1: ruleEND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'END' | kw= 'End' | kw= 'end' ) ;
    public final AntlrDatatypeRuleToken ruleEND() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10136:6: ( (kw= 'END' | kw= 'End' | kw= 'end' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10137:1: (kw= 'END' | kw= 'End' | kw= 'end' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10137:1: (kw= 'END' | kw= 'End' | kw= 'end' )
            int alt173=3;
            switch ( input.LA(1) ) {
            case 189:
                {
                alt173=1;
                }
                break;
            case 190:
                {
                alt173=2;
                }
                break;
            case 191:
                {
                alt173=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10137:1: (kw= 'END' | kw= 'End' | kw= 'end' )", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10138:2: kw= 'END'
                    {
                    kw=(Token)input.LT(1);
                    match(input,189,FOLLOW_189_in_ruleEND21488); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getENDAccess().getENDKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10145:2: kw= 'End'
                    {
                    kw=(Token)input.LT(1);
                    match(input,190,FOLLOW_190_in_ruleEND21507); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getENDAccess().getEndKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10152:2: kw= 'end'
                    {
                    kw=(Token)input.LT(1);
                    match(input,191,FOLLOW_191_in_ruleEND21526); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getENDAccess().getEndKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEND


    // $ANTLR start entryRuleWHEN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10165:1: entryRuleWHEN returns [String current=null] : iv_ruleWHEN= ruleWHEN EOF ;
    public final String entryRuleWHEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWHEN = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10166:2: (iv_ruleWHEN= ruleWHEN EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10167:2: iv_ruleWHEN= ruleWHEN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWHENRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWHEN_in_entryRuleWHEN21567);
            iv_ruleWHEN=ruleWHEN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWHEN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWHEN21578); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWHEN


    // $ANTLR start ruleWHEN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10174:1: ruleWHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'WHEN' | kw= 'When' | kw= 'when' ) ;
    public final AntlrDatatypeRuleToken ruleWHEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10179:6: ( (kw= 'WHEN' | kw= 'When' | kw= 'when' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10180:1: (kw= 'WHEN' | kw= 'When' | kw= 'when' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10180:1: (kw= 'WHEN' | kw= 'When' | kw= 'when' )
            int alt174=3;
            switch ( input.LA(1) ) {
            case 192:
                {
                alt174=1;
                }
                break;
            case 193:
                {
                alt174=2;
                }
                break;
            case 194:
                {
                alt174=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10180:1: (kw= 'WHEN' | kw= 'When' | kw= 'when' )", 174, 0, input);

                throw nvae;
            }

            switch (alt174) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10181:2: kw= 'WHEN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,192,FOLLOW_192_in_ruleWHEN21616); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHENAccess().getWHENKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10188:2: kw= 'When'
                    {
                    kw=(Token)input.LT(1);
                    match(input,193,FOLLOW_193_in_ruleWHEN21635); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHENAccess().getWhenKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10195:2: kw= 'when'
                    {
                    kw=(Token)input.LT(1);
                    match(input,194,FOLLOW_194_in_ruleWHEN21654); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHENAccess().getWhenKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWHEN


    // $ANTLR start entryRuleTHEN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10208:1: entryRuleTHEN returns [String current=null] : iv_ruleTHEN= ruleTHEN EOF ;
    public final String entryRuleTHEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTHEN = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10209:2: (iv_ruleTHEN= ruleTHEN EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10210:2: iv_ruleTHEN= ruleTHEN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTHENRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTHEN_in_entryRuleTHEN21695);
            iv_ruleTHEN=ruleTHEN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTHEN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTHEN21706); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTHEN


    // $ANTLR start ruleTHEN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10217:1: ruleTHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'THEN' | kw= 'Then' | kw= 'then' ) ;
    public final AntlrDatatypeRuleToken ruleTHEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10222:6: ( (kw= 'THEN' | kw= 'Then' | kw= 'then' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10223:1: (kw= 'THEN' | kw= 'Then' | kw= 'then' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10223:1: (kw= 'THEN' | kw= 'Then' | kw= 'then' )
            int alt175=3;
            switch ( input.LA(1) ) {
            case 195:
                {
                alt175=1;
                }
                break;
            case 196:
                {
                alt175=2;
                }
                break;
            case 197:
                {
                alt175=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10223:1: (kw= 'THEN' | kw= 'Then' | kw= 'then' )", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10224:2: kw= 'THEN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,195,FOLLOW_195_in_ruleTHEN21744); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTHENAccess().getTHENKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10231:2: kw= 'Then'
                    {
                    kw=(Token)input.LT(1);
                    match(input,196,FOLLOW_196_in_ruleTHEN21763); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTHENAccess().getThenKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10238:2: kw= 'then'
                    {
                    kw=(Token)input.LT(1);
                    match(input,197,FOLLOW_197_in_ruleTHEN21782); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTHENAccess().getThenKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTHEN


    // $ANTLR start entryRuleELSE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10251:1: entryRuleELSE returns [String current=null] : iv_ruleELSE= ruleELSE EOF ;
    public final String entryRuleELSE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleELSE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10252:2: (iv_ruleELSE= ruleELSE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10253:2: iv_ruleELSE= ruleELSE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getELSERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleELSE_in_entryRuleELSE21823);
            iv_ruleELSE=ruleELSE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleELSE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleELSE21834); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleELSE


    // $ANTLR start ruleELSE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10260:1: ruleELSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ELSE' | kw= 'Else' | kw= 'else' ) ;
    public final AntlrDatatypeRuleToken ruleELSE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10265:6: ( (kw= 'ELSE' | kw= 'Else' | kw= 'else' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10266:1: (kw= 'ELSE' | kw= 'Else' | kw= 'else' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10266:1: (kw= 'ELSE' | kw= 'Else' | kw= 'else' )
            int alt176=3;
            switch ( input.LA(1) ) {
            case 198:
                {
                alt176=1;
                }
                break;
            case 199:
                {
                alt176=2;
                }
                break;
            case 200:
                {
                alt176=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10266:1: (kw= 'ELSE' | kw= 'Else' | kw= 'else' )", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10267:2: kw= 'ELSE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,198,FOLLOW_198_in_ruleELSE21872); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELSEAccess().getELSEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10274:2: kw= 'Else'
                    {
                    kw=(Token)input.LT(1);
                    match(input,199,FOLLOW_199_in_ruleELSE21891); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELSEAccess().getElseKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10281:2: kw= 'else'
                    {
                    kw=(Token)input.LT(1);
                    match(input,200,FOLLOW_200_in_ruleELSE21910); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELSEAccess().getElseKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleELSE


    // $ANTLR start entryRuleSOME
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10294:1: entryRuleSOME returns [String current=null] : iv_ruleSOME= ruleSOME EOF ;
    public final String entryRuleSOME() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSOME = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10295:2: (iv_ruleSOME= ruleSOME EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10296:2: iv_ruleSOME= ruleSOME EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSOMERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSOME_in_entryRuleSOME21951);
            iv_ruleSOME=ruleSOME();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSOME.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSOME21962); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSOME


    // $ANTLR start ruleSOME
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10303:1: ruleSOME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'SOME' | kw= 'Some' | kw= 'some' ) ;
    public final AntlrDatatypeRuleToken ruleSOME() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10308:6: ( (kw= 'SOME' | kw= 'Some' | kw= 'some' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10309:1: (kw= 'SOME' | kw= 'Some' | kw= 'some' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10309:1: (kw= 'SOME' | kw= 'Some' | kw= 'some' )
            int alt177=3;
            switch ( input.LA(1) ) {
            case 201:
                {
                alt177=1;
                }
                break;
            case 202:
                {
                alt177=2;
                }
                break;
            case 203:
                {
                alt177=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10309:1: (kw= 'SOME' | kw= 'Some' | kw= 'some' )", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10310:2: kw= 'SOME'
                    {
                    kw=(Token)input.LT(1);
                    match(input,201,FOLLOW_201_in_ruleSOME22000); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSOMEAccess().getSOMEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10317:2: kw= 'Some'
                    {
                    kw=(Token)input.LT(1);
                    match(input,202,FOLLOW_202_in_ruleSOME22019); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSOMEAccess().getSomeKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10324:2: kw= 'some'
                    {
                    kw=(Token)input.LT(1);
                    match(input,203,FOLLOW_203_in_ruleSOME22038); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSOMEAccess().getSomeKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSOME


    // $ANTLR start entryRuleEXISTS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10337:1: entryRuleEXISTS returns [String current=null] : iv_ruleEXISTS= ruleEXISTS EOF ;
    public final String entryRuleEXISTS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleEXISTS = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10338:2: (iv_ruleEXISTS= ruleEXISTS EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10339:2: iv_ruleEXISTS= ruleEXISTS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEXISTSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEXISTS_in_entryRuleEXISTS22079);
            iv_ruleEXISTS=ruleEXISTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEXISTS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEXISTS22090); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEXISTS


    // $ANTLR start ruleEXISTS
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10346:1: ruleEXISTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' ) ;
    public final AntlrDatatypeRuleToken ruleEXISTS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10351:6: ( (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10352:1: (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10352:1: (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' )
            int alt178=3;
            switch ( input.LA(1) ) {
            case 204:
                {
                alt178=1;
                }
                break;
            case 205:
                {
                alt178=2;
                }
                break;
            case 206:
                {
                alt178=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10352:1: (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' )", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10353:2: kw= 'EXISTS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,204,FOLLOW_204_in_ruleEXISTS22128); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEXISTSAccess().getEXISTSKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10360:2: kw= 'Exists'
                    {
                    kw=(Token)input.LT(1);
                    match(input,205,FOLLOW_205_in_ruleEXISTS22147); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEXISTSAccess().getExistsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10367:2: kw= 'exists'
                    {
                    kw=(Token)input.LT(1);
                    match(input,206,FOLLOW_206_in_ruleEXISTS22166); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEXISTSAccess().getExistsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEXISTS


    // $ANTLR start entryRuleALL
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10380:1: entryRuleALL returns [String current=null] : iv_ruleALL= ruleALL EOF ;
    public final String entryRuleALL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleALL = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10381:2: (iv_ruleALL= ruleALL EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10382:2: iv_ruleALL= ruleALL EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getALLRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleALL_in_entryRuleALL22207);
            iv_ruleALL=ruleALL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleALL.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleALL22218); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleALL


    // $ANTLR start ruleALL
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10389:1: ruleALL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ALL' | kw= 'All' | kw= 'all' ) ;
    public final AntlrDatatypeRuleToken ruleALL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10394:6: ( (kw= 'ALL' | kw= 'All' | kw= 'all' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10395:1: (kw= 'ALL' | kw= 'All' | kw= 'all' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10395:1: (kw= 'ALL' | kw= 'All' | kw= 'all' )
            int alt179=3;
            switch ( input.LA(1) ) {
            case 207:
                {
                alt179=1;
                }
                break;
            case 208:
                {
                alt179=2;
                }
                break;
            case 209:
                {
                alt179=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10395:1: (kw= 'ALL' | kw= 'All' | kw= 'all' )", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10396:2: kw= 'ALL'
                    {
                    kw=(Token)input.LT(1);
                    match(input,207,FOLLOW_207_in_ruleALL22256); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getALLAccess().getALLKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10403:2: kw= 'All'
                    {
                    kw=(Token)input.LT(1);
                    match(input,208,FOLLOW_208_in_ruleALL22275); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getALLAccess().getAllKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10410:2: kw= 'all'
                    {
                    kw=(Token)input.LT(1);
                    match(input,209,FOLLOW_209_in_ruleALL22294); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getALLAccess().getAllKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleALL


    // $ANTLR start entryRuleANY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10423:1: entryRuleANY returns [String current=null] : iv_ruleANY= ruleANY EOF ;
    public final String entryRuleANY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleANY = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10424:2: (iv_ruleANY= ruleANY EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10425:2: iv_ruleANY= ruleANY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getANYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleANY_in_entryRuleANY22335);
            iv_ruleANY=ruleANY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleANY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleANY22346); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleANY


    // $ANTLR start ruleANY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10432:1: ruleANY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ANY' | kw= 'Any' | kw= 'any' ) ;
    public final AntlrDatatypeRuleToken ruleANY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10437:6: ( (kw= 'ANY' | kw= 'Any' | kw= 'any' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10438:1: (kw= 'ANY' | kw= 'Any' | kw= 'any' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10438:1: (kw= 'ANY' | kw= 'Any' | kw= 'any' )
            int alt180=3;
            switch ( input.LA(1) ) {
            case 210:
                {
                alt180=1;
                }
                break;
            case 211:
                {
                alt180=2;
                }
                break;
            case 212:
                {
                alt180=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10438:1: (kw= 'ANY' | kw= 'Any' | kw= 'any' )", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10439:2: kw= 'ANY'
                    {
                    kw=(Token)input.LT(1);
                    match(input,210,FOLLOW_210_in_ruleANY22384); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANYAccess().getANYKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10446:2: kw= 'Any'
                    {
                    kw=(Token)input.LT(1);
                    match(input,211,FOLLOW_211_in_ruleANY22403); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANYAccess().getAnyKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10453:2: kw= 'any'
                    {
                    kw=(Token)input.LT(1);
                    match(input,212,FOLLOW_212_in_ruleANY22422); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANYAccess().getAnyKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleANY


    // $ANTLR start entryRuleSUM
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10466:1: entryRuleSUM returns [String current=null] : iv_ruleSUM= ruleSUM EOF ;
    public final String entryRuleSUM() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSUM = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10467:2: (iv_ruleSUM= ruleSUM EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10468:2: iv_ruleSUM= ruleSUM EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSUMRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSUM_in_entryRuleSUM22463);
            iv_ruleSUM=ruleSUM();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSUM.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSUM22474); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSUM


    // $ANTLR start ruleSUM
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10475:1: ruleSUM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'SUM' | kw= 'Sum' | kw= 'sum' ) ;
    public final AntlrDatatypeRuleToken ruleSUM() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10480:6: ( (kw= 'SUM' | kw= 'Sum' | kw= 'sum' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10481:1: (kw= 'SUM' | kw= 'Sum' | kw= 'sum' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10481:1: (kw= 'SUM' | kw= 'Sum' | kw= 'sum' )
            int alt181=3;
            switch ( input.LA(1) ) {
            case 213:
                {
                alt181=1;
                }
                break;
            case 214:
                {
                alt181=2;
                }
                break;
            case 215:
                {
                alt181=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10481:1: (kw= 'SUM' | kw= 'Sum' | kw= 'sum' )", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10482:2: kw= 'SUM'
                    {
                    kw=(Token)input.LT(1);
                    match(input,213,FOLLOW_213_in_ruleSUM22512); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSUMAccess().getSUMKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10489:2: kw= 'Sum'
                    {
                    kw=(Token)input.LT(1);
                    match(input,214,FOLLOW_214_in_ruleSUM22531); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSUMAccess().getSumKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10496:2: kw= 'sum'
                    {
                    kw=(Token)input.LT(1);
                    match(input,215,FOLLOW_215_in_ruleSUM22550); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSUMAccess().getSumKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSUM


    // $ANTLR start entryRuleAVG
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10509:1: entryRuleAVG returns [String current=null] : iv_ruleAVG= ruleAVG EOF ;
    public final String entryRuleAVG() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAVG = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10510:2: (iv_ruleAVG= ruleAVG EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10511:2: iv_ruleAVG= ruleAVG EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAVGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAVG_in_entryRuleAVG22591);
            iv_ruleAVG=ruleAVG();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAVG.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAVG22602); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAVG


    // $ANTLR start ruleAVG
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10518:1: ruleAVG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'AVG' | kw= 'Avg' | kw= 'avg' ) ;
    public final AntlrDatatypeRuleToken ruleAVG() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10523:6: ( (kw= 'AVG' | kw= 'Avg' | kw= 'avg' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10524:1: (kw= 'AVG' | kw= 'Avg' | kw= 'avg' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10524:1: (kw= 'AVG' | kw= 'Avg' | kw= 'avg' )
            int alt182=3;
            switch ( input.LA(1) ) {
            case 216:
                {
                alt182=1;
                }
                break;
            case 217:
                {
                alt182=2;
                }
                break;
            case 218:
                {
                alt182=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10524:1: (kw= 'AVG' | kw= 'Avg' | kw= 'avg' )", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10525:2: kw= 'AVG'
                    {
                    kw=(Token)input.LT(1);
                    match(input,216,FOLLOW_216_in_ruleAVG22640); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getAVGAccess().getAVGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10532:2: kw= 'Avg'
                    {
                    kw=(Token)input.LT(1);
                    match(input,217,FOLLOW_217_in_ruleAVG22659); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getAVGAccess().getAvgKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10539:2: kw= 'avg'
                    {
                    kw=(Token)input.LT(1);
                    match(input,218,FOLLOW_218_in_ruleAVG22678); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getAVGAccess().getAvgKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAVG


    // $ANTLR start entryRuleMAX
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10552:1: entryRuleMAX returns [String current=null] : iv_ruleMAX= ruleMAX EOF ;
    public final String entryRuleMAX() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleMAX = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10553:2: (iv_ruleMAX= ruleMAX EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10554:2: iv_ruleMAX= ruleMAX EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMAXRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMAX_in_entryRuleMAX22719);
            iv_ruleMAX=ruleMAX();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMAX.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMAX22730); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMAX


    // $ANTLR start ruleMAX
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10561:1: ruleMAX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'MAX' | kw= 'Max' | kw= 'max' ) ;
    public final AntlrDatatypeRuleToken ruleMAX() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10566:6: ( (kw= 'MAX' | kw= 'Max' | kw= 'max' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10567:1: (kw= 'MAX' | kw= 'Max' | kw= 'max' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10567:1: (kw= 'MAX' | kw= 'Max' | kw= 'max' )
            int alt183=3;
            switch ( input.LA(1) ) {
            case 219:
                {
                alt183=1;
                }
                break;
            case 220:
                {
                alt183=2;
                }
                break;
            case 221:
                {
                alt183=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10567:1: (kw= 'MAX' | kw= 'Max' | kw= 'max' )", 183, 0, input);

                throw nvae;
            }

            switch (alt183) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10568:2: kw= 'MAX'
                    {
                    kw=(Token)input.LT(1);
                    match(input,219,FOLLOW_219_in_ruleMAX22768); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMAXAccess().getMAXKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10575:2: kw= 'Max'
                    {
                    kw=(Token)input.LT(1);
                    match(input,220,FOLLOW_220_in_ruleMAX22787); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMAXAccess().getMaxKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10582:2: kw= 'max'
                    {
                    kw=(Token)input.LT(1);
                    match(input,221,FOLLOW_221_in_ruleMAX22806); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMAXAccess().getMaxKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMAX


    // $ANTLR start entryRuleMIN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10595:1: entryRuleMIN returns [String current=null] : iv_ruleMIN= ruleMIN EOF ;
    public final String entryRuleMIN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleMIN = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10596:2: (iv_ruleMIN= ruleMIN EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10597:2: iv_ruleMIN= ruleMIN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMINRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMIN_in_entryRuleMIN22847);
            iv_ruleMIN=ruleMIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMIN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMIN22858); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMIN


    // $ANTLR start ruleMIN
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10604:1: ruleMIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'MIN' | kw= 'Min' | kw= 'min' ) ;
    public final AntlrDatatypeRuleToken ruleMIN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10609:6: ( (kw= 'MIN' | kw= 'Min' | kw= 'min' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10610:1: (kw= 'MIN' | kw= 'Min' | kw= 'min' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10610:1: (kw= 'MIN' | kw= 'Min' | kw= 'min' )
            int alt184=3;
            switch ( input.LA(1) ) {
            case 222:
                {
                alt184=1;
                }
                break;
            case 223:
                {
                alt184=2;
                }
                break;
            case 224:
                {
                alt184=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10610:1: (kw= 'MIN' | kw= 'Min' | kw= 'min' )", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10611:2: kw= 'MIN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,222,FOLLOW_222_in_ruleMIN22896); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMINAccess().getMINKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10618:2: kw= 'Min'
                    {
                    kw=(Token)input.LT(1);
                    match(input,223,FOLLOW_223_in_ruleMIN22915); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMINAccess().getMinKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10625:2: kw= 'min'
                    {
                    kw=(Token)input.LT(1);
                    match(input,224,FOLLOW_224_in_ruleMIN22934); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMINAccess().getMinKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMIN


    // $ANTLR start entryRuleCOUNT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10638:1: entryRuleCOUNT returns [String current=null] : iv_ruleCOUNT= ruleCOUNT EOF ;
    public final String entryRuleCOUNT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCOUNT = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10639:2: (iv_ruleCOUNT= ruleCOUNT EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10640:2: iv_ruleCOUNT= ruleCOUNT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCOUNTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCOUNT_in_entryRuleCOUNT22975);
            iv_ruleCOUNT=ruleCOUNT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCOUNT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCOUNT22986); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCOUNT


    // $ANTLR start ruleCOUNT
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10647:1: ruleCOUNT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'COUNT' | kw= 'Count' | kw= 'count' ) ;
    public final AntlrDatatypeRuleToken ruleCOUNT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10652:6: ( (kw= 'COUNT' | kw= 'Count' | kw= 'count' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10653:1: (kw= 'COUNT' | kw= 'Count' | kw= 'count' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10653:1: (kw= 'COUNT' | kw= 'Count' | kw= 'count' )
            int alt185=3;
            switch ( input.LA(1) ) {
            case 225:
                {
                alt185=1;
                }
                break;
            case 226:
                {
                alt185=2;
                }
                break;
            case 227:
                {
                alt185=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10653:1: (kw= 'COUNT' | kw= 'Count' | kw= 'count' )", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10654:2: kw= 'COUNT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,225,FOLLOW_225_in_ruleCOUNT23024); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCOUNTAccess().getCOUNTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10661:2: kw= 'Count'
                    {
                    kw=(Token)input.LT(1);
                    match(input,226,FOLLOW_226_in_ruleCOUNT23043); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCOUNTAccess().getCountKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10668:2: kw= 'count'
                    {
                    kw=(Token)input.LT(1);
                    match(input,227,FOLLOW_227_in_ruleCOUNT23062); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCOUNTAccess().getCountKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCOUNT


    // $ANTLR start entryRuleINDICES
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10681:1: entryRuleINDICES returns [String current=null] : iv_ruleINDICES= ruleINDICES EOF ;
    public final String entryRuleINDICES() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleINDICES = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10682:2: (iv_ruleINDICES= ruleINDICES EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10683:2: iv_ruleINDICES= ruleINDICES EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getINDICESRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleINDICES_in_entryRuleINDICES23103);
            iv_ruleINDICES=ruleINDICES();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleINDICES.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleINDICES23114); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleINDICES


    // $ANTLR start ruleINDICES
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10690:1: ruleINDICES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' ) ;
    public final AntlrDatatypeRuleToken ruleINDICES() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10695:6: ( (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10696:1: (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10696:1: (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' )
            int alt186=3;
            switch ( input.LA(1) ) {
            case 228:
                {
                alt186=1;
                }
                break;
            case 229:
                {
                alt186=2;
                }
                break;
            case 230:
                {
                alt186=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10696:1: (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' )", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10697:2: kw= 'INDICES'
                    {
                    kw=(Token)input.LT(1);
                    match(input,228,FOLLOW_228_in_ruleINDICES23152); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINDICESAccess().getINDICESKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10704:2: kw= 'Indices'
                    {
                    kw=(Token)input.LT(1);
                    match(input,229,FOLLOW_229_in_ruleINDICES23171); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINDICESAccess().getIndicesKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10711:2: kw= 'indices'
                    {
                    kw=(Token)input.LT(1);
                    match(input,230,FOLLOW_230_in_ruleINDICES23190); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINDICESAccess().getIndicesKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleINDICES


    // $ANTLR start entryRuleTRAILING
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10724:1: entryRuleTRAILING returns [String current=null] : iv_ruleTRAILING= ruleTRAILING EOF ;
    public final String entryRuleTRAILING() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTRAILING = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10725:2: (iv_ruleTRAILING= ruleTRAILING EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10726:2: iv_ruleTRAILING= ruleTRAILING EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTRAILINGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTRAILING_in_entryRuleTRAILING23231);
            iv_ruleTRAILING=ruleTRAILING();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTRAILING.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTRAILING23242); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTRAILING


    // $ANTLR start ruleTRAILING
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10733:1: ruleTRAILING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' ) ;
    public final AntlrDatatypeRuleToken ruleTRAILING() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10738:6: ( (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10739:1: (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10739:1: (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' )
            int alt187=3;
            switch ( input.LA(1) ) {
            case 231:
                {
                alt187=1;
                }
                break;
            case 232:
                {
                alt187=2;
                }
                break;
            case 233:
                {
                alt187=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10739:1: (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' )", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10740:2: kw= 'TRAILING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,231,FOLLOW_231_in_ruleTRAILING23280); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRAILINGAccess().getTRAILINGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10747:2: kw= 'Trailing'
                    {
                    kw=(Token)input.LT(1);
                    match(input,232,FOLLOW_232_in_ruleTRAILING23299); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRAILINGAccess().getTrailingKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10754:2: kw= 'trailing'
                    {
                    kw=(Token)input.LT(1);
                    match(input,233,FOLLOW_233_in_ruleTRAILING23318); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRAILINGAccess().getTrailingKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTRAILING


    // $ANTLR start entryRuleLEADING
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10767:1: entryRuleLEADING returns [String current=null] : iv_ruleLEADING= ruleLEADING EOF ;
    public final String entryRuleLEADING() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLEADING = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10768:2: (iv_ruleLEADING= ruleLEADING EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10769:2: iv_ruleLEADING= ruleLEADING EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLEADINGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLEADING_in_entryRuleLEADING23359);
            iv_ruleLEADING=ruleLEADING();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLEADING.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLEADING23370); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLEADING


    // $ANTLR start ruleLEADING
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10776:1: ruleLEADING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' ) ;
    public final AntlrDatatypeRuleToken ruleLEADING() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10781:6: ( (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10782:1: (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10782:1: (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' )
            int alt188=3;
            switch ( input.LA(1) ) {
            case 234:
                {
                alt188=1;
                }
                break;
            case 235:
                {
                alt188=2;
                }
                break;
            case 236:
                {
                alt188=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10782:1: (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' )", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10783:2: kw= 'LEADING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,234,FOLLOW_234_in_ruleLEADING23408); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEADINGAccess().getLEADINGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10790:2: kw= 'Leading'
                    {
                    kw=(Token)input.LT(1);
                    match(input,235,FOLLOW_235_in_ruleLEADING23427); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEADINGAccess().getLeadingKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10797:2: kw= 'leading'
                    {
                    kw=(Token)input.LT(1);
                    match(input,236,FOLLOW_236_in_ruleLEADING23446); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEADINGAccess().getLeadingKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLEADING


    // $ANTLR start entryRuleBOTH
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10810:1: entryRuleBOTH returns [String current=null] : iv_ruleBOTH= ruleBOTH EOF ;
    public final String entryRuleBOTH() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBOTH = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10811:2: (iv_ruleBOTH= ruleBOTH EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10812:2: iv_ruleBOTH= ruleBOTH EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBOTHRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBOTH_in_entryRuleBOTH23487);
            iv_ruleBOTH=ruleBOTH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBOTH.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBOTH23498); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBOTH


    // $ANTLR start ruleBOTH
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10819:1: ruleBOTH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'BOTH' | kw= 'Both' | kw= 'both' ) ;
    public final AntlrDatatypeRuleToken ruleBOTH() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10824:6: ( (kw= 'BOTH' | kw= 'Both' | kw= 'both' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10825:1: (kw= 'BOTH' | kw= 'Both' | kw= 'both' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10825:1: (kw= 'BOTH' | kw= 'Both' | kw= 'both' )
            int alt189=3;
            switch ( input.LA(1) ) {
            case 237:
                {
                alt189=1;
                }
                break;
            case 238:
                {
                alt189=2;
                }
                break;
            case 239:
                {
                alt189=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10825:1: (kw= 'BOTH' | kw= 'Both' | kw= 'both' )", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10826:2: kw= 'BOTH'
                    {
                    kw=(Token)input.LT(1);
                    match(input,237,FOLLOW_237_in_ruleBOTH23536); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBOTHAccess().getBOTHKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10833:2: kw= 'Both'
                    {
                    kw=(Token)input.LT(1);
                    match(input,238,FOLLOW_238_in_ruleBOTH23555); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBOTHAccess().getBothKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10840:2: kw= 'both'
                    {
                    kw=(Token)input.LT(1);
                    match(input,239,FOLLOW_239_in_ruleBOTH23574); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBOTHAccess().getBothKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBOTH


    // $ANTLR start entryRuleNULL
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10853:1: entryRuleNULL returns [String current=null] : iv_ruleNULL= ruleNULL EOF ;
    public final String entryRuleNULL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNULL = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10854:2: (iv_ruleNULL= ruleNULL EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10855:2: iv_ruleNULL= ruleNULL EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNULLRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNULL_in_entryRuleNULL23615);
            iv_ruleNULL=ruleNULL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNULL.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNULL23626); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNULL


    // $ANTLR start ruleNULL
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10862:1: ruleNULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'NULL' | kw= 'Null' | kw= 'null' ) ;
    public final AntlrDatatypeRuleToken ruleNULL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10867:6: ( (kw= 'NULL' | kw= 'Null' | kw= 'null' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10868:1: (kw= 'NULL' | kw= 'Null' | kw= 'null' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10868:1: (kw= 'NULL' | kw= 'Null' | kw= 'null' )
            int alt190=3;
            switch ( input.LA(1) ) {
            case 240:
                {
                alt190=1;
                }
                break;
            case 241:
                {
                alt190=2;
                }
                break;
            case 17:
                {
                alt190=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10868:1: (kw= 'NULL' | kw= 'Null' | kw= 'null' )", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10869:2: kw= 'NULL'
                    {
                    kw=(Token)input.LT(1);
                    match(input,240,FOLLOW_240_in_ruleNULL23664); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNULLAccess().getNULLKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10876:2: kw= 'Null'
                    {
                    kw=(Token)input.LT(1);
                    match(input,241,FOLLOW_241_in_ruleNULL23683); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNULLAccess().getNullKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10883:2: kw= 'null'
                    {
                    kw=(Token)input.LT(1);
                    match(input,17,FOLLOW_17_in_ruleNULL23702); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNULLAccess().getNullKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNULL


    // $ANTLR start entryRuleTRUE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10896:1: entryRuleTRUE returns [String current=null] : iv_ruleTRUE= ruleTRUE EOF ;
    public final String entryRuleTRUE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTRUE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10897:2: (iv_ruleTRUE= ruleTRUE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10898:2: iv_ruleTRUE= ruleTRUE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTRUERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTRUE_in_entryRuleTRUE23743);
            iv_ruleTRUE=ruleTRUE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTRUE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTRUE23754); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTRUE


    // $ANTLR start ruleTRUE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10905:1: ruleTRUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'TRUE' | kw= 'True' | kw= 'true' ) ;
    public final AntlrDatatypeRuleToken ruleTRUE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10910:6: ( (kw= 'TRUE' | kw= 'True' | kw= 'true' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10911:1: (kw= 'TRUE' | kw= 'True' | kw= 'true' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10911:1: (kw= 'TRUE' | kw= 'True' | kw= 'true' )
            int alt191=3;
            switch ( input.LA(1) ) {
            case 242:
                {
                alt191=1;
                }
                break;
            case 243:
                {
                alt191=2;
                }
                break;
            case 244:
                {
                alt191=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10911:1: (kw= 'TRUE' | kw= 'True' | kw= 'true' )", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10912:2: kw= 'TRUE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,242,FOLLOW_242_in_ruleTRUE23792); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRUEAccess().getTRUEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10919:2: kw= 'True'
                    {
                    kw=(Token)input.LT(1);
                    match(input,243,FOLLOW_243_in_ruleTRUE23811); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRUEAccess().getTrueKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10926:2: kw= 'true'
                    {
                    kw=(Token)input.LT(1);
                    match(input,244,FOLLOW_244_in_ruleTRUE23830); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRUEAccess().getTrueKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTRUE


    // $ANTLR start entryRuleFALSE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10939:1: entryRuleFALSE returns [String current=null] : iv_ruleFALSE= ruleFALSE EOF ;
    public final String entryRuleFALSE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFALSE = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10940:2: (iv_ruleFALSE= ruleFALSE EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10941:2: iv_ruleFALSE= ruleFALSE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFALSERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFALSE_in_entryRuleFALSE23871);
            iv_ruleFALSE=ruleFALSE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFALSE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFALSE23882); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFALSE


    // $ANTLR start ruleFALSE
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10948:1: ruleFALSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FALSE' | kw= 'False' | kw= 'false' ) ;
    public final AntlrDatatypeRuleToken ruleFALSE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10953:6: ( (kw= 'FALSE' | kw= 'False' | kw= 'false' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10954:1: (kw= 'FALSE' | kw= 'False' | kw= 'false' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10954:1: (kw= 'FALSE' | kw= 'False' | kw= 'false' )
            int alt192=3;
            switch ( input.LA(1) ) {
            case 245:
                {
                alt192=1;
                }
                break;
            case 246:
                {
                alt192=2;
                }
                break;
            case 247:
                {
                alt192=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10954:1: (kw= 'FALSE' | kw= 'False' | kw= 'false' )", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10955:2: kw= 'FALSE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,245,FOLLOW_245_in_ruleFALSE23920); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFALSEAccess().getFALSEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10962:2: kw= 'False'
                    {
                    kw=(Token)input.LT(1);
                    match(input,246,FOLLOW_246_in_ruleFALSE23939); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFALSEAccess().getFalseKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10969:2: kw= 'false'
                    {
                    kw=(Token)input.LT(1);
                    match(input,247,FOLLOW_247_in_ruleFALSE23958); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFALSEAccess().getFalseKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFALSE


    // $ANTLR start entryRuleEMPTY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10982:1: entryRuleEMPTY returns [String current=null] : iv_ruleEMPTY= ruleEMPTY EOF ;
    public final String entryRuleEMPTY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleEMPTY = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10983:2: (iv_ruleEMPTY= ruleEMPTY EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10984:2: iv_ruleEMPTY= ruleEMPTY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEMPTYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEMPTY_in_entryRuleEMPTY23999);
            iv_ruleEMPTY=ruleEMPTY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEMPTY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEMPTY24010); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEMPTY


    // $ANTLR start ruleEMPTY
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10991:1: ruleEMPTY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' ) ;
    public final AntlrDatatypeRuleToken ruleEMPTY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10996:6: ( (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10997:1: (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10997:1: (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' )
            int alt193=3;
            switch ( input.LA(1) ) {
            case 248:
                {
                alt193=1;
                }
                break;
            case 249:
                {
                alt193=2;
                }
                break;
            case 18:
                {
                alt193=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10997:1: (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' )", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10998:2: kw= 'EMPTY'
                    {
                    kw=(Token)input.LT(1);
                    match(input,248,FOLLOW_248_in_ruleEMPTY24048); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEMPTYAccess().getEMPTYKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11005:2: kw= 'Empty'
                    {
                    kw=(Token)input.LT(1);
                    match(input,249,FOLLOW_249_in_ruleEMPTY24067); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEMPTYAccess().getEmptyKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11012:2: kw= 'empty'
                    {
                    kw=(Token)input.LT(1);
                    match(input,18,FOLLOW_18_in_ruleEMPTY24086); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEMPTYAccess().getEmptyKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEMPTY


    // $ANTLR start entryRulekeyword
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11025:1: entryRulekeyword returns [String current=null] : iv_rulekeyword= rulekeyword EOF ;
    public final String entryRulekeyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulekeyword = null;


        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11026:2: (iv_rulekeyword= rulekeyword EOF )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11027:2: iv_rulekeyword= rulekeyword EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getKeywordRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulekeyword_in_entryRulekeyword24127);
            iv_rulekeyword=rulekeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulekeyword.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulekeyword24138); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulekeyword


    // $ANTLR start rulekeyword
    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11034:1: rulekeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' ) ;
    public final AntlrDatatypeRuleToken rulekeyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11039:6: ( (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' ) )
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11040:1: (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' )
            {
            // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11040:1: (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' )
            int alt194=13;
            switch ( input.LA(1) ) {
            case 209:
                {
                alt194=1;
                }
                break;
            case 59:
                {
                alt194=2;
                }
                break;
            case 30:
                {
                alt194=3;
                }
                break;
            case 40:
                {
                alt194=4;
                }
                break;
            case 25:
                {
                alt194=5;
                }
                break;
            case 23:
                {
                alt194=6;
                }
                break;
            case 38:
                {
                alt194=7;
                }
                break;
            case 221:
                {
                alt194=8;
                }
                break;
            case 194:
                {
                alt194=9;
                }
                break;
            case 179:
                {
                alt194=10;
                }
                break;
            case 191:
                {
                alt194=11;
                }
                break;
            case 91:
                {
                alt194=12;
                }
                break;
            case 26:
                {
                alt194=13;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("11040:1: (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' )", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11041:2: kw= 'all'
                    {
                    kw=(Token)input.LT(1);
                    match(input,209,FOLLOW_209_in_rulekeyword24176); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getAllKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11048:2: kw= 'length'
                    {
                    kw=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_rulekeyword24195); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getLengthKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11055:2: kw= 'char'
                    {
                    kw=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_rulekeyword24214); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getCharKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11062:2: kw= 'type'
                    {
                    kw=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_rulekeyword24233); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getTypeKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11069:2: kw= 'file'
                    {
                    kw=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_rulekeyword24252); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getFileKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11076:2: kw= 'text'
                    {
                    kw=(Token)input.LT(1);
                    match(input,23,FOLLOW_23_in_rulekeyword24271); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getTextKeyword_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11083:2: kw= 'title'
                    {
                    kw=(Token)input.LT(1);
                    match(input,38,FOLLOW_38_in_rulekeyword24290); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getTitleKeyword_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11090:2: kw= 'max'
                    {
                    kw=(Token)input.LT(1);
                    match(input,221,FOLLOW_221_in_rulekeyword24309); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getMaxKeyword_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11097:2: kw= 'when'
                    {
                    kw=(Token)input.LT(1);
                    match(input,194,FOLLOW_194_in_rulekeyword24328); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getWhenKeyword_8(), null); 
                          
                    }

                    }
                    break;
                case 10 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11104:2: kw= 'member'
                    {
                    kw=(Token)input.LT(1);
                    match(input,179,FOLLOW_179_in_rulekeyword24347); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getMemberKeyword_9(), null); 
                          
                    }

                    }
                    break;
                case 11 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11111:2: kw= 'end'
                    {
                    kw=(Token)input.LT(1);
                    match(input,191,FOLLOW_191_in_rulekeyword24366); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getEndKeyword_10(), null); 
                          
                    }

                    }
                    break;
                case 12 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11118:2: kw= 'object'
                    {
                    kw=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_rulekeyword24385); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getObjectKeyword_11(), null); 
                          
                    }

                    }
                    break;
                case 13 :
                    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11125:2: kw= 'date'
                    {
                    kw=(Token)input.LT(1);
                    match(input,26,FOLLOW_26_in_rulekeyword24404); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getDateKeyword_12(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulekeyword

    // $ANTLR start synpred14
    public final void synpred14_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:415:4: ( ({...}? => ( ( ( 'unique' ) ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:415:4: ({...}? => ( ( ( 'unique' ) ) ) )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:415:4: ({...}? => ( ( ( 'unique' ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:416:5: {...}? => ( ( ( 'unique' ) ) )
        {
        if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)");
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:416:104: ( ( ( 'unique' ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:417:6: ( ( 'unique' ) )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0);
          	 				
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:420:6: ( ( 'unique' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:421:1: ( 'unique' )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:421:1: ( 'unique' )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:422:3: 'unique'
        {
        match(input,14,FOLLOW_14_in_synpred14780); if (failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred14

    // $ANTLR start synpred15
    public final void synpred15_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:448:4: ( ({...}? => ( ( ( 'fixed' ) ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:448:4: ({...}? => ( ( ( 'fixed' ) ) ) )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:448:4: ({...}? => ( ( ( 'fixed' ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:449:5: {...}? => ( ( ( 'fixed' ) ) )
        {
        if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)");
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:449:104: ( ( ( 'fixed' ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:450:6: ( ( 'fixed' ) )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1);
          	 				
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:453:6: ( ( 'fixed' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:454:1: ( 'fixed' )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:454:1: ( 'fixed' )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:455:3: 'fixed'
        {
        match(input,15,FOLLOW_15_in_synpred15861); if (failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred15

    // $ANTLR start synpred16
    public final void synpred16_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:481:4: ( ({...}? => ( ( ( ( 'not' ) ) 'null' ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:481:4: ({...}? => ( ( ( ( 'not' ) ) 'null' ) ) )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:481:4: ({...}? => ( ( ( ( 'not' ) ) 'null' ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:482:5: {...}? => ( ( ( ( 'not' ) ) 'null' ) )
        {
        if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred16", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)");
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:482:104: ( ( ( ( 'not' ) ) 'null' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:483:6: ( ( ( 'not' ) ) 'null' )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2);
          	 				
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:486:6: ( ( ( 'not' ) ) 'null' )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:486:7: ( ( 'not' ) ) 'null'
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:486:7: ( ( 'not' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:487:1: ( 'not' )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:487:1: ( 'not' )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:488:3: 'not'
        {
        match(input,16,FOLLOW_16_in_synpred16943); if (failed) return ;

        }


        }

        match(input,17,FOLLOW_17_in_synpred16966); if (failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred16

    // $ANTLR start synpred17
    public final void synpred17_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:518:4: ( ({...}? => ( ( ( ( 'not' ) ) 'empty' ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:518:4: ({...}? => ( ( ( ( 'not' ) ) 'empty' ) ) )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:518:4: ({...}? => ( ( ( ( 'not' ) ) 'empty' ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:519:5: {...}? => ( ( ( ( 'not' ) ) 'empty' ) )
        {
        if ( !(getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)");
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:519:104: ( ( ( ( 'not' ) ) 'empty' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:520:6: ( ( ( 'not' ) ) 'empty' )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3);
          	 				
        }
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:523:6: ( ( ( 'not' ) ) 'empty' )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:523:7: ( ( 'not' ) ) 'empty'
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:523:7: ( ( 'not' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:524:1: ( 'not' )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:524:1: ( 'not' )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:525:3: 'not'
        {
        match(input,16,FOLLOW_16_in_synpred171036); if (failed) return ;

        }


        }

        match(input,18,FOLLOW_18_in_synpred171059); if (failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred17

    // $ANTLR start synpred38
    public final void synpred38_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1274:1: ( ( ruletype ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1274:1: ( ruletype )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1274:1: ( ruletype )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1275:3: ruletype
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getPointerAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruletype_in_synpred382427);
        ruletype();
        _fsp--;
        if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred38

    // $ANTLR start synpred39
    public final void synpred39_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1339:1: ( ( ruletype ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1339:1: ( ruletype )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1339:1: ( ruletype )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1340:3: ruletype
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruletype_in_synpred392542);
        ruletype();
        _fsp--;
        if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred39

    // $ANTLR start synpred94
    public final void synpred94_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3925:2: ( ( ( rulestatement ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3925:2: ( ( rulestatement ) )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3925:2: ( ( rulestatement ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3926:1: ( rulestatement )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3926:1: ( rulestatement )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3927:3: rulestatement
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_rulestatement_in_synpred947563);
        rulestatement();
        _fsp--;
        if (failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred94

    // $ANTLR start synpred157
    public final void synpred157_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:2: ( ( ruleCASE ( ( rulewhenClause ) )+ ( ( ruleelseClause ) )? ruleEND ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:2: ( ruleCASE ( ( rulewhenClause ) )+ ( ( ruleelseClause ) )? ruleEND )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:2: ( ruleCASE ( ( rulewhenClause ) )+ ( ( ruleelseClause ) )? ruleEND )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:3: ruleCASE ( ( rulewhenClause ) )+ ( ( ruleelseClause ) )? ruleEND
        {
        pushFollow(FOLLOW_ruleCASE_in_synpred15712601);
        ruleCASE();
        _fsp--;
        if (failed) return ;
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6666:11: ( ( rulewhenClause ) )+
        int cnt207=0;
        loop207:
        do {
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( ((LA207_0>=192 && LA207_0<=194)) ) {
                alt207=1;
            }


            switch (alt207) {
        	case 1 :
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6667:1: ( rulewhenClause )
        	    {
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6667:1: ( rulewhenClause )
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6668:3: rulewhenClause
        	    {
        	    if ( backtracking==0 ) {
        	       
        	      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0(), currentNode); 
        	      	    
        	    }
        	    pushFollow(FOLLOW_rulewhenClause_in_synpred15712614);
        	    rulewhenClause();
        	    _fsp--;
        	    if (failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt207 >= 1 ) break loop207;
        	    if (backtracking>0) {failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(207, input);
                    throw eee;
            }
            cnt207++;
        } while (true);

        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6690:3: ( ( ruleelseClause ) )?
        int alt208=2;
        int LA208_0 = input.LA(1);

        if ( ((LA208_0>=198 && LA208_0<=200)) ) {
            alt208=1;
        }
        switch (alt208) {
            case 1 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6691:1: ( ruleelseClause )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6691:1: ( ruleelseClause )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6692:3: ruleelseClause
                {
                if ( backtracking==0 ) {
                   
                  	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0(), currentNode); 
                  	    
                }
                pushFollow(FOLLOW_ruleelseClause_in_synpred15712636);
                ruleelseClause();
                _fsp--;
                if (failed) return ;

                }


                }
                break;

        }

        pushFollow(FOLLOW_ruleEND_in_synpred15712646);
        ruleEND();
        _fsp--;
        if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred157

    // $ANTLR start synpred172
    public final void synpred172_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7231:2: ( ruleexpressionOrVector )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7231:2: ruleexpressionOrVector
        {
        if ( backtracking==0 ) {
           
          	  /* */ 
          	
        }
        pushFollow(FOLLOW_ruleexpressionOrVector_in_synpred17213596);
        ruleexpressionOrVector();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred172

    // $ANTLR start synpred177
    public final void synpred177_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:17: ( ( '.' ruleidentifier ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:17: ( '.' ruleidentifier )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:17: ( '.' ruleidentifier )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:19: '.' ruleidentifier
        {
        match(input,36,FOLLOW_36_in_synpred17714013); if (failed) return ;
        pushFollow(FOLLOW_ruleidentifier_in_synpred17714022);
        ruleidentifier();
        _fsp--;
        if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred177

    // $ANTLR start synpred195
    public final void synpred195_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:2: ( ( ( ( ruleexpression ) ) ( ',' ( ( ruleexpression ) ) )* ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:2: ( ( ( ruleexpression ) ) ( ',' ( ( ruleexpression ) ) )* )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:2: ( ( ( ruleexpression ) ) ( ',' ( ( ruleexpression ) ) )* )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:3: ( ( ruleexpression ) ) ( ',' ( ( ruleexpression ) ) )*
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:3: ( ( ruleexpression ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7702:1: ( ruleexpression )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7702:1: ( ruleexpression )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7703:3: ruleexpression
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleexpression_in_synpred19514668);
        ruleexpression();
        _fsp--;
        if (failed) return ;

        }


        }

        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7725:2: ( ',' ( ( ruleexpression ) ) )*
        loop218:
        do {
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==28) ) {
                alt218=1;
            }


            switch (alt218) {
        	case 1 :
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7725:4: ',' ( ( ruleexpression ) )
        	    {
        	    match(input,28,FOLLOW_28_in_synpred19514679); if (failed) return ;
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7729:1: ( ( ruleexpression ) )
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7730:1: ( ruleexpression )
        	    {
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7730:1: ( ruleexpression )
        	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7731:3: ruleexpression
        	    {
        	    if ( backtracking==0 ) {
        	       
        	      	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0(), currentNode); 
        	      	    
        	    }
        	    pushFollow(FOLLOW_ruleexpression_in_synpred19514700);
        	    ruleexpression();
        	    _fsp--;
        	    if (failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop218;
            }
        } while (true);


        }


        }
    }
    // $ANTLR end synpred195

    // $ANTLR start synpred203
    public final void synpred203_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:17: ( ( ( ( ruleexpression ) ) ( ( ',' ( ( ruleexpression ) ) )+ | ( ruleFROM ( ( ruleexpression ) ) ) | ( ruleAS ( ( ruleidentifier ) ) ) )? ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:17: ( ( ( ruleexpression ) ) ( ( ',' ( ( ruleexpression ) ) )+ | ( ruleFROM ( ( ruleexpression ) ) ) | ( ruleAS ( ( ruleidentifier ) ) ) )? )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:17: ( ( ( ruleexpression ) ) ( ( ',' ( ( ruleexpression ) ) )+ | ( ruleFROM ( ( ruleexpression ) ) ) | ( ruleAS ( ( ruleidentifier ) ) ) )? )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:18: ( ( ruleexpression ) ) ( ( ',' ( ( ruleexpression ) ) )+ | ( ruleFROM ( ( ruleexpression ) ) ) | ( ruleAS ( ( ruleidentifier ) ) ) )?
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7807:18: ( ( ruleexpression ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7808:1: ( ruleexpression )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7808:1: ( ruleexpression )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7809:3: ruleexpression
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleexpression_in_synpred20314854);
        ruleexpression();
        _fsp--;
        if (failed) return ;

        }


        }

        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:2: ( ( ',' ( ( ruleexpression ) ) )+ | ( ruleFROM ( ( ruleexpression ) ) ) | ( ruleAS ( ( ruleidentifier ) ) ) )?
        int alt221=4;
        switch ( input.LA(1) ) {
            case 28:
                {
                alt221=1;
                }
                break;
            case 92:
            case 93:
            case 94:
                {
                alt221=2;
                }
                break;
            case 128:
            case 129:
            case 130:
                {
                alt221=3;
                }
                break;
        }

        switch (alt221) {
            case 1 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:3: ( ',' ( ( ruleexpression ) ) )+
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:3: ( ',' ( ( ruleexpression ) ) )+
                int cnt220=0;
                loop220:
                do {
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==28) ) {
                        alt220=1;
                    }


                    switch (alt220) {
                	case 1 :
                	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7831:5: ',' ( ( ruleexpression ) )
                	    {
                	    match(input,28,FOLLOW_28_in_synpred20314866); if (failed) return ;
                	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7835:1: ( ( ruleexpression ) )
                	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7836:1: ( ruleexpression )
                	    {
                	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7836:1: ( ruleexpression )
                	    // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7837:3: ruleexpression
                	    {
                	    if ( backtracking==0 ) {
                	       
                	      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0(), currentNode); 
                	      	    
                	    }
                	    pushFollow(FOLLOW_ruleexpression_in_synpred20314887);
                	    ruleexpression();
                	    _fsp--;
                	    if (failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt220 >= 1 ) break loop220;
                	    if (backtracking>0) {failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(220, input);
                            throw eee;
                    }
                    cnt220++;
                } while (true);


                }
                break;
            case 2 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:6: ( ruleFROM ( ( ruleexpression ) ) )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:6: ( ruleFROM ( ( ruleexpression ) ) )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:7: ruleFROM ( ( ruleexpression ) )
                {
                pushFollow(FOLLOW_ruleFROM_in_synpred20314905);
                ruleFROM();
                _fsp--;
                if (failed) return ;
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7860:15: ( ( ruleexpression ) )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7861:1: ( ruleexpression )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7861:1: ( ruleexpression )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7862:3: ruleexpression
                {
                if ( backtracking==0 ) {
                   
                  	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0(), currentNode); 
                  	    
                }
                pushFollow(FOLLOW_ruleexpression_in_synpred20314918);
                ruleexpression();
                _fsp--;
                if (failed) return ;

                }


                }


                }


                }
                break;
            case 3 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:6: ( ruleAS ( ( ruleidentifier ) ) )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:6: ( ruleAS ( ( ruleidentifier ) ) )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:7: ruleAS ( ( ruleidentifier ) )
                {
                pushFollow(FOLLOW_ruleAS_in_synpred20314935);
                ruleAS();
                _fsp--;
                if (failed) return ;
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7885:13: ( ( ruleidentifier ) )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7886:1: ( ruleidentifier )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7886:1: ( ruleidentifier )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7887:3: ruleidentifier
                {
                if ( backtracking==0 ) {
                   
                  	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0(), currentNode); 
                  	    
                }
                pushFollow(FOLLOW_ruleidentifier_in_synpred20314948);
                ruleidentifier();
                _fsp--;
                if (failed) return ;

                }


                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred203

    // $ANTLR start synpred204
    public final void synpred204_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:6: ( ( ruleFROM ( ( ruleexpression ) ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:6: ( ruleFROM ( ( ruleexpression ) ) )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:6: ( ruleFROM ( ( ruleexpression ) ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:7: ruleFROM ( ( ruleexpression ) )
        {
        pushFollow(FOLLOW_ruleFROM_in_synpred20414968);
        ruleFROM();
        _fsp--;
        if (failed) return ;
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:15: ( ( ruleexpression ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7911:1: ( ruleexpression )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7911:1: ( ruleexpression )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7912:3: ruleexpression
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleexpression_in_synpred20414981);
        ruleexpression();
        _fsp--;
        if (failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred204

    // $ANTLR start synpred251
    public final void synpred251_fragment() throws RecognitionException {   
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:6: ( ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' ) )
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:6: ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' )
        {
        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:6: ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' )
        int alt244=4;
        switch ( input.LA(1) ) {
        case 36:
            {
            alt244=1;
            }
            break;
        case 76:
            {
            alt244=2;
            }
            break;
        case 77:
            {
            alt244=3;
            }
            break;
        case 78:
            {
            alt244=4;
            }
            break;
        default:
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("8349:6: ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' )", 244, 0, input);

            throw nvae;
        }

        switch (alt244) {
            case 1 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:7: ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8349:7: ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8350:2: '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )?
                {
                match(input,36,FOLLOW_36_in_synpred25116201); if (failed) return ;
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8355:1: ( RULE_INT )?
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==RULE_INT) ) {
                    alt238=1;
                }
                switch (alt238) {
                    case 1 :
                        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8355:6: RULE_INT
                        {
                        match(input,RULE_INT,FOLLOW_RULE_INT_in_synpred25116217); if (failed) return ;

                        }
                        break;

                }

                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8362:3: ( 'e' ( '+' | '-' )? RULE_INT )?
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==76) ) {
                    alt240=1;
                }
                switch (alt240) {
                    case 1 :
                        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8363:2: 'e' ( '+' | '-' )? RULE_INT
                        {
                        match(input,76,FOLLOW_76_in_synpred25116238); if (failed) return ;
                        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8368:1: ( '+' | '-' )?
                        int alt239=2;
                        int LA239_0 = input.LA(1);

                        if ( ((LA239_0>=56 && LA239_0<=57)) ) {
                            alt239=1;
                        }
                        switch (alt239) {
                            case 1 :
                                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                                {
                                if ( (input.LA(1)>=56 && input.LA(1)<=57) ) {
                                    input.consume();
                                    errorRecovery=false;failed=false;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return ;}
                                    MismatchedSetException mse =
                                        new MismatchedSetException(null,input);
                                    recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred25116247);    throw mse;
                                }


                                }
                                break;

                        }

                        match(input,RULE_INT,FOLLOW_RULE_INT_in_synpred25116288); if (failed) return ;

                        }
                        break;

                }

                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8388:3: ( 'f' | 'd' )?
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( ((LA241_0>=77 && LA241_0<=78)) ) {
                    alt241=1;
                }
                switch (alt241) {
                    case 1 :
                        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                        {
                        if ( (input.LA(1)>=77 && input.LA(1)<=78) ) {
                            input.consume();
                            errorRecovery=false;failed=false;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            MismatchedSetException mse =
                                new MismatchedSetException(null,input);
                            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred25116304);    throw mse;
                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8402:6: ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? )
                {
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8402:6: ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? )
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8403:2: 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )?
                {
                match(input,76,FOLLOW_76_in_synpred25116351); if (failed) return ;
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8408:1: ( '+' | '-' )?
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( ((LA242_0>=56 && LA242_0<=57)) ) {
                    alt242=1;
                }
                switch (alt242) {
                    case 1 :
                        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                        {
                        if ( (input.LA(1)>=56 && input.LA(1)<=57) ) {
                            input.consume();
                            errorRecovery=false;failed=false;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            MismatchedSetException mse =
                                new MismatchedSetException(null,input);
                            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred25116360);    throw mse;
                        }


                        }
                        break;

                }

                match(input,RULE_INT,FOLLOW_RULE_INT_in_synpred25116401); if (failed) return ;
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8428:1: ( 'f' | 'd' )?
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( ((LA243_0>=77 && LA243_0<=78)) ) {
                    alt243=1;
                }
                switch (alt243) {
                    case 1 :
                        // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                        {
                        if ( (input.LA(1)>=77 && input.LA(1)<=78) ) {
                            input.consume();
                            errorRecovery=false;failed=false;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            MismatchedSetException mse =
                                new MismatchedSetException(null,input);
                            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred25116415);    throw mse;
                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8443:2: 'f'
                {
                match(input,77,FOLLOW_77_in_synpred25116461); if (failed) return ;

                }
                break;
            case 4 :
                // ../org.makumba.devel.plugin.eclipse.mdd/src-gen/org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8450:2: 'd'
                {
                match(input,78,FOLLOW_78_in_synpred25116480); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred251

    public final boolean synpred94() {
        backtracking++;
        int start = input.mark();
        try {
            synpred94_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred39() {
        backtracking++;
        int start = input.mark();
        try {
            synpred39_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred38() {
        backtracking++;
        int start = input.mark();
        try {
            synpred38_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred203() {
        backtracking++;
        int start = input.mark();
        try {
            synpred203_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred204() {
        backtracking++;
        int start = input.mark();
        try {
            synpred204_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred172() {
        backtracking++;
        int start = input.mark();
        try {
            synpred172_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred251() {
        backtracking++;
        int start = input.mark();
        try {
            synpred251_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred14() {
        backtracking++;
        int start = input.mark();
        try {
            synpred14_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred195() {
        backtracking++;
        int start = input.mark();
        try {
            synpred195_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred15() {
        backtracking++;
        int start = input.mark();
        try {
            synpred15_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred177() {
        backtracking++;
        int start = input.mark();
        try {
            synpred177_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred16() {
        backtracking++;
        int start = input.mark();
        try {
            synpred16_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred17() {
        backtracking++;
        int start = input.mark();
        try {
            synpred17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred157() {
        backtracking++;
        int start = input.mark();
        try {
            synpred157_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA43 dfa43 = new DFA43(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA114 dfa114 = new DFA114(this);
    static final String DFA43_eotS =
        "\135\uffff";
    static final String DFA43_eofS =
        "\135\uffff";
    static final String DFA43_minS =
        "\1\6\1\uffff\3\6\1\uffff\10\6\31\0\1\6\23\15\3\6\3\15\3\6\31\15";
    static final String DFA43_maxS =
        "\1\u00f9\1\uffff\3\u00c2\1\uffff\3\u00e6\3\u00c2\1\u00f9\1\6\31"+
        "\0\1\6\23\u00b3\3\u00c2\3\u00b3\2\u00c2\1\6\31\u00b3";
    static final String DFA43_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\127\uffff";
    static final String DFA43_specialS =
        "\16\uffff\1\3\1\2\1\1\1\0\1\16\1\10\1\6\1\4\1\27\1\25\1\23\1\22"+
        "\1\30\1\5\1\7\1\13\1\21\1\26\1\24\1\20\1\12\1\15\1\17\1\11\1\14"+
        "\66\uffff}>";
    static final String[] DFA43_transitionS = {
            "\5\5\5\uffff\3\5\7\uffff\1\5\2\uffff\1\1\6\uffff\1\5\1\uffff"+
            "\3\5\1\uffff\2\5\1\uffff\1\5\10\uffff\4\5\1\uffff\1\5\2\uffff"+
            "\2\5\13\uffff\4\5\1\uffff\3\1\11\uffff\1\2\1\3\1\4\36\uffff"+
            "\3\5\6\uffff\6\1\22\uffff\3\1\6\uffff\2\5\10\uffff\3\5\6\uffff"+
            "\11\5\6\uffff\36\5\11\uffff\12\5",
            "",
            "\1\1\6\uffff\1\5\2\uffff\1\5\11\uffff\1\1\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\uffff\3\1\1\uffff\1\1\1\5\1\uffff\1\1\5\5"+
            "\1\uffff\2\5\2\1\2\5\1\uffff\1\1\14\uffff\3\5\4\1\15\uffff\3"+
            "\1\30\uffff\1\6\1\7\1\10\47\uffff\20\5\1\11\1\12\1\13\11\uffff"+
            "\6\1",
            "\1\1\6\uffff\1\5\2\uffff\1\5\11\uffff\1\1\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\uffff\3\1\1\uffff\1\1\1\5\1\uffff\1\1\5\5"+
            "\1\uffff\2\5\2\1\2\5\1\uffff\1\1\14\uffff\3\5\4\1\15\uffff\3"+
            "\1\30\uffff\1\6\1\7\1\10\47\uffff\20\5\1\11\1\12\1\13\11\uffff"+
            "\6\1",
            "\1\1\6\uffff\1\5\2\uffff\1\5\11\uffff\1\1\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\uffff\3\1\1\uffff\1\1\1\5\1\uffff\1\1\5\5"+
            "\1\uffff\2\5\2\1\2\5\1\uffff\1\1\14\uffff\3\5\4\1\15\uffff\3"+
            "\1\30\uffff\1\6\1\7\1\10\47\uffff\20\5\1\11\1\12\1\13\11\uffff"+
            "\6\1",
            "",
            "\1\5\23\uffff\1\5\13\uffff\3\5\1\uffff\1\5\1\14\1\uffff\1\5"+
            "\10\uffff\2\5\3\uffff\1\5\17\uffff\4\5\15\uffff\3\5\36\uffff"+
            "\3\5\61\uffff\3\5\11\uffff\6\5\41\uffff\3\5",
            "\1\5\23\uffff\1\5\13\uffff\3\5\1\uffff\1\5\1\14\1\uffff\1\5"+
            "\10\uffff\2\5\3\uffff\1\5\17\uffff\4\5\15\uffff\3\5\36\uffff"+
            "\3\5\61\uffff\3\5\11\uffff\6\5\41\uffff\3\5",
            "\1\5\23\uffff\1\5\13\uffff\3\5\1\uffff\1\5\1\14\1\uffff\1\5"+
            "\10\uffff\2\5\3\uffff\1\5\17\uffff\4\5\15\uffff\3\5\36\uffff"+
            "\3\5\61\uffff\3\5\11\uffff\6\5\41\uffff\3\5",
            "\1\16\23\uffff\1\26\1\uffff\2\1\6\uffff\1\1\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\2\uffff\1\23\10\uffff\1\24\1\25\3\uffff\1"+
            "\32\17\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41\1\42\1\43\6\1"+
            "\3\uffff\14\1\3\uffff\3\1\6\uffff\3\1\3\uffff\6\1\22\uffff\3"+
            "\1\20\uffff\1\44\1\45\1\46\3\5\6\uffff\1\33\1\34\1\35\1\36\1"+
            "\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\2\1\6\uffff\1\1\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\2\uffff\1\23\10\uffff\1\24\1\25\3\uffff\1"+
            "\32\17\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41\1\42\1\43\6\1"+
            "\3\uffff\14\1\3\uffff\3\1\6\uffff\3\1\3\uffff\6\1\22\uffff\3"+
            "\1\20\uffff\1\44\1\45\1\46\3\5\6\uffff\1\33\1\34\1\35\1\36\1"+
            "\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\2\1\6\uffff\1\1\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\2\uffff\1\23\10\uffff\1\24\1\25\3\uffff\1"+
            "\32\17\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41\1\42\1\43\6\1"+
            "\3\uffff\14\1\3\uffff\3\1\6\uffff\3\1\3\uffff\6\1\22\uffff\3"+
            "\1\20\uffff\1\44\1\45\1\46\3\5\6\uffff\1\33\1\34\1\35\1\36\1"+
            "\37\1\40",
            "\1\50\4\5\5\uffff\3\5\7\uffff\1\60\11\uffff\1\5\1\uffff\1\61"+
            "\1\63\1\62\1\uffff\1\54\2\5\1\55\10\uffff\1\56\1\57\2\5\1\uffff"+
            "\1\64\2\uffff\2\5\7\uffff\1\5\3\uffff\1\47\1\51\1\52\1\53\1"+
            "\uffff\3\5\11\uffff\1\73\1\74\1\75\36\uffff\3\5\6\uffff\6\5"+
            "\22\uffff\3\5\6\uffff\2\5\10\uffff\1\76\1\77\1\100\6\uffff\3"+
            "\5\1\65\1\66\1\67\1\70\1\71\1\72\6\uffff\36\5\11\uffff\12\5",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\6\uffff\1\5\2\uffff\1\5\11\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\5\3\uffff\1\101\1\uffff\3\5\1\uffff\2\5\1\102\6\5\1\uffff"+
            "\6\5\1\uffff\1\5\14\uffff\7\5\15\uffff\3\5\30\uffff\3\5\47\uffff"+
            "\23\5\11\uffff\6\5",
            "\1\5\6\uffff\1\5\2\uffff\1\5\11\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\5\3\uffff\1\101\1\uffff\3\5\1\uffff\2\5\1\102\6\5\1\uffff"+
            "\6\5\1\uffff\1\5\14\uffff\7\5\15\uffff\3\5\30\uffff\3\5\47\uffff"+
            "\23\5\11\uffff\6\5",
            "\1\5\6\uffff\1\5\2\uffff\1\5\11\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\5\3\uffff\1\101\1\uffff\3\5\1\uffff\2\5\1\102\6\5\1\uffff"+
            "\6\5\1\uffff\1\5\14\uffff\7\5\15\uffff\3\5\30\uffff\3\5\47\uffff"+
            "\23\5\11\uffff\6\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\104\23\uffff\1\114\13\uffff\1\115\1\117\1\116\1\uffff\1\110"+
            "\2\uffff\1\111\10\uffff\1\112\1\113\3\uffff\1\120\17\uffff\1"+
            "\103\1\105\1\106\1\107\12\uffff\3\5\1\127\1\130\1\131\33\uffff"+
            "\6\5\61\uffff\1\132\1\133\1\134\11\uffff\1\121\1\122\1\123\1"+
            "\124\1\125\1\126",
            "\1\1\6\uffff\1\5\14\uffff\1\1\2\uffff\1\5\10\uffff\3\1\1\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\5\1\uffff\1\5\1\uffff\2\1\3\uffff"+
            "\1\1\17\uffff\4\1\15\uffff\3\1\102\uffff\6\5\2\uffff\3\5\5\uffff"+
            "\3\1\11\uffff\6\1",
            "\1\104",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5"
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "3925:1: ( ( (lv_s_1_0= rulestatement ) ) | ( (lv_e_2_0= ruleexpression ) ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_17 = input.LA(1);

                         
                        int index43_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA43_16 = input.LA(1);

                         
                        int index43_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA43_15 = input.LA(1);

                         
                        int index43_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA43_14 = input.LA(1);

                         
                        int index43_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA43_21 = input.LA(1);

                         
                        int index43_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA43_27 = input.LA(1);

                         
                        int index43_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA43_20 = input.LA(1);

                         
                        int index43_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA43_28 = input.LA(1);

                         
                        int index43_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_28);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA43_19 = input.LA(1);

                         
                        int index43_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA43_37 = input.LA(1);

                         
                        int index43_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_37);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA43_34 = input.LA(1);

                         
                        int index43_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_34);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA43_29 = input.LA(1);

                         
                        int index43_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA43_38 = input.LA(1);

                         
                        int index43_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_38);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA43_35 = input.LA(1);

                         
                        int index43_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_35);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA43_18 = input.LA(1);

                         
                        int index43_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA43_36 = input.LA(1);

                         
                        int index43_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_36);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA43_33 = input.LA(1);

                         
                        int index43_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA43_30 = input.LA(1);

                         
                        int index43_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_30);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA43_25 = input.LA(1);

                         
                        int index43_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA43_24 = input.LA(1);

                         
                        int index43_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_24);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA43_32 = input.LA(1);

                         
                        int index43_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA43_23 = input.LA(1);

                         
                        int index43_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA43_31 = input.LA(1);

                         
                        int index43_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_31);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA43_22 = input.LA(1);

                         
                        int index43_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_22);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA43_26 = input.LA(1);

                         
                        int index43_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index43_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\135\uffff";
    static final String DFA99_eofS =
        "\135\uffff";
    static final String DFA99_minS =
        "\1\6\1\uffff\3\6\1\uffff\10\6\31\0\1\6\23\15\3\6\3\15\3\6\31\15";
    static final String DFA99_maxS =
        "\1\u00f9\1\uffff\3\u00c2\1\uffff\3\u00e6\3\u00c2\1\u00f9\1\6\31"+
        "\0\1\6\23\u00b3\3\u00c2\3\u00b3\2\u00c2\1\6\31\u00b3";
    static final String DFA99_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\127\uffff";
    static final String DFA99_specialS =
        "\16\uffff\1\11\1\4\1\6\1\22\1\20\1\16\1\14\1\30\1\27\1\25\1\23\1"+
        "\3\1\2\1\13\1\15\1\17\1\21\1\26\1\24\1\5\1\12\1\7\1\10\1\1\1\0\66"+
        "\uffff}>";
    static final String[] DFA99_transitionS = {
            "\5\1\5\uffff\3\1\7\uffff\1\1\11\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\5\1\1\10\uffff\4\1\1\uffff\1\1\2\uffff\2\1\7\uffff\1"+
            "\5\3\uffff\4\1\1\uffff\3\5\11\uffff\1\2\1\3\1\4\36\uffff\3\1"+
            "\6\uffff\6\5\22\uffff\3\5\6\uffff\2\1\10\uffff\3\1\6\uffff\11"+
            "\1\6\uffff\36\1\11\uffff\12\1",
            "",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\50\4\1\5\uffff\3\1\7\uffff\1\60\11\uffff\1\1\1\uffff\1\61"+
            "\1\63\1\62\1\uffff\1\54\2\1\1\55\10\uffff\1\56\1\57\2\1\1\uffff"+
            "\1\64\2\uffff\2\1\7\uffff\1\1\3\uffff\1\47\1\51\1\52\1\53\1"+
            "\uffff\3\1\11\uffff\1\73\1\74\1\75\36\uffff\3\1\6\uffff\6\1"+
            "\22\uffff\3\1\6\uffff\2\1\10\uffff\1\76\1\77\1\100\6\uffff\3"+
            "\1\1\65\1\66\1\67\1\70\1\71\1\72\6\uffff\36\1\11\uffff\12\1",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\104\23\uffff\1\114\13\uffff\1\115\1\117\1\116\1\uffff\1\110"+
            "\2\uffff\1\111\10\uffff\1\112\1\113\3\uffff\1\120\17\uffff\1"+
            "\103\1\105\1\106\1\107\12\uffff\3\1\1\127\1\130\1\131\33\uffff"+
            "\6\1\61\uffff\1\132\1\133\1\134\11\uffff\1\121\1\122\1\123\1"+
            "\124\1\125\1\126",
            "\1\5\6\uffff\1\1\14\uffff\1\5\1\uffff\1\1\11\uffff\3\5\1\uffff"+
            "\1\5\1\uffff\1\1\1\5\4\uffff\1\1\1\uffff\1\1\1\uffff\2\5\3\uffff"+
            "\1\5\17\uffff\4\5\15\uffff\3\5\102\uffff\6\1\2\uffff\3\1\5\uffff"+
            "\3\5\11\uffff\6\5",
            "\1\104",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1"
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "7230:1: (this_expressionOrVector_8= ruleexpressionOrVector | ( (lv_s_9_0= ruleunionRule ) ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_38 = input.LA(1);

                         
                        int index99_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_38);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_37 = input.LA(1);

                         
                        int index99_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_37);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA99_26 = input.LA(1);

                         
                        int index99_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_26);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA99_25 = input.LA(1);

                         
                        int index99_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_25);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA99_15 = input.LA(1);

                         
                        int index99_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA99_33 = input.LA(1);

                         
                        int index99_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_33);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA99_16 = input.LA(1);

                         
                        int index99_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA99_35 = input.LA(1);

                         
                        int index99_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_35);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA99_36 = input.LA(1);

                         
                        int index99_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_36);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA99_14 = input.LA(1);

                         
                        int index99_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA99_34 = input.LA(1);

                         
                        int index99_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_34);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA99_27 = input.LA(1);

                         
                        int index99_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA99_20 = input.LA(1);

                         
                        int index99_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_20);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA99_28 = input.LA(1);

                         
                        int index99_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_28);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA99_19 = input.LA(1);

                         
                        int index99_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA99_29 = input.LA(1);

                         
                        int index99_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_29);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA99_18 = input.LA(1);

                         
                        int index99_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA99_30 = input.LA(1);

                         
                        int index99_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_30);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA99_17 = input.LA(1);

                         
                        int index99_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_17);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA99_24 = input.LA(1);

                         
                        int index99_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_24);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA99_32 = input.LA(1);

                         
                        int index99_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA99_23 = input.LA(1);

                         
                        int index99_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA99_31 = input.LA(1);

                         
                        int index99_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_31);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA99_22 = input.LA(1);

                         
                        int index99_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_22);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA99_21 = input.LA(1);

                         
                        int index99_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index99_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA114_eotS =
        "\135\uffff";
    static final String DFA114_eofS =
        "\135\uffff";
    static final String DFA114_minS =
        "\1\6\1\uffff\3\6\1\uffff\7\6\31\0\2\6\23\15\3\6\3\15\3\6\31\15";
    static final String DFA114_maxS =
        "\1\u00f9\1\uffff\3\u00c2\1\uffff\3\u00c2\3\u00e6\1\6\31\0\1\u00f9"+
        "\1\6\23\u00b3\3\u00c2\3\u00b3\2\u00c2\1\6\31\u00b3";
    static final String DFA114_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\127\uffff";
    static final String DFA114_specialS =
        "\15\uffff\1\1\1\4\1\5\1\6\1\22\1\17\1\30\1\26\1\14\1\13\1\16\1\15"+
        "\1\7\1\21\1\24\1\27\1\25\1\23\1\20\1\12\1\10\1\11\1\3\1\2\1\0\67"+
        "\uffff}>";
    static final String[] DFA114_transitionS = {
            "\5\1\5\uffff\3\1\7\uffff\1\1\11\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\5\1\1\10\uffff\4\1\1\uffff\1\1\2\uffff\2\1\7\uffff\1"+
            "\5\3\uffff\4\1\1\uffff\3\5\11\uffff\1\2\1\3\1\4\36\uffff\3\1"+
            "\6\uffff\6\5\22\uffff\3\5\6\uffff\2\1\10\uffff\3\1\6\uffff\11"+
            "\1\6\uffff\36\1\11\uffff\12\1",
            "",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\11\1\12\1\13\47\uffff\20\1\1\6\1\7\1\10\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\11\1\12\1\13\47\uffff\20\1\1\6\1\7\1\10\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\11\1\12\1\13\47\uffff\20\1\1\6\1\7\1\10\11\uffff\6\5",
            "",
            "\1\15\23\uffff\1\25\1\uffff\1\5\7\uffff\1\5\1\uffff\1\26\1\30"+
            "\1\27\1\uffff\1\21\1\uffff\1\5\1\22\10\uffff\1\23\1\24\3\uffff"+
            "\1\31\13\uffff\1\5\3\uffff\1\14\1\16\1\17\1\20\15\uffff\1\40"+
            "\1\41\1\42\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\43\1\44\1\45\3\1\6\uffff\1\32\1"+
            "\33\1\34\1\35\1\36\1\37",
            "\1\15\23\uffff\1\25\1\uffff\1\5\7\uffff\1\5\1\uffff\1\26\1\30"+
            "\1\27\1\uffff\1\21\1\uffff\1\5\1\22\10\uffff\1\23\1\24\3\uffff"+
            "\1\31\13\uffff\1\5\3\uffff\1\14\1\16\1\17\1\20\15\uffff\1\40"+
            "\1\41\1\42\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\43\1\44\1\45\3\1\6\uffff\1\32\1"+
            "\33\1\34\1\35\1\36\1\37",
            "\1\15\23\uffff\1\25\1\uffff\1\5\7\uffff\1\5\1\uffff\1\26\1\30"+
            "\1\27\1\uffff\1\21\1\uffff\1\5\1\22\10\uffff\1\23\1\24\3\uffff"+
            "\1\31\13\uffff\1\5\3\uffff\1\14\1\16\1\17\1\20\15\uffff\1\40"+
            "\1\41\1\42\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\43\1\44\1\45\3\1\6\uffff\1\32\1"+
            "\33\1\34\1\35\1\36\1\37",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\46\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\46\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\46\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50\4\1\5\uffff\3\1\7\uffff\1\60\11\uffff\1\1\1\uffff\1\61"+
            "\1\63\1\62\1\uffff\1\54\2\1\1\55\10\uffff\1\56\1\57\2\1\1\uffff"+
            "\1\64\2\uffff\2\1\7\uffff\1\1\3\uffff\1\47\1\51\1\52\1\53\1"+
            "\uffff\3\1\11\uffff\1\73\1\74\1\75\36\uffff\3\1\6\uffff\6\1"+
            "\22\uffff\3\1\6\uffff\2\1\10\uffff\1\76\1\77\1\100\6\uffff\3"+
            "\1\1\65\1\66\1\67\1\70\1\71\1\72\6\uffff\36\1\11\uffff\12\1",
            "\1\50",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\104\23\uffff\1\114\13\uffff\1\115\1\117\1\116\1\uffff\1\110"+
            "\2\uffff\1\111\10\uffff\1\112\1\113\3\uffff\1\120\17\uffff\1"+
            "\103\1\105\1\106\1\107\12\uffff\3\1\1\127\1\130\1\131\33\uffff"+
            "\6\1\61\uffff\1\132\1\133\1\134\11\uffff\1\121\1\122\1\123\1"+
            "\124\1\125\1\126",
            "\1\5\6\uffff\1\1\14\uffff\1\5\1\uffff\1\1\11\uffff\3\5\1\uffff"+
            "\1\5\1\uffff\1\1\1\5\4\uffff\1\1\1\uffff\1\1\1\uffff\2\5\3\uffff"+
            "\1\5\17\uffff\4\5\15\uffff\3\5\102\uffff\6\1\2\uffff\3\1\5\uffff"+
            "\3\5\11\uffff\6\5",
            "\1\104",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1"
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "7701:1: ( ( ( (lv_e_3_0= ruleexpression ) ) ( ',' ( (lv_e_5_0= ruleexpression ) ) )* ) | ( (lv_s_6_0= ruleunionRule ) ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_37 = input.LA(1);

                         
                        int index114_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_37);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA114_13 = input.LA(1);

                         
                        int index114_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA114_36 = input.LA(1);

                         
                        int index114_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_36);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA114_35 = input.LA(1);

                         
                        int index114_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_35);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA114_14 = input.LA(1);

                         
                        int index114_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA114_15 = input.LA(1);

                         
                        int index114_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA114_25 = input.LA(1);

                         
                        int index114_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_25);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA114_33 = input.LA(1);

                         
                        int index114_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_33);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA114_34 = input.LA(1);

                         
                        int index114_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_34);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA114_32 = input.LA(1);

                         
                        int index114_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_32);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA114_22 = input.LA(1);

                         
                        int index114_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA114_21 = input.LA(1);

                         
                        int index114_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA114_24 = input.LA(1);

                         
                        int index114_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA114_23 = input.LA(1);

                         
                        int index114_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_23);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA114_31 = input.LA(1);

                         
                        int index114_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA114_26 = input.LA(1);

                         
                        int index114_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_26);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA114_30 = input.LA(1);

                         
                        int index114_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA114_27 = input.LA(1);

                         
                        int index114_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA114_29 = input.LA(1);

                         
                        int index114_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_29);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA114_20 = input.LA(1);

                         
                        int index114_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_20);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA114_28 = input.LA(1);

                         
                        int index114_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_28);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_ruledataDefinition_in_entryRuledataDefinition81 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuledataDefinition91 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_LINEBREAK_in_ruledataDefinition126 = new BitSet(new long[]{0x1C00036046804050L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruledeclaration_in_ruledataDefinition149 = new BitSet(new long[]{0x1C00036046804072L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_RULE_FIELDCOMMENT_in_ruledataDefinition159 = new BitSet(new long[]{0x1C00036046804052L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_RULE_LINEBREAK_in_ruledataDefinition170 = new BitSet(new long[]{0x1C00036046804052L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruledeclaration_in_entryRuledeclaration209 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuledeclaration219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefieldDeclaration_in_ruledeclaration269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletitleDeclaration_in_ruledeclaration299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletypeDeclaration_in_ruledeclaration329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleincludeDeclaration_in_ruledeclaration359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulevalidationRuleDeclaration_in_ruledeclaration389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionDeclaration_in_ruledeclaration419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenativeValidationRuleDeclaration_in_ruledeclaration449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulesubFieldDeclaration_in_ruledeclaration479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefieldDeclaration_in_entryRulefieldDeclaration514 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefieldDeclaration524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_rulefieldDeclaration568 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_rulekeyword_in_rulefieldDeclaration592 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_rulefieldDeclaration605 = new BitSet(new long[]{0x0000000447F9C042L});
    public static final BitSet FOLLOW_rulemodifiers_in_rulefieldDeclaration627 = new BitSet(new long[]{0x0000000447F80040L});
    public static final BitSet FOLLOW_rulefieldType_in_rulefieldDeclaration648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulemodifiers_in_entryRulemodifiers686 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulemodifiers696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_rulemodifiers780 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_15_in_rulemodifiers861 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_16_in_rulemodifiers943 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_rulemodifiers966 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_16_in_rulemodifiers1036 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_rulemodifiers1059 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_rulefieldType_in_entryRulefieldType1134 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefieldType1144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecharType_in_rulefieldType1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecharEnum_in_rulefieldType1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_rulefieldType1240 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_rulecharEnum_in_rulefieldType1265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleintEnum_in_rulefieldType1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_rulefieldType1312 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_ruleintEnum_in_rulefieldType1337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_rulefieldType1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_rulefieldType1405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_rulefieldType1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_rulefieldType1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_rulefieldType1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_rulefieldType1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_rulefieldType1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulepointer_in_rulefieldType1598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulesetType_in_rulefieldType1628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_rulefieldType1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleintEnum_in_entryRuleintEnum1691 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleintEnum1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_ruleintEnum1744 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleintEnum1767 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ruleenumValue_in_ruleintEnum1788 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_28_in_ruleintEnum1799 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ruleenumValue_in_ruleintEnum1820 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_29_in_ruleintEnum1832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecharEnum_in_entryRulecharEnum1868 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecharEnum1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_rulecharEnum1921 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_rulecharEnum1944 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_rulecharEnum1961 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_28_in_rulecharEnum1977 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_rulecharEnum1994 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_29_in_rulecharEnum2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleenumValue_in_entryRuleenumValue2047 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleenumValue2057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleenumValue2099 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleenumValue2114 = new BitSet(new long[]{0x0000000000000300L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleenumValue2133 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_RULE_SIGNED_INT_in_ruleenumValue2153 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_31_in_ruleenumValue2172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecharType_in_entryRulecharType2210 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecharType2220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_rulecharType2267 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_rulecharType2278 = new BitSet(new long[]{0x0000000200000100L});
    public static final BitSet FOLLOW_RULE_INT_in_rulecharType2295 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_rulecharType2311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulepointer_in_entryRulepointer2349 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulepointer2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_rulepointer2406 = new BitSet(new long[]{0x0800014046800042L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulepointer2427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulesetType_in_entryRulesetType2464 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulesetType2474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_rulesetType2521 = new BitSet(new long[]{0x0800014046800042L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulesetType2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulesubFieldDeclaration_in_entryRulesubFieldDeclaration2579 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulesubFieldDeclaration2589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_rulesubFieldDeclaration2636 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_rulesubFieldDeclaration2646 = new BitSet(new long[]{0x1C00036046804040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruledeclaration_in_rulesubFieldDeclaration2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletype_in_entryRuletype2704 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuletype2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruletype2756 = new BitSet(new long[]{0x0000001800000002L});
    public static final BitSet FOLLOW_rulekeyword_in_ruletype2789 = new BitSet(new long[]{0x0000001800000002L});
    public static final BitSet FOLLOW_36_in_ruletype2810 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_35_in_ruletype2829 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_RULE_ID_in_ruletype2846 = new BitSet(new long[]{0x0000001800000002L});
    public static final BitSet FOLLOW_rulekeyword_in_ruletype2879 = new BitSet(new long[]{0x0000001800000002L});
    public static final BitSet FOLLOW_ruletitleDeclaration_in_entryRuletitleDeclaration2927 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuletitleDeclaration2937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruletitleDeclaration2972 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_ruletitleDeclaration2982 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruletitleDeclaration2992 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletitle_in_ruletitleDeclaration3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletitle_in_entryRuletitle3049 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuletitle3059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletype_in_ruletitle3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionCall_in_ruletitle3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleincludeDeclaration_in_entryRuleincludeDeclaration3171 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleincludeDeclaration3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruleincludeDeclaration3216 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_39_in_ruleincludeDeclaration3226 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleincludeDeclaration3236 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_ruleincludeDeclaration3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletypeDeclaration_in_entryRuletypeDeclaration3293 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuletypeDeclaration3303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruletypeDeclaration3338 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_ruletypeDeclaration3348 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_ruletypeDeclaration3358 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_ID_in_ruletypeDeclaration3375 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruletypeDeclaration3390 = new BitSet(new long[]{0x0000000447F80040L});
    public static final BitSet FOLLOW_rulefieldType_in_ruletypeDeclaration3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulevalidationRuleDeclaration_in_entryRulevalidationRuleDeclaration3447 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulevalidationRuleDeclaration3457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulerangeValidationRuleDeclaration_in_rulevalidationRuleDeclaration3508 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleuniquenessValidationRuleDeclaration_in_rulevalidationRuleDeclaration3538 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_rulecomparisonValidationRuleDeclaration_in_rulevalidationRuleDeclaration3568 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleregexValidationRuleDeclaration_in_rulevalidationRuleDeclaration3598 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleerrorMessage_in_rulevalidationRuleDeclaration3619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecomparisonValidationRuleDeclaration_in_entryRulecomparisonValidationRuleDeclaration3655 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecomparisonValidationRuleDeclaration3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_rulecomparisonValidationRuleDeclaration3708 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_rulefunctionArguments_in_rulecomparisonValidationRuleDeclaration3742 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_rulecomparisonValidationRuleDeclaration3752 = new BitSet(new long[]{0x08C0254046800140L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_rulecomparisonExpression_in_rulecomparisonValidationRuleDeclaration3773 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_rulecomparisonValidationRuleDeclaration3783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecomparisonExpression_in_entryRulecomparisonExpression3819 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecomparisonExpression3829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecomparisonPart_in_rulecomparisonExpression3875 = new BitSet(new long[]{0x003FC00000002000L});
    public static final BitSet FOLLOW_ruleoperator_in_rulecomparisonExpression3896 = new BitSet(new long[]{0x08C0254046800140L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_rulecomparisonPart_in_rulecomparisonExpression3917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecomparisonPart_in_entryRulecomparisonPart3953 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecomparisonPart3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletype_in_rulecomparisonPart4009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_rulecomparisonPart4032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateFunction_in_rulecomparisonPart4064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleupperFunction_in_rulecomparisonPart4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulelowerFunction_in_rulecomparisonPart4118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateConstant_in_rulecomparisonPart4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleupperFunction_in_entryRuleupperFunction4181 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleupperFunction4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_ruleupperFunction4226 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleupperFunction4236 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_ruleupperFunction4257 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleupperFunction4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulelowerFunction_in_entryRulelowerFunction4303 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulelowerFunction4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_rulelowerFunction4348 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_rulelowerFunction4358 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulelowerFunction4379 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulelowerFunction4389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleoperator_in_entryRuleoperator4426 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleoperator4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_ruleoperator4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_ruleoperator4494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_ruleoperator4513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_ruleoperator4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_ruleoperator4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_ruleoperator4570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_ruleoperator4589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_ruleoperator4608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_ruleoperator4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateConstant_in_entryRuledateConstant4668 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuledateConstant4679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ruledateConstant4717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ruledateConstant4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateFunction_in_entryRuledateFunction4777 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuledateFunction4788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruledateFunction4826 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruledateFunction4839 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_ruledateFunctionArgument_in_ruledateFunction4861 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_ruledateFunction4880 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_ruledateFunctionArgument_in_ruledateFunction4902 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_44_in_ruledateFunction4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateFunctionArgument_in_entryRuledateFunctionArgument4963 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuledateFunctionArgument4974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateFunctionArgumentMember_in_ruledateFunctionArgument5021 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_56_in_ruledateFunctionArgument5041 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_57_in_ruledateFunctionArgument5060 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_ruledateFunctionArgumentMember_in_ruledateFunctionArgument5083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateFunctionArgumentMember_in_entryRuledateFunctionArgumentMember5131 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuledateFunctionArgumentMember5142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_ruledateFunctionArgumentMember5182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruledateConstant_in_ruledateFunctionArgumentMember5215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulerangeValidationRuleDeclaration_in_entryRulerangeValidationRuleDeclaration5260 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulerangeValidationRuleDeclaration5270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_rulerangeValidationRuleDeclaration5315 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_59_in_rulerangeValidationRuleDeclaration5344 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_rulefunctionArguments_in_rulerangeValidationRuleDeclaration5381 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_rulerangeValidationRuleDeclaration5391 = new BitSet(new long[]{0x4000000000000100L});
    public static final BitSet FOLLOW_rulerange_in_rulerangeValidationRuleDeclaration5412 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_rulerangeValidationRuleDeclaration5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleregexValidationRuleDeclaration_in_entryRuleregexValidationRuleDeclaration5458 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleregexValidationRuleDeclaration5468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_ruleregexValidationRuleDeclaration5511 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_rulefunctionArguments_in_ruleregexValidationRuleDeclaration5545 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleregexValidationRuleDeclaration5555 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleregexValidationRuleDeclaration5572 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_ruleregexValidationRuleDeclaration5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulerange_in_entryRulerange5623 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulerange5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulerangeBound_in_rulerange5679 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_rulerange5689 = new BitSet(new long[]{0x4000000000000100L});
    public static final BitSet FOLLOW_rulerangeBound_in_rulerange5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulerangeBound_in_entryRulerangeBound5747 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulerangeBound5758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_rulerangeBound5798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_rulerangeBound5822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleuniquenessValidationRuleDeclaration_in_entryRuleuniquenessValidationRuleDeclaration5862 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleuniquenessValidationRuleDeclaration5872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_ruleuniquenessValidationRuleDeclaration5915 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_rulefunctionArguments_in_ruleuniquenessValidationRuleDeclaration5949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleerrorMessage_in_entryRuleerrorMessage5985 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleerrorMessage5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_ruleerrorMessage6030 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleerrorMessage6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenativeValidationRuleDeclaration_in_entryRulenativeValidationRuleDeclaration6088 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulenativeValidationRuleDeclaration6098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_rulenativeValidationRuleDeclaration6145 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_rulenativeValidationRuleDeclaration6155 = new BitSet(new long[]{0x0000000000004000L,0x000000000000003FL});
    public static final BitSet FOLLOW_14_in_rulenativeValidationRuleDeclaration6175 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_64_in_rulenativeValidationRuleDeclaration6204 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_65_in_rulenativeValidationRuleDeclaration6233 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_66_in_rulenativeValidationRuleDeclaration6262 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_67_in_rulenativeValidationRuleDeclaration6291 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_68_in_rulenativeValidationRuleDeclaration6320 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_69_in_rulenativeValidationRuleDeclaration6349 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_rulenativeValidationRuleDeclaration6375 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_rulenativeValidationRuleDeclaration6392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionDeclaration_in_entryRulefunctionDeclaration6433 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefunctionDeclaration6443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_rulefunctionDeclaration6486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_rulefunctionDeclaration6501 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_ID_in_rulefunctionDeclaration6520 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_rulefunctionArgumentDeclaration_in_rulefunctionDeclaration6546 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_rulefunctionBody_in_rulefunctionDeclaration6567 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_ruleerrorMessage_in_rulefunctionDeclaration6588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionArgumentDeclaration_in_entryRulefunctionArgumentDeclaration6625 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefunctionArgumentDeclaration6635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_rulefunctionArgumentDeclaration6682 = new BitSet(new long[]{0x0000100457F80000L});
    public static final BitSet FOLLOW_rulefunctionArgumentBody_in_rulefunctionArgumentDeclaration6703 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_rulefunctionArgumentDeclaration6715 = new BitSet(new long[]{0x0000000447F80000L});
    public static final BitSet FOLLOW_rulefunctionArgumentBody_in_rulefunctionArgumentDeclaration6736 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_44_in_rulefunctionArgumentDeclaration6748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionArgumentBody_in_entryRulefunctionArgumentBody6784 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefunctionArgumentBody6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecharType_in_rulefunctionArgumentBody6845 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruleintEnum_in_rulefunctionArgumentBody6875 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_19_in_rulefunctionArgumentBody6891 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_ruleintEnum_in_rulefunctionArgumentBody6916 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_rulecharEnum_in_rulefunctionArgumentBody6947 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_19_in_rulefunctionArgumentBody6963 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_rulecharEnum_in_rulefunctionArgumentBody6988 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_20_in_rulefunctionArgumentBody7004 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_21_in_rulefunctionArgumentBody7020 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_22_in_rulefunctionArgumentBody7036 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_23_in_rulefunctionArgumentBody7052 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_24_in_rulefunctionArgumentBody7068 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_25_in_rulefunctionArgumentBody7084 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_26_in_rulefunctionArgumentBody7100 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_34_in_rulefunctionArgumentBody7117 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulefunctionArgumentBody7126 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_19_in_rulefunctionArgumentBody7136 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulefunctionArgumentBody7145 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_RULE_ID_in_rulefunctionArgumentBody7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulekeyword_in_rulefunctionArgumentBody7182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionCall_in_entryRulefunctionCall7221 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefunctionCall7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_rulefunctionCall7273 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_rulefunctionArguments_in_rulefunctionCall7299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionArguments_in_entryRulefunctionArguments7335 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefunctionArguments7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_rulefunctionArguments7392 = new BitSet(new long[]{0x0800114046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulefunctionArguments7414 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_rulefunctionArguments7425 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020004L});
    public static final BitSet FOLLOW_ruletype_in_rulefunctionArguments7446 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_44_in_rulefunctionArguments7460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefunctionBody_in_entryRulefunctionBody7496 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefunctionBody7506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_rulefunctionBody7541 = new BitSet(new long[]{0xCBC02DD0240707C0L,0xE000000070077800L,0xFC0E0181C0000FC0L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulestatement_in_rulefunctionBody7563 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_ruleexpression_in_rulefunctionBody7590 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_rulefunctionBody7601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulestatement_in_entryRulestatement7637 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulestatement7647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulequeryRule_in_rulestatement7696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleunionRule_in_entryRuleunionRule7730 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleunionRule7740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulequeryRule_in_ruleunionRule7786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_ruleunionRule7797 = new BitSet(new long[]{0x0000000000000002L,0x0000000070070080L,0x00000001C0000FC0L});
    public static final BitSet FOLLOW_rulequeryRule_in_ruleunionRule7818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_rulequeryRule_in_entryRulequeryRule7856 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulequeryRule7866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectFrom_in_rulequeryRule7916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001C0000FC0L});
    public static final BitSet FOLLOW_rulewhereClause_in_rulequeryRule7936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000FC0L});
    public static final BitSet FOLLOW_rulegroupByClause_in_rulequeryRule7958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_ruleorderByClause_in_rulequeryRule7980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectFrom_in_entryRuleselectFrom8017 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleselectFrom8027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectClause_in_ruleselectFrom8085 = new BitSet(new long[]{0x0000000000000002L,0x0000000070000000L});
    public static final BitSet FOLLOW_rulefromClause_in_ruleselectFrom8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectClause_in_entryRuleselectClause8144 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleselectClause8154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSELECT_in_ruleselectClause8200 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE00000007FF87800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleDISTINCT_in_ruleselectClause8202 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE00000007FC07800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleselectedPropertiesList_in_ruleselectClause8218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenewExpression_in_ruleselectClause8245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectObject_in_ruleselectClause8260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenewExpression_in_entryRulenewExpression8289 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulenewExpression8299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNEW_in_rulenewExpression8333 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulepath_in_rulenewExpression8346 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_rulenewExpression8356 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleselectedPropertiesList_in_rulenewExpression8377 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulenewExpression8387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectObject_in_entryRuleselectObject8424 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleselectObject8435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOBJECT_in_ruleselectObject8482 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleselectObject8500 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleselectObject8522 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleselectObject8540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefromClause_in_entryRulefromClause8580 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefromClause8590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_rulefromClause8624 = new BitSet(new long[]{0x08C025C004000040L,0x0380000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulefromRange_in_rulefromClause8637 = new BitSet(new long[]{0x0000000010000002L,0x0001FF1F80000000L});
    public static final BitSet FOLLOW_rulefromJoin_in_rulefromClause8659 = new BitSet(new long[]{0x0000000010000002L,0x0001FF1F80000000L});
    public static final BitSet FOLLOW_28_in_rulefromClause8676 = new BitSet(new long[]{0x08C025C004000040L,0x0380000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulefromRange_in_rulefromClause8697 = new BitSet(new long[]{0x0000000010000002L,0x0001FF1F80000000L});
    public static final BitSet FOLLOW_rulefromJoin_in_entryRulefromJoin8736 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefromJoin8746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLEFT_in_rulefromJoin8783 = new BitSet(new long[]{0x0000000000000000L,0x0001C0E000000000L});
    public static final BitSet FOLLOW_ruleRIGHT_in_rulefromJoin8790 = new BitSet(new long[]{0x0000000000000000L,0x0001C0E000000000L});
    public static final BitSet FOLLOW_ruleOUTER_in_rulefromJoin8793 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_ruleFULL_in_rulefromJoin8803 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_ruleINNER_in_rulefromJoin8810 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_ruleJOIN_in_rulefromJoin8813 = new BitSet(new long[]{0x08C025C004000040L,0x000E000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleFETCH_in_rulefromJoin8815 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulefromClassOrOuterQueryPath_in_rulefromJoin8834 = new BitSet(new long[]{0x0000000000000002L,0x0070000000000000L});
    public static final BitSet FOLLOW_rulewithClause_in_rulefromJoin8854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulewithClause_in_entryRulewithClause8891 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulewithClause8901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWITH_in_rulewithClause8935 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulewithClause8948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefromRange_in_entryRulefromRange8984 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefromRange8994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefromClassOrOuterQueryPath_in_rulefromRange9044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleidentifier_in_rulefromRange9071 = new BitSet(new long[]{0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_ruleIN_CLASS_in_rulefromRange9080 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulepath_in_rulefromRange9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_rulefromRange9110 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_rulefromRange9112 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulepath_in_rulefromRange9133 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulefromRange9143 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_rulefromRange9164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleinCollectionElementsDeclaration_in_rulefromRange9196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulefromClassOrOuterQueryPath_in_entryRulefromClassOrOuterQueryPath9231 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulefromClassOrOuterQueryPath9241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulepath_in_rulefromClassOrOuterQueryPath9287 = new BitSet(new long[]{0x08C025C004000042L,0x000E000070007800L,0xE00E000000000007L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleasAlias_in_rulefromClassOrOuterQueryPath9300 = new BitSet(new long[]{0x0000000000000002L,0x000E000000000000L});
    public static final BitSet FOLLOW_rulepropertyFetch_in_rulefromClassOrOuterQueryPath9322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleinCollectionElementsDeclaration_in_entryRuleinCollectionElementsDeclaration9359 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleinCollectionElementsDeclaration9369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleinCollectionElementsDeclaration9415 = new BitSet(new long[]{0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_ruleIN_ELEMENTS_in_ruleinCollectionElementsDeclaration9424 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleinCollectionElementsDeclaration9426 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulepath_in_ruleinCollectionElementsDeclaration9447 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleinCollectionElementsDeclaration9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleasAlias_in_entryRuleasAlias9493 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleasAlias9503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_ruleasAlias9538 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleasAlias9553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulepropertyFetch_in_entryRulepropertyFetch9590 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulepropertyFetch9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFETCH_in_rulepropertyFetch9648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_ruleALL_in_rulepropertyFetch9675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_rulePROPERTIES_in_rulepropertyFetch9702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulegroupByClause_in_entryRulegroupByClause9747 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulegroupByClause9757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleGROUP_BY_in_rulegroupByClause9791 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulegroupByClause9804 = new BitSet(new long[]{0x0000000010000002L,0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_28_in_rulegroupByClause9815 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulegroupByClause9836 = new BitSet(new long[]{0x0000000010000002L,0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_rulehavingClause_in_rulegroupByClause9859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleorderByClause_in_entryRuleorderByClause9896 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleorderByClause9906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleORDER_BY_in_ruleorderByClause9940 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleorderElement_in_ruleorderByClause9953 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_ruleorderByClause9964 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleorderElement_in_ruleorderByClause9985 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleorderElement_in_entryRuleorderElement10023 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleorderElement10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleorderElement10083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000007FF8000L});
    public static final BitSet FOLLOW_ruleascendingOrDescending_in_ruleorderElement10092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleascendingOrDescending_in_entryRuleascendingOrDescending10123 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleascendingOrDescending10134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleASC_in_ruleascendingOrDescending10181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDESC_in_ruleascendingOrDescending10214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulehavingClause_in_entryRulehavingClause10259 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulehavingClause10269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHAVING_in_rulehavingClause10303 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulehavingClause10316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulewhereClause_in_entryRulewhereClause10352 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulewhereClause10362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHERE_in_rulewhereClause10396 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulewhereClause10409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleselectedPropertiesList_in_entryRuleselectedPropertiesList10445 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleselectedPropertiesList10455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulealiasedExpression_in_ruleselectedPropertiesList10501 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_ruleselectedPropertiesList10512 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulealiasedExpression_in_ruleselectedPropertiesList10533 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_rulealiasedExpression_in_entryRulealiasedExpression10571 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulealiasedExpression10581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpression_in_rulealiasedExpression10631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleAS_in_rulealiasedExpression10640 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_rulealiasedExpression10653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpression_in_entryRuleexpression10691 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleexpression10701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulelogicalOrExpression_in_ruleexpression10750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulelogicalOrExpression_in_entryRulelogicalOrExpression10784 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulelogicalOrExpression10794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulelogicalAndExpression_in_rulelogicalOrExpression10840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_ruleOR_in_rulelogicalOrExpression10850 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulelogicalAndExpression_in_rulelogicalOrExpression10863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_rulelogicalAndExpression_in_entryRulelogicalAndExpression10901 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulelogicalAndExpression10911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenegatedExpression_in_rulelogicalAndExpression10957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_ruleAND_in_rulelogicalAndExpression10967 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulenegatedExpression_in_rulelogicalAndExpression10980 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_rulenegatedExpression_in_entryRulenegatedExpression11018 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulenegatedExpression11028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNOT_in_rulenegatedExpression11063 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulenegatedExpression_in_rulenegatedExpression11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleequalityExpression_in_rulenegatedExpression11108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleequalityExpression_in_entryRuleequalityExpression11143 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleequalityExpression11153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulerelationalExpression_in_ruleequalityExpression11199 = new BitSet(new long[]{0x0014000000002002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_13_in_ruleequalityExpression11211 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleIS_in_ruleequalityExpression11227 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleNOT_in_ruleequalityExpression11229 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_50_in_ruleequalityExpression11240 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_52_in_ruleequalityExpression11256 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulerelationalExpression_in_ruleequalityExpression11278 = new BitSet(new long[]{0x0014000000002002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_rulerelationalExpression_in_entryRulerelationalExpression11316 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulerelationalExpression11326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleconcatenation_in_rulerelationalExpression11376 = new BitSet(new long[]{0x0023C00000010002L,0x0380000000000000L,0x000FF18000000000L});
    public static final BitSet FOLLOW_46_in_rulerelationalExpression11388 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_47_in_rulerelationalExpression11404 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_48_in_rulerelationalExpression11420 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_49_in_rulerelationalExpression11436 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleadditiveExpression_in_rulerelationalExpression11458 = new BitSet(new long[]{0x0003C00000000002L});
    public static final BitSet FOLLOW_ruleNOT_in_rulerelationalExpression11477 = new BitSet(new long[]{0x0020000000000000L,0x0380000000000000L,0x000FF00000000000L});
    public static final BitSet FOLLOW_ruleIN_in_rulerelationalExpression11482 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_rulecompoundExpr_in_rulerelationalExpression11495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBETWEEN_in_rulerelationalExpression11512 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulebetweenList_in_rulerelationalExpression11525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLIKE_in_rulerelationalExpression11542 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleconcatenation_in_rulerelationalExpression11555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_rulelikeEscape_in_rulerelationalExpression11576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMEMBER_in_rulerelationalExpression11593 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE07E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleOF_in_rulerelationalExpression11595 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulepath_in_rulerelationalExpression11610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulelikeEscape_in_entryRulelikeEscape11650 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulelikeEscape11660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleESCAPE_in_rulelikeEscape11707 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleconcatenation_in_rulelikeEscape11720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulebetweenList_in_entryRulebetweenList11758 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulebetweenList11768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleconcatenation_in_rulebetweenList11814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_ruleAND_in_rulebetweenList11823 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleconcatenation_in_rulebetweenList11836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleconcatenation_in_entryRuleconcatenation11872 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleconcatenation11882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleadditiveExpression_in_ruleconcatenation11932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_ruleconcatenation11942 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleadditiveExpression_in_ruleconcatenation11963 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_ruleconcatenation11974 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleadditiveExpression_in_ruleconcatenation11995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_ruleadditiveExpression_in_entryRuleadditiveExpression12035 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleadditiveExpression12045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulemultiplyExpression_in_ruleadditiveExpression12091 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_56_in_ruleadditiveExpression12103 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_57_in_ruleadditiveExpression12119 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_rulemultiplyExpression_in_ruleadditiveExpression12141 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_rulemultiplyExpression_in_entryRulemultiplyExpression12179 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulemultiplyExpression12189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_rulemultiplyExpression12235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000600L});
    public static final BitSet FOLLOW_73_in_rulemultiplyExpression12247 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_74_in_rulemultiplyExpression12263 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_rulemultiplyExpression12285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000600L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_entryRuleunaryExpression12323 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleunaryExpression12333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_ruleunaryExpression12369 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_ruleunaryExpression12390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_ruleunaryExpression12408 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_ruleunaryExpression12429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecaseExpression_in_ruleunaryExpression12461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulequantifiedExpression_in_ruleunaryExpression12491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleatom_in_ruleunaryExpression12521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecaseExpression_in_entryRulecaseExpression12556 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecaseExpression12566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_rulecaseExpression12601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulewhenClause_in_rulecaseExpression12614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L,0x00000000000001C7L});
    public static final BitSet FOLLOW_ruleelseClause_in_rulecaseExpression12636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleEND_in_rulecaseExpression12646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_rulecaseExpression12655 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_rulecaseExpression12668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulealtWhenClause_in_rulecaseExpression12689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L,0x00000000000001C7L});
    public static final BitSet FOLLOW_ruleelseClause_in_rulecaseExpression12711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleEND_in_rulecaseExpression12721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulewhenClause_in_entryRulewhenClause12750 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulewhenClause12760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_rulewhenClause12794 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulewhenClause12807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_ruleTHEN_in_rulewhenClause12816 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_rulewhenClause12829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulealtWhenClause_in_entryRulealtWhenClause12865 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulealtWhenClause12875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_rulealtWhenClause12909 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_rulealtWhenClause12922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_ruleTHEN_in_rulealtWhenClause12931 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_rulealtWhenClause12944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleelseClause_in_entryRuleelseClause12980 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleelseClause12990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELSE_in_ruleelseClause13024 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleunaryExpression_in_ruleelseClause13037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulequantifiedExpression_in_entryRulequantifiedExpression13073 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulequantifiedExpression13083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSOME_in_rulequantifiedExpression13130 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleEXISTS_in_rulequantifiedExpression13137 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleALL_in_rulequantifiedExpression13144 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleANY_in_rulequantifiedExpression13151 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_rulequantifiedExpression13154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecollectionExpr_in_rulequantifiedExpression13161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_rulequantifiedExpression13170 = new BitSet(new long[]{0x0000100000000000L,0x0000000070070080L,0x00000001C0000FC0L});
    public static final BitSet FOLLOW_ruleunionRule_in_rulequantifiedExpression13191 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulequantifiedExpression13201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleatom_in_entryRuleatom13239 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleatom13249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleprimaryExpression_in_ruleatom13299 = new BitSet(new long[]{0x0000001100000002L});
    public static final BitSet FOLLOW_36_in_ruleatom13310 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleatom13319 = new BitSet(new long[]{0x0000081100000002L});
    public static final BitSet FOLLOW_43_in_ruleatom13322 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FFFFFFFFFFFE07L});
    public static final BitSet FOLLOW_ruleexprList_in_ruleatom13343 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleatom13353 = new BitSet(new long[]{0x0000001100000002L});
    public static final BitSet FOLLOW_32_in_ruleatom13373 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleatom13394 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_ruleatom13404 = new BitSet(new long[]{0x0000001100000002L});
    public static final BitSet FOLLOW_ruleprimaryExpression_in_entryRuleprimaryExpression13443 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleprimaryExpression13453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleidentPrimary_in_ruleprimaryExpression13512 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_ruleprimaryExpression13523 = new BitSet(new long[]{0x0000000000000000L,0x1C00000000000000L});
    public static final BitSet FOLLOW_ruleCLASS_in_ruleprimaryExpression13532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleconstant_in_ruleprimaryExpression13542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_ruleprimaryExpression13551 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleprimaryExpression13560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_ruleprimaryExpression13570 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070077880L,0xFC0E0181C0000FC0L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpressionOrVector_in_ruleprimaryExpression13596 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_ruleunionRule_in_ruleprimaryExpression13622 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleprimaryExpression13633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_ruleprimaryExpression13651 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleprimaryExpression13661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpressionOrVector_in_entryRuleexpressionOrVector13699 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleexpressionOrVector13709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleexpressionOrVector13759 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_rulevectorExpr_in_ruleexpressionOrVector13779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulevectorExpr_in_entryRulevectorExpr13816 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulevectorExpr13826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_rulevectorExpr13861 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulevectorExpr13882 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_rulevectorExpr13893 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulevectorExpr13914 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleidentPrimary_in_entryRuleidentPrimary13952 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleidentPrimary13962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleidentPrimary14009 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_36_in_ruleidentPrimary14013 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleidentPrimary14022 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_36_in_ruleidentPrimary14032 = new BitSet(new long[]{0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_ruleidentPrimary14041 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_36_in_ruleidentPrimary14051 = new BitSet(new long[]{0x0000000000000000L,0x000000000E000000L});
    public static final BitSet FOLLOW_ruleOBJECT_in_ruleidentPrimary14060 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_43_in_ruleidentPrimary14066 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FFFFFFFFFFFE07L});
    public static final BitSet FOLLOW_ruleexprList_in_ruleidentPrimary14087 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleidentPrimary14097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleaggregate_in_ruleidentPrimary14131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleaggregate_in_entryRuleaggregate14166 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleaggregate14176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSUM_in_ruleaggregate14224 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleAVG_in_ruleaggregate14231 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleMAX_in_ruleaggregate14238 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleMIN_in_ruleaggregate14245 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleaggregate14248 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleadditiveExpression_in_ruleaggregate14269 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleaggregate14279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCOUNT_in_ruleaggregate14296 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleaggregate14298 = new BitSet(new long[]{0x08C025C004000040L,0xE000000070387A00L,0xE00E000000000000L,0x0000007000038007L});
    public static final BitSet FOLLOW_73_in_ruleaggregate14309 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_ruleDISTINCT_in_ruleaggregate14326 = new BitSet(new long[]{0x08C025C004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleALL_in_ruleaggregate14333 = new BitSet(new long[]{0x08C025C004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_rulepath_in_ruleaggregate14337 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_rulecollectionExpr_in_ruleaggregate14344 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleaggregate14349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecollectionExpr_in_ruleaggregate14365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecollectionExpr_in_entryRulecollectionExpr14394 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecollectionExpr14405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_rulecollectionExpr14453 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleINDICES_in_rulecollectionExpr14486 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_rulecollectionExpr14505 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulepath_in_rulecollectionExpr14527 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulecollectionExpr14545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecompoundExpr_in_entryRulecompoundExpr14585 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulecompoundExpr14595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulecollectionExpr_in_rulecompoundExpr14629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulepath_in_rulecompoundExpr14636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_rulecompoundExpr14645 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070077880L,0xFC0E0181C0000FC0L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulecompoundExpr14668 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_rulecompoundExpr14679 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_rulecompoundExpr14700 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_ruleunionRule_in_rulecompoundExpr14730 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulecompoundExpr14741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexprList_in_entryRuleexprList14778 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleexprList14788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRAILING_in_ruleexprList14823 = new BitSet(new long[]{0xCBC02DD0040707C2L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleLEADING_in_ruleexprList14830 = new BitSet(new long[]{0xCBC02DD0040707C2L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleBOTH_in_ruleexprList14837 = new BitSet(new long[]{0xCBC02DD0040707C2L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleexprList14854 = new BitSet(new long[]{0x0000000010000002L,0x0000000070000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_28_in_ruleexprList14866 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleexprList14887 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleexprList14905 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleexprList14918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_ruleexprList14935 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_ruleexprList14948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleexprList14968 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_ruleexprList14981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleconstant_in_entryRuleconstant15021 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleconstant15032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenumber_in_ruleconstant15079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleconstant15105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNULL_in_ruleconstant15138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRUE_in_ruleconstant15171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFALSE_in_ruleconstant15204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEMPTY_in_ruleconstant15237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulepath_in_entryRulepath15283 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulepath15294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleidentifier_in_rulepath15341 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_rulepath15360 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_rulepath15382 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_ruleidentifier_in_entryRuleidentifier15430 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleidentifier15441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_ruleidentifier15481 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleidentifier15498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_ruleidentifier15523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_ruleidentifier15542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleidentifier15561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_ruleidentifier15580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_ruleidentifier15599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ruleidentifier15618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ruleidentifier15637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruleidentifier15656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_ruleidentifier15675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_ruleidentifier15694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_ruleidentifier15713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_ruleidentifier15732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEND_in_ruleidentifier15760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_ruleidentifier15793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleidentifier15826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMEMBER_in_ruleidentifier15859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulenumber_in_entryRulenumber15905 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulenumber15916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_rulenumber15955 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_RULE_INT_in_rulenumber15971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000007000L});
    public static final BitSet FOLLOW_76_in_rulenumber15990 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_56_in_rulenumber16004 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_57_in_rulenumber16023 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_rulenumber16040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_77_in_rulenumber16061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_rulenumber16080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_HEX_in_rulenumber16108 = new BitSet(new long[]{0x0000001000000002L,0x000000000000F000L});
    public static final BitSet FOLLOW_RULE_INT_in_rulenumber16134 = new BitSet(new long[]{0x0000001000000002L,0x000000000000F000L});
    public static final BitSet FOLLOW_RULE_SIGNED_INT_in_rulenumber16160 = new BitSet(new long[]{0x0000001000000002L,0x000000000000F000L});
    public static final BitSet FOLLOW_79_in_rulenumber16180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_rulenumber16201 = new BitSet(new long[]{0x0000000000000102L,0x0000000000007000L});
    public static final BitSet FOLLOW_RULE_INT_in_rulenumber16217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000007000L});
    public static final BitSet FOLLOW_76_in_rulenumber16238 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_56_in_rulenumber16252 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_57_in_rulenumber16271 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_rulenumber16288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_77_in_rulenumber16309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_rulenumber16328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_rulenumber16351 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_56_in_rulenumber16365 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_57_in_rulenumber16384 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_rulenumber16401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_77_in_rulenumber16420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_rulenumber16439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_rulenumber16461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_rulenumber16480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSELECT_in_entryRuleSELECT16525 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSELECT16536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_ruleSELECT16574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_ruleSELECT16593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_ruleSELECT16612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDISTINCT_in_entryRuleDISTINCT16653 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDISTINCT16664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_ruleDISTINCT16702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_ruleDISTINCT16721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_ruleDISTINCT16740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNEW_in_entryRuleNEW16781 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNEW16792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_ruleNEW16830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_ruleNEW16849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_ruleNEW16868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOBJECT_in_entryRuleOBJECT16909 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOBJECT16920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_ruleOBJECT16958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_ruleOBJECT16977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_ruleOBJECT16996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_entryRuleFROM17037 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFROM17048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_ruleFROM17086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_ruleFROM17105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_ruleFROM17124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLEFT_in_entryRuleLEFT17165 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLEFT17176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_ruleLEFT17214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_ruleLEFT17233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_ruleLEFT17252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRIGHT_in_entryRuleRIGHT17293 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRIGHT17304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_ruleRIGHT17342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_ruleRIGHT17361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_ruleRIGHT17380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOUTER_in_entryRuleOUTER17421 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOUTER17432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_ruleOUTER17470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_ruleOUTER17489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_ruleOUTER17508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFULL_in_entryRuleFULL17549 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFULL17560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_ruleFULL17598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_ruleFULL17617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_ruleFULL17636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleINNER_in_entryRuleINNER17677 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleINNER17688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_ruleINNER17726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_ruleINNER17745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_ruleINNER17764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJOIN_in_entryRuleJOIN17805 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJOIN17816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_ruleJOIN17854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_ruleJOIN17873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_ruleJOIN17892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFETCH_in_entryRuleFETCH17933 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFETCH17944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_ruleFETCH17982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_ruleFETCH18001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_ruleFETCH18020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWITH_in_entryRuleWITH18061 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWITH18072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_ruleWITH18110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_ruleWITH18129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_ruleWITH18148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_entryRuleIN18189 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIN18200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ruleIN18238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_ruleIN18257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_ruleIN18276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCLASS_in_entryRuleCLASS18317 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCLASS18328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_ruleCLASS18366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_ruleCLASS18385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_ruleCLASS18404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_CLASS_in_entryRuleIN_CLASS18445 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIN_CLASS18456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_ruleIN_CLASS18503 = new BitSet(new long[]{0x0000000000000000L,0x1C00000000000000L});
    public static final BitSet FOLLOW_ruleCLASS_in_ruleIN_CLASS18530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_entryRuleELEMENTS18576 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleELEMENTS18587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_ruleELEMENTS18625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_ruleELEMENTS18644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_ruleELEMENTS18663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_ELEMENTS_in_entryRuleIN_ELEMENTS18704 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIN_ELEMENTS18715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_ruleIN_ELEMENTS18762 = new BitSet(new long[]{0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_ruleIN_ELEMENTS18789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_entryRuleAS18835 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAS18846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_ruleAS18884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_ruleAS18903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_ruleAS18922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePROPERTIES_in_entryRulePROPERTIES18963 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePROPERTIES18974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_rulePROPERTIES19012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_rulePROPERTIES19031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_rulePROPERTIES19050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleGROUP_BY_in_entryRuleGROUP_BY19091 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleGROUP_BY19102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_ruleGROUP_BY19141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_135_in_ruleGROUP_BY19160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_136_in_ruleGROUP_BY19179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_ruleBY_in_ruleGROUP_BY19202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleORDER_BY_in_entryRuleORDER_BY19248 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleORDER_BY19259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_ruleORDER_BY19298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_138_in_ruleORDER_BY19317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_139_in_ruleORDER_BY19336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_ruleBY_in_ruleORDER_BY19359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBY_in_entryRuleBY19405 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBY19416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_ruleBY19454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_ruleBY19473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_ruleBY19492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleASC_in_entryRuleASC19533 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleASC19544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_ruleASC19582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_ruleASC19601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_ruleASC19620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_ruleASC19639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_ruleASC19658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_ruleASC19677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDESC_in_entryRuleDESC19718 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDESC19729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_ruleDESC19767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_ruleDESC19786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_ruleDESC19805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_ruleDESC19824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_ruleDESC19843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_ruleDESC19862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHAVING_in_entryRuleHAVING19903 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleHAVING19914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_ruleHAVING19952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_ruleHAVING19971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_ruleHAVING19990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHERE_in_entryRuleWHERE20031 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWHERE20042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_ruleWHERE20080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_ruleWHERE20099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ruleWHERE20118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOR_in_entryRuleOR20159 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOR20170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ruleOR20208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ruleOR20227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_ruleOR20246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAND_in_entryRuleAND20287 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAND20298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ruleAND20336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ruleAND20355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ruleAND20374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNOT_in_entryRuleNOT20415 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNOT20426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ruleNOT20464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_ruleNOT20483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_ruleNOT20502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIS_in_entryRuleIS20543 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIS20554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_ruleIS20592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_ruleIS20611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_ruleIS20630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBETWEEN_in_entryRuleBETWEEN20671 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBETWEEN20682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_ruleBETWEEN20720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_ruleBETWEEN20739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_ruleBETWEEN20758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLIKE_in_entryRuleLIKE20799 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLIKE20810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_ruleLIKE20848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_ruleLIKE20867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_ruleLIKE20886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMEMBER_in_entryRuleMEMBER20927 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMEMBER20938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_ruleMEMBER20976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_ruleMEMBER20995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_ruleMEMBER21014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOF_in_entryRuleOF21055 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOF21066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_ruleOF21104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_ruleOF21123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_ruleOF21142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleESCAPE_in_entryRuleESCAPE21183 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleESCAPE21194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_ruleESCAPE21232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_ruleESCAPE21251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_ruleESCAPE21270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_entryRuleCASE21311 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCASE21322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_ruleCASE21360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_ruleCASE21379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_ruleCASE21398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEND_in_entryRuleEND21439 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEND21450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_ruleEND21488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_ruleEND21507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_ruleEND21526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_entryRuleWHEN21567 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWHEN21578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_ruleWHEN21616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_ruleWHEN21635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_ruleWHEN21654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTHEN_in_entryRuleTHEN21695 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTHEN21706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_ruleTHEN21744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_ruleTHEN21763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_ruleTHEN21782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELSE_in_entryRuleELSE21823 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleELSE21834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_ruleELSE21872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_ruleELSE21891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_ruleELSE21910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSOME_in_entryRuleSOME21951 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSOME21962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_ruleSOME22000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_ruleSOME22019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_ruleSOME22038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEXISTS_in_entryRuleEXISTS22079 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEXISTS22090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_ruleEXISTS22128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_ruleEXISTS22147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_ruleEXISTS22166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleALL_in_entryRuleALL22207 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleALL22218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_ruleALL22256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_ruleALL22275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_ruleALL22294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleANY_in_entryRuleANY22335 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleANY22346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_ruleANY22384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_ruleANY22403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_ruleANY22422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSUM_in_entryRuleSUM22463 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSUM22474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_ruleSUM22512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_ruleSUM22531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_ruleSUM22550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAVG_in_entryRuleAVG22591 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAVG22602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_ruleAVG22640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_ruleAVG22659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_ruleAVG22678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMAX_in_entryRuleMAX22719 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMAX22730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_ruleMAX22768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_ruleMAX22787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_ruleMAX22806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMIN_in_entryRuleMIN22847 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMIN22858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_ruleMIN22896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_ruleMIN22915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_ruleMIN22934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCOUNT_in_entryRuleCOUNT22975 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCOUNT22986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_225_in_ruleCOUNT23024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_ruleCOUNT23043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_ruleCOUNT23062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleINDICES_in_entryRuleINDICES23103 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleINDICES23114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_228_in_ruleINDICES23152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_229_in_ruleINDICES23171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_230_in_ruleINDICES23190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRAILING_in_entryRuleTRAILING23231 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTRAILING23242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_231_in_ruleTRAILING23280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_232_in_ruleTRAILING23299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_233_in_ruleTRAILING23318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLEADING_in_entryRuleLEADING23359 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLEADING23370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_234_in_ruleLEADING23408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_235_in_ruleLEADING23427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_236_in_ruleLEADING23446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBOTH_in_entryRuleBOTH23487 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBOTH23498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_237_in_ruleBOTH23536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_238_in_ruleBOTH23555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_239_in_ruleBOTH23574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNULL_in_entryRuleNULL23615 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNULL23626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_240_in_ruleNULL23664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_241_in_ruleNULL23683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_ruleNULL23702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRUE_in_entryRuleTRUE23743 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTRUE23754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_242_in_ruleTRUE23792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_243_in_ruleTRUE23811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_244_in_ruleTRUE23830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFALSE_in_entryRuleFALSE23871 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFALSE23882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_245_in_ruleFALSE23920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_246_in_ruleFALSE23939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_247_in_ruleFALSE23958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEMPTY_in_entryRuleEMPTY23999 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEMPTY24010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_248_in_ruleEMPTY24048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_249_in_ruleEMPTY24067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_ruleEMPTY24086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulekeyword_in_entryRulekeyword24127 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulekeyword24138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_rulekeyword24176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_rulekeyword24195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_rulekeyword24214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_rulekeyword24233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_rulekeyword24252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_rulekeyword24271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_rulekeyword24290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_rulekeyword24309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_rulekeyword24328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_rulekeyword24347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_rulekeyword24366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_rulekeyword24385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_rulekeyword24404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_synpred14780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_synpred15861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_synpred16943 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_synpred16966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_synpred171036 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_synpred171059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletype_in_synpred382427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruletype_in_synpred392542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulestatement_in_synpred947563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_synpred15712601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulewhenClause_in_synpred15712614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L,0x00000000000001C7L});
    public static final BitSet FOLLOW_ruleelseClause_in_synpred15712636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleEND_in_synpred15712646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpressionOrVector_in_synpred17213596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_synpred17714013 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_synpred17714022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleexpression_in_synpred19514668 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_synpred19514679 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_synpred19514700 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleexpression_in_synpred20314854 = new BitSet(new long[]{0x0000000010000002L,0x0000000070000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_28_in_synpred20314866 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_synpred20314887 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleFROM_in_synpred20314905 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_synpred20314918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_synpred20314935 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleidentifier_in_synpred20314948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_synpred20414968 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleexpression_in_synpred20414981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_synpred25116201 = new BitSet(new long[]{0x0000000000000102L,0x0000000000007000L});
    public static final BitSet FOLLOW_RULE_INT_in_synpred25116217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000007000L});
    public static final BitSet FOLLOW_76_in_synpred25116238 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_set_in_synpred25116247 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_synpred25116288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_set_in_synpred25116304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_synpred25116351 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_set_in_synpred25116360 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_synpred25116401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_set_in_synpred25116415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_synpred25116461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_synpred25116480 = new BitSet(new long[]{0x0000000000000002L});

}