/*
* generated by Xtext
*/
grammar InternalMDD;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.makumba.devel.plugin.eclipse.mdd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.makumba.devel.plugin.eclipse.mdd.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.makumba.devel.plugin.eclipse.mdd.services.MDDGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MDDGrammarAccess grammarAccess;
 	
    public InternalMDDParser(TokenStream input, IAstFactory factory, MDDGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/makumba/devel/plugin/eclipse/mdd/parser/antlr/internal/InternalMDD.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "dataDefinition";	
   	}
   	
   	@Override
   	protected MDDGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuledataDefinition
entryRuledataDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataDefinitionRule(), currentNode); }
	 iv_ruledataDefinition=ruledataDefinition 
	 { $current=$iv_ruledataDefinition.current; } 
	 EOF 
;

// Rule dataDefinition
ruledataDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((RULE_LINEBREAK
    { 
    createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_0(), null); 
    }
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDefinitionAccess().getDDeclarationParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_d_1_0=ruledeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"d",
	        		lv_d_1_0, 
	        		"declaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_FIELDCOMMENT
    { 
    createLeafNode(grammarAccess.getDataDefinitionAccess().getFIELDCOMMENTTerminalRuleCall_1_1(), null); 
    }
)?(RULE_LINEBREAK
    { 
    createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_1_2(), null); 
    }
)*)+)
;





// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclarationRule(), currentNode); }
	 iv_ruledeclaration=ruledeclaration 
	 { $current=$iv_ruledeclaration.current; } 
	 EOF 
;

// Rule declaration
ruledeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getFieldDeclarationParserRuleCall_0(), currentNode); 
    }
    this_fieldDeclaration_0=rulefieldDeclaration
    { 
        $current = $this_fieldDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getTitleDeclarationParserRuleCall_1(), currentNode); 
    }
    this_titleDeclaration_1=ruletitleDeclaration
    { 
        $current = $this_titleDeclaration_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_2(), currentNode); 
    }
    this_typeDeclaration_2=ruletypeDeclaration
    { 
        $current = $this_typeDeclaration_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_3(), currentNode); 
    }
    this_includeDeclaration_3=ruleincludeDeclaration
    { 
        $current = $this_includeDeclaration_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getValidationRuleDeclarationParserRuleCall_4(), currentNode); 
    }
    this_validationRuleDeclaration_4=rulevalidationRuleDeclaration
    { 
        $current = $this_validationRuleDeclaration_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_5(), currentNode); 
    }
    this_functionDeclaration_5=rulefunctionDeclaration
    { 
        $current = $this_functionDeclaration_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getNativeValidationRuleDeclarationParserRuleCall_6(), currentNode); 
    }
    this_nativeValidationRuleDeclaration_6=rulenativeValidationRuleDeclaration
    { 
        $current = $this_nativeValidationRuleDeclaration_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getSubFieldDeclarationParserRuleCall_7(), currentNode); 
    }
    this_subFieldDeclaration_7=rulesubFieldDeclaration
    { 
        $current = $this_subFieldDeclaration_7.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulefieldDeclaration
entryRulefieldDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldDeclarationRule(), currentNode); }
	 iv_rulefieldDeclaration=rulefieldDeclaration 
	 { $current=$iv_rulefieldDeclaration.current; } 
	 EOF 
;

// Rule fieldDeclaration
rulefieldDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			createLeafNode(grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_0_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getNameKeywordParserRuleCall_0_0_1(), currentNode); 
	    }
		lv_name_0_2=rulekeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_2, 
	        		"keyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)	'=' 
    {
        createLeafNode(grammarAccess.getFieldDeclarationAccess().getEqualsSignKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getModifiersModifiersParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_modifiers_2_0=rulemodifiers		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modifiers",
	        		lv_modifiers_2_0, 
	        		"modifiers", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getTypedefFieldTypeParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typedef_3_0=rulefieldType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typedef",
	        		lv_typedef_3_0, 
	        		"fieldType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulemodifiers
entryRulemodifiers returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModifiersRule(), currentNode); }
	 iv_rulemodifiers=rulemodifiers 
	 { $current=$iv_rulemodifiers.current; } 
	 EOF 
;

// Rule modifiers
rulemodifiers returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModifiersAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0);
	 				}
					(
(
		lv_unique_1_0=	'unique' 
    {
        createLeafNode(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0(), "unique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "unique", true, "unique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1);
	 				}
					(
(
		lv_fixed_2_0=	'fixed' 
    {
        createLeafNode(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0(), "fixed"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "fixed", true, "fixed", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2);
	 				}
					((
(
		lv_notNull_3_0=	'not' 
    {
        createLeafNode(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0(), "notNull"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "notNull", true, "not", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'null' 
    {
        createLeafNode(grammarAccess.getModifiersAccess().getNullKeyword_2_1(), null); 
    }
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3);
	 				}
					((
(
		lv_notEmpty_5_0=	'not' 
    {
        createLeafNode(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0(), "notEmpty"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "notEmpty", true, "not", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'empty' 
    {
        createLeafNode(grammarAccess.getModifiersAccess().getEmptyKeyword_3_1(), null); 
    }
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModifiersAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRulefieldType
entryRulefieldType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldTypeRule(), currentNode); }
	 iv_rulefieldType=rulefieldType 
	 { $current=$iv_rulefieldType.current; } 
	 EOF 
;

// Rule fieldType
rulefieldType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharTypeParserRuleCall_0(), currentNode); 
    }
    this_charType_0=rulecharType
    { 
        $current = $this_charType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_1(), currentNode); 
    }
    this_charEnum_1=rulecharEnum
    { 
        $current = $this_charEnum_1.current; 
        currentNode = currentNode.getParent();
    }

    |(	'set' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getSetKeyword_2_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_2_1(), currentNode); 
    }
    this_charEnum_3=rulecharEnum
    { 
        $current = $this_charEnum_3.current; 
        currentNode = currentNode.getParent();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_3(), currentNode); 
    }
    this_intEnum_4=ruleintEnum
    { 
        $current = $this_intEnum_4.current; 
        currentNode = currentNode.getParent();
    }

    |(	'set' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getSetKeyword_4_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_4_1(), currentNode); 
    }
    this_intEnum_6=ruleintEnum
    { 
        $current = $this_intEnum_6.current; 
        currentNode = currentNode.getParent();
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_type_8_1=	'int' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeIntKeyword_5_1_0_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_8_2=	'real' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeRealKeyword_5_1_0_1(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_8_3=	'boolean' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeBooleanKeyword_5_1_0_2(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_8_4=	'text' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeTextKeyword_5_1_0_3(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_8_5=	'binary' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeBinaryKeyword_5_1_0_4(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_8_6=	'file' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeFileKeyword_5_1_0_5(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_8_7=	'date' 
    {
        createLeafNode(grammarAccess.getFieldTypeAccess().getTypeDateKeyword_5_1_0_6(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getPointerParserRuleCall_6(), currentNode); 
    }
    this_pointer_9=rulepointer
    { 
        $current = $this_pointer_9.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getSetTypeParserRuleCall_7(), currentNode); 
    }
    this_setType_10=rulesetType
    { 
        $current = $this_setType_10.current; 
        currentNode = currentNode.getParent();
    }

    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationCrossReference_8_0(), "typeDec"); 
	}

)
))
;





// Entry rule entryRuleintEnum
entryRuleintEnum returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntEnumRule(), currentNode); }
	 iv_ruleintEnum=ruleintEnum 
	 { $current=$iv_ruleintEnum.current; } 
	 EOF 
;

// Rule intEnum
ruleintEnum returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'int' 
    {
        createLeafNode(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "int", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getIntEnumAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_2_0(), currentNode); 
	    }
		lv_values_2_0=ruleenumValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_2_0, 
	        		"enumValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIntEnumAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_values_4_0=ruleenumValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_4_0, 
	        		"enumValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getIntEnumAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRulecharEnum
entryRulecharEnum returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCharEnumRule(), currentNode); }
	 iv_rulecharEnum=rulecharEnum 
	 { $current=$iv_rulecharEnum.current; } 
	 EOF 
;

// Rule charEnum
rulecharEnum returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'char' 
    {
        createLeafNode(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "char", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getCharEnumAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		lv_values_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_2_0(), "values"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCharEnumAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		lv_values_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_3_1_0(), "values"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getCharEnumAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleenumValue
entryRuleenumValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumValueRule(), currentNode); }
	 iv_ruleenumValue=ruleenumValue 
	 { $current=$iv_ruleenumValue.current; } 
	 EOF 
;

// Rule enumValue
ruleenumValue returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getEnumValueAccess().getNameSTRINGTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getEnumValueAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
(
		lv_value_2_1=RULE_INT
		{
			createLeafNode(grammarAccess.getEnumValueAccess().getValueINTTerminalRuleCall_2_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_1, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_2_2=RULE_SIGNED_INT
		{
			createLeafNode(grammarAccess.getEnumValueAccess().getValueSIGNED_INTTerminalRuleCall_2_0_1(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_2, 
	        		"SIGNED_INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	'deprecated' 
    {
        createLeafNode(grammarAccess.getEnumValueAccess().getDeprecatedKeyword_3(), null); 
    }
)?)
;





// Entry rule entryRulecharType
entryRulecharType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCharTypeRule(), currentNode); }
	 iv_rulecharType=rulecharType 
	 { $current=$iv_rulecharType.current; } 
	 EOF 
;

// Rule charType
rulecharType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCharTypeAccess().getCharTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'char' 
    {
        createLeafNode(grammarAccess.getCharTypeAccess().getCharKeyword_1(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getCharTypeAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }
(
(
		lv_length_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getCharTypeAccess().getLengthINTTerminalRuleCall_2_1_0(), "length"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"length",
	        		lv_length_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	']' 
    {
        createLeafNode(grammarAccess.getCharTypeAccess().getRightSquareBracketKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRulepointer
entryRulepointer returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPointerRule(), currentNode); }
	 iv_rulepointer=rulepointer 
	 { $current=$iv_rulepointer.current; } 
	 EOF 
;

// Rule pointer
rulepointer returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPointerAccess().getPointerAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPointerAccess().getPointerAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'ptr' 
    {
        createLeafNode(grammarAccess.getPointerAccess().getPtrKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPointerAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPointerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulesetType
entryRulesetType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSetTypeRule(), currentNode); }
	 iv_rulesetType=rulesetType 
	 { $current=$iv_rulesetType.current; } 
	 EOF 
;

// Rule setType
rulesetType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSetTypeAccess().getSetTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSetTypeAccess().getSetTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'set' 
    {
        createLeafNode(grammarAccess.getSetTypeAccess().getSetKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulesubFieldDeclaration
entryRulesubFieldDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubFieldDeclarationRule(), currentNode); }
	 iv_rulesubFieldDeclaration=rulesubFieldDeclaration 
	 { $current=$iv_rulesubFieldDeclaration.current; } 
	 EOF 
;

// Rule subFieldDeclaration
rulesubFieldDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSubFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationCrossReference_0_0(), "subFieldOf"); 
	}

)
)	'->' 
    {
        createLeafNode(grammarAccess.getSubFieldDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubFieldDeclarationAccess().getDDeclarationParserRuleCall_2_0(), currentNode); 
	    }
		lv_d_2_0=ruledeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"d",
	        		lv_d_2_0, 
	        		"declaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuletype
entryRuletype returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); } 
	 iv_ruletype=ruletype 
	 { $current=$iv_ruletype.current.getText(); }  
	 EOF 
;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getTypeAccess().getIDTerminalRuleCall_0_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getKeywordParserRuleCall_0_1(), currentNode); 
    }
    this_keyword_1=rulekeyword    {
		$current.merge(this_keyword_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTypeAccess().getFullStopKeyword_1_0_0(), null); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1(), null); 
    }
)(    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    createLeafNode(grammarAccess.getTypeAccess().getIDTerminalRuleCall_1_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getKeywordParserRuleCall_1_1_1(), currentNode); 
    }
    this_keyword_5=rulekeyword    {
		$current.merge(this_keyword_5);
    }

    { 
        currentNode = currentNode.getParent();
    }
))*)
    ;





// Entry rule entryRuletitleDeclaration
entryRuletitleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTitleDeclarationRule(), currentNode); }
	 iv_ruletitleDeclaration=ruletitleDeclaration 
	 { $current=$iv_ruletitleDeclaration.current; } 
	 EOF 
;

// Rule titleDeclaration
ruletitleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'!' 
    {
        createLeafNode(grammarAccess.getTitleDeclarationAccess().getExclamationMarkKeyword_0(), null); 
    }
	'title' 
    {
        createLeafNode(grammarAccess.getTitleDeclarationAccess().getTitleKeyword_1(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getTitleDeclarationAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTitleDeclarationAccess().getTitleTitleParserRuleCall_3_0(), currentNode); 
	    }
		lv_title_3_0=ruletitle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTitleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"title",
	        		lv_title_3_0, 
	        		"title", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuletitle
entryRuletitle returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTitleRule(), currentNode); }
	 iv_ruletitle=ruletitle 
	 { $current=$iv_ruletitle.current; } 
	 EOF 
;

// Rule title
ruletitle returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTitleAccess().getNameTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTitleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTitleAccess().getFunctionCallParserRuleCall_1(), currentNode); 
    }
    this_functionCall_1=rulefunctionCall
    { 
        $current = $this_functionCall_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleincludeDeclaration
entryRuleincludeDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIncludeDeclarationRule(), currentNode); }
	 iv_ruleincludeDeclaration=ruleincludeDeclaration 
	 { $current=$iv_ruleincludeDeclaration.current; } 
	 EOF 
;

// Rule includeDeclaration
ruleincludeDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'!' 
    {
        createLeafNode(grammarAccess.getIncludeDeclarationAccess().getExclamationMarkKeyword_0(), null); 
    }
	'include' 
    {
        createLeafNode(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getIncludeDeclarationAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceTypeParserRuleCall_3_0(), currentNode); 
	    }
		lv_importedNamespace_3_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIncludeDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importedNamespace",
	        		lv_importedNamespace_3_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuletypeDeclaration
entryRuletypeDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeDeclarationRule(), currentNode); }
	 iv_ruletypeDeclaration=ruletypeDeclaration 
	 { $current=$iv_ruletypeDeclaration.current; } 
	 EOF 
;

// Rule typeDeclaration
ruletypeDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'!' 
    {
        createLeafNode(grammarAccess.getTypeDeclarationAccess().getExclamationMarkKeyword_0(), null); 
    }
	'type' 
    {
        createLeafNode(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1(), null); 
    }
	'.' 
    {
        createLeafNode(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_2(), null); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDeclarationAccess().getFieldTypeFieldTypeParserRuleCall_5_0(), currentNode); 
	    }
		lv_fieldType_5_0=rulefieldType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fieldType",
	        		lv_fieldType_5_0, 
	        		"fieldType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulevalidationRuleDeclaration
entryRulevalidationRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValidationRuleDeclarationRule(), currentNode); }
	 iv_rulevalidationRuleDeclaration=rulevalidationRuleDeclaration 
	 { $current=$iv_rulevalidationRuleDeclaration.current; } 
	 EOF 
;

// Rule validationRuleDeclaration
rulevalidationRuleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getRangeValidationRuleDeclarationParserRuleCall_0_0(), currentNode); 
    }
    this_rangeValidationRuleDeclaration_0=rulerangeValidationRuleDeclaration
    { 
        $current = $this_rangeValidationRuleDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getUniquenessValidationRuleDeclarationParserRuleCall_0_1(), currentNode); 
    }
    this_uniquenessValidationRuleDeclaration_1=ruleuniquenessValidationRuleDeclaration
    { 
        $current = $this_uniquenessValidationRuleDeclaration_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getComparisonValidationRuleDeclarationParserRuleCall_0_2(), currentNode); 
    }
    this_comparisonValidationRuleDeclaration_2=rulecomparisonValidationRuleDeclaration
    { 
        $current = $this_comparisonValidationRuleDeclaration_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getRegexValidationRuleDeclarationParserRuleCall_0_3(), currentNode); 
    }
    this_regexValidationRuleDeclaration_3=ruleregexValidationRuleDeclaration
    { 
        $current = $this_regexValidationRuleDeclaration_3.current; 
        currentNode = currentNode.getParent();
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageErrorMessageParserRuleCall_1_0(), currentNode); 
	    }
		lv_errorMessage_4_0=ruleerrorMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"errorMessage",
	        		lv_errorMessage_4_0, 
	        		"errorMessage", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecomparisonValidationRuleDeclaration
entryRulecomparisonValidationRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationRule(), currentNode); }
	 iv_rulecomparisonValidationRuleDeclaration=rulecomparisonValidationRuleDeclaration 
	 { $current=$iv_rulecomparisonValidationRuleDeclaration.current; } 
	 EOF 
;

// Rule comparisonValidationRuleDeclaration
rulecomparisonValidationRuleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'compare' 
    {
        createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "compare", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_args_1_0=rulefunctionArguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"args",
	        		lv_args_1_0, 
	        		"functionArguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpComparisonExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_comparisonExp_3_0=rulecomparisonExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"comparisonExp",
	        		lv_comparisonExp_3_0, 
	        		"comparisonExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRulecomparisonExpression
entryRulecomparisonExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComparisonExpressionRule(), currentNode); }
	 iv_rulecomparisonExpression=rulecomparisonExpression 
	 { $current=$iv_rulecomparisonExpression.current; } 
	 EOF 
;

// Rule comparisonExpression
rulecomparisonExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getLhsComparisonPartParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=rulecomparisonPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"comparisonPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getOOperatorParserRuleCall_1_0(), currentNode); 
	    }
		lv_o_1_0=ruleoperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"o",
	        		lv_o_1_0, 
	        		"operator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsComparisonPartParserRuleCall_2_0(), currentNode); 
	    }
		lv_rhs_2_0=rulecomparisonPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rhs",
	        		lv_rhs_2_0, 
	        		"comparisonPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecomparisonPart
entryRulecomparisonPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComparisonPartRule(), currentNode); }
	 iv_rulecomparisonPart=rulecomparisonPart 
	 { $current=$iv_rulecomparisonPart.current; } 
	 EOF 
;

// Rule comparisonPart
rulecomparisonPart returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getTTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_t_0_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"t",
	        		lv_t_0_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_n_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getComparisonPartAccess().getNINTTerminalRuleCall_1_0(), "n"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"n",
	        		lv_n_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getDfDateFunctionParserRuleCall_2_0(), currentNode); 
	    }
		lv_df_2_0=ruledateFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"df",
	        		lv_df_2_0, 
	        		"dateFunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getUUpperFunctionParserRuleCall_3_0(), currentNode); 
	    }
		lv_u_3_0=ruleupperFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"u",
	        		lv_u_3_0, 
	        		"upperFunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getLLowerFunctionParserRuleCall_4_0(), currentNode); 
	    }
		lv_l_4_0=rulelowerFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"l",
	        		lv_l_4_0, 
	        		"lowerFunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getDDateConstantParserRuleCall_5_0(), currentNode); 
	    }
		lv_d_5_0=ruledateConstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"d",
	        		lv_d_5_0, 
	        		"dateConstant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleupperFunction
entryRuleupperFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUpperFunctionRule(), currentNode); }
	 iv_ruleupperFunction=ruleupperFunction 
	 { $current=$iv_ruleupperFunction.current; } 
	 EOF 
;

// Rule upperFunction
ruleupperFunction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'upper' 
    {
        createLeafNode(grammarAccess.getUpperFunctionAccess().getUpperKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getUpperFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUpperFunctionAccess().getTTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_t_2_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUpperFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"t",
	        		lv_t_2_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getUpperFunctionAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRulelowerFunction
entryRulelowerFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLowerFunctionRule(), currentNode); }
	 iv_rulelowerFunction=rulelowerFunction 
	 { $current=$iv_rulelowerFunction.current; } 
	 EOF 
;

// Rule lowerFunction
rulelowerFunction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'lower' 
    {
        createLeafNode(grammarAccess.getLowerFunctionAccess().getLowerKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getLowerFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLowerFunctionAccess().getTTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_t_2_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLowerFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"t",
	        		lv_t_2_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getLowerFunctionAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleoperator
entryRuleoperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperatorRule(), currentNode); } 
	 iv_ruleoperator=ruleoperator 
	 { $current=$iv_ruleoperator.current.getText(); }  
	 EOF 
;

// Rule operator
ruleoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignKeyword_1(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_2(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_4(), null); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5(), null); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getCircumflexAccentEqualsSignKeyword_6(), null); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_7(), null); 
    }

    |
	kw='like' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorAccess().getLikeKeyword_8(), null); 
    }
)
    ;





// Entry rule entryRuledateConstant
entryRuledateConstant returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateConstantRule(), currentNode); } 
	 iv_ruledateConstant=ruledateConstant 
	 { $current=$iv_ruledateConstant.current.getText(); }  
	 EOF 
;

// Rule dateConstant
ruledateConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='$now' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateConstantAccess().getNowKeyword_0(), null); 
    }

    |
	kw='$today' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateConstantAccess().getTodayKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuledateFunction
entryRuledateFunction returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateFunctionRule(), currentNode); } 
	 iv_ruledateFunction=ruledateFunction 
	 { $current=$iv_ruledateFunction.current.getText(); }  
	 EOF 
;

// Rule dateFunction
ruledateFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='date' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateFunctionAccess().getDateKeyword_0(), null); 
    }

	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_2(), currentNode); 
    }
    this_dateFunctionArgument_2=ruledateFunctionArgument    {
		$current.merge(this_dateFunctionArgument_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateFunctionAccess().getCommaKeyword_3_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_3_1(), currentNode); 
    }
    this_dateFunctionArgument_4=ruledateFunctionArgument    {
		$current.merge(this_dateFunctionArgument_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateFunctionAccess().getRightParenthesisKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuledateFunctionArgument
entryRuledateFunctionArgument returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateFunctionArgumentRule(), currentNode); } 
	 iv_ruledateFunctionArgument=ruledateFunctionArgument 
	 { $current=$iv_ruledateFunctionArgument.current.getText(); }  
	 EOF 
;

// Rule dateFunctionArgument
ruledateFunctionArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_0(), currentNode); 
    }
    this_dateFunctionArgumentMember_0=ruledateFunctionArgumentMember    {
		$current.merge(this_dateFunctionArgumentMember_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateFunctionArgumentAccess().getPlusSignKeyword_1_0_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDateFunctionArgumentAccess().getHyphenMinusKeyword_1_0_1(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_1_1(), currentNode); 
    }
    this_dateFunctionArgumentMember_3=ruledateFunctionArgumentMember    {
		$current.merge(this_dateFunctionArgumentMember_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRuledateFunctionArgumentMember
entryRuledateFunctionArgumentMember returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateFunctionArgumentMemberRule(), currentNode); } 
	 iv_ruledateFunctionArgumentMember=ruledateFunctionArgumentMember 
	 { $current=$iv_ruledateFunctionArgumentMember.current.getText(); }  
	 EOF 
;

// Rule dateFunctionArgumentMember
ruledateFunctionArgumentMember returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getDateFunctionArgumentMemberAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentMemberAccess().getDateConstantParserRuleCall_1(), currentNode); 
    }
    this_dateConstant_1=ruledateConstant    {
		$current.merge(this_dateConstant_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulerangeValidationRuleDeclaration
entryRulerangeValidationRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationRule(), currentNode); }
	 iv_rulerangeValidationRuleDeclaration=rulerangeValidationRuleDeclaration 
	 { $current=$iv_rulerangeValidationRuleDeclaration.current; } 
	 EOF 
;

// Rule rangeValidationRuleDeclaration
rulerangeValidationRuleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_name_0_1=	'range' 
    {
        createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameRangeKeyword_0_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_name_0_2=	'length' 
    {
        createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameLengthKeyword_0_0_1(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_args_1_0=rulefunctionArguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"args",
	        		lv_args_1_0, 
	        		"functionArguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeRangeParserRuleCall_3_0(), currentNode); 
	    }
		lv_range_3_0=rulerange		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"range",
	        		lv_range_3_0, 
	        		"range", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleregexValidationRuleDeclaration
entryRuleregexValidationRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationRule(), currentNode); }
	 iv_ruleregexValidationRuleDeclaration=ruleregexValidationRuleDeclaration 
	 { $current=$iv_ruleregexValidationRuleDeclaration.current; } 
	 EOF 
;

// Rule regexValidationRuleDeclaration
ruleregexValidationRuleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'matches' 
    {
        createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "matches", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_args_1_0=rulefunctionArguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"args",
	        		lv_args_1_0, 
	        		"functionArguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		lv_exp_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpSTRINGTerminalRuleCall_3_0(), "exp"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRulerange
entryRulerange returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRangeRule(), currentNode); }
	 iv_rulerange=rulerange 
	 { $current=$iv_rulerange.current; } 
	 EOF 
;

// Rule range
rulerange returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getFRangeBoundParserRuleCall_0_0(), currentNode); 
	    }
		lv_f_0_0=rulerangeBound		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"f",
	        		lv_f_0_0, 
	        		"rangeBound", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getTRangeBoundParserRuleCall_2_0(), currentNode); 
	    }
		lv_t_2_0=rulerangeBound		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"t",
	        		lv_t_2_0, 
	        		"rangeBound", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulerangeBound
entryRulerangeBound returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRangeBoundRule(), currentNode); } 
	 iv_rulerangeBound=rulerangeBound 
	 { $current=$iv_rulerangeBound.current.getText(); }  
	 EOF 
;

// Rule rangeBound
rulerangeBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getRangeBoundAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRangeBoundAccess().getQuestionMarkKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleuniquenessValidationRuleDeclaration
entryRuleuniquenessValidationRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUniquenessValidationRuleDeclarationRule(), currentNode); }
	 iv_ruleuniquenessValidationRuleDeclaration=ruleuniquenessValidationRuleDeclaration 
	 { $current=$iv_ruleuniquenessValidationRuleDeclaration.current; } 
	 EOF 
;

// Rule uniquenessValidationRuleDeclaration
ruleuniquenessValidationRuleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'unique' 
    {
        createLeafNode(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUniquenessValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "unique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_args_1_0=rulefunctionArguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUniquenessValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"args",
	        		lv_args_1_0, 
	        		"functionArguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleerrorMessage
entryRuleerrorMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getErrorMessageRule(), currentNode); }
	 iv_ruleerrorMessage=ruleerrorMessage 
	 { $current=$iv_ruleerrorMessage.current; } 
	 EOF 
;

// Rule errorMessage
ruleerrorMessage returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	':' 
    {
        createLeafNode(grammarAccess.getErrorMessageAccess().getColonKeyword_0(), null); 
    }
(
(
		lv_message_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getErrorMessageAccess().getMessageSTRINGTerminalRuleCall_1_0(), "message"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getErrorMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"message",
	        		lv_message_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulenativeValidationRuleDeclaration
entryRulenativeValidationRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNativeValidationRuleDeclarationRule(), currentNode); }
	 iv_rulenativeValidationRuleDeclaration=rulenativeValidationRuleDeclaration 
	 { $current=$iv_rulenativeValidationRuleDeclaration.current; } 
	 EOF 
;

// Rule nativeValidationRuleDeclaration
rulenativeValidationRuleDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationCrossReference_0_0(), "field"); 
	}

)
)	'.' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getFullStopKeyword_1(), null); 
    }
(
(
(
		lv_type_2_1=	'unique' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeUniqueKeyword_2_0_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_2_2=	'notNull' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotNullKeyword_2_0_1(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_2_3=	'NaN' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNaNKeyword_2_0_2(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_2_4=	'notEmpty' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotEmptyKeyword_2_0_3(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_2_5=	'notInt' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotIntKeyword_2_0_4(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_2_6=	'notReal' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotRealKeyword_2_0_5(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_type_2_7=	'notBoolean' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotBooleanKeyword_2_0_6(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)	'=' 
    {
        createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		lv_message_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageSTRINGTerminalRuleCall_4_0(), "message"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"message",
	        		lv_message_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDeclarationRule(), currentNode); }
	 iv_rulefunctionDeclaration=rulefunctionDeclaration 
	 { $current=$iv_rulefunctionDeclaration.current; } 
	 EOF 
;

// Rule functionDeclaration
rulefunctionDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_b_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionDeclarationAccess().getBIDTerminalRuleCall_0_0_0(), "b"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"b",
	        		lv_b_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'%' 
    {
        createLeafNode(grammarAccess.getFunctionDeclarationAccess().getPercentSignKeyword_0_1(), null); 
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getArgFunctionArgumentDeclarationParserRuleCall_2_0(), currentNode); 
	    }
		lv_arg_3_0=rulefunctionArgumentDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arg",
	        		lv_arg_3_0, 
	        		"functionArgumentDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyFunctionBodyParserRuleCall_3_0(), currentNode); 
	    }
		lv_body_4_0=rulefunctionBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_4_0, 
	        		"functionBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getMErrorMessageParserRuleCall_4_0(), currentNode); 
	    }
		lv_m_5_0=ruleerrorMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"m",
	        		lv_m_5_0, 
	        		"errorMessage", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulefunctionArgumentDeclaration
entryRulefunctionArgumentDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionArgumentDeclarationRule(), currentNode); }
	 iv_rulefunctionArgumentDeclaration=rulefunctionArgumentDeclaration 
	 { $current=$iv_rulefunctionArgumentDeclaration.current; } 
	 EOF 
;

// Rule functionArgumentDeclaration
rulefunctionArgumentDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_2_0(), currentNode); 
	    }
		lv_f_2_0=rulefunctionArgumentBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionArgumentDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"f",
	        		lv_f_2_0, 
	        		"functionArgumentBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_f_4_0=rulefunctionArgumentBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionArgumentDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"f",
	        		lv_f_4_0, 
	        		"functionArgumentBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRulefunctionArgumentBody
entryRulefunctionArgumentBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionArgumentBodyRule(), currentNode); }
	 iv_rulefunctionArgumentBody=rulefunctionArgumentBody 
	 { $current=$iv_rulefunctionArgumentBody.current; } 
	 EOF 
;

// Rule functionArgumentBody
rulefunctionArgumentBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharTypeParserRuleCall_0_0(), currentNode); 
    }
    this_charType_0=rulecharType
    { 
        $current = $this_charType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_1(), currentNode); 
    }
    this_intEnum_1=ruleintEnum
    { 
        $current = $this_intEnum_1.current; 
        currentNode = currentNode.getParent();
    }

    |(	'set' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_2_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_2_1(), currentNode); 
    }
    this_intEnum_3=ruleintEnum
    { 
        $current = $this_intEnum_3.current; 
        currentNode = currentNode.getParent();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_3(), currentNode); 
    }
    this_charEnum_4=rulecharEnum
    { 
        $current = $this_charEnum_4.current; 
        currentNode = currentNode.getParent();
    }

    |(	'set' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_4_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_4_1(), currentNode); 
    }
    this_charEnum_6=rulecharEnum
    { 
        $current = $this_charEnum_6.current; 
        currentNode = currentNode.getParent();
    }
)
    |	'int' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getIntKeyword_0_5(), null); 
    }

    |	'real' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getRealKeyword_0_6(), null); 
    }

    |	'boolean' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getBooleanKeyword_0_7(), null); 
    }

    |	'text' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getTextKeyword_0_8(), null); 
    }

    |	'binary' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getBinaryKeyword_0_9(), null); 
    }

    |	'file' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getFileKeyword_0_10(), null); 
    }

    |	'date' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getDateKeyword_0_11(), null); 
    }

    |(	'ptr' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getPtrKeyword_0_12_0(), null); 
    }
ruletype)
    |(	'set' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_13_0(), null); 
    }
ruletype))(
(
(
		lv_name_18_1=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionArgumentBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_18_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getNameKeywordParserRuleCall_1_0_1(), currentNode); 
	    }
		lv_name_18_2=rulekeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionArgumentBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_18_2, 
	        		"keyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRulefunctionCall
entryRulefunctionCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionCallRule(), currentNode); }
	 iv_rulefunctionCall=rulefunctionCall 
	 { $current=$iv_rulefunctionCall.current; } 
	 EOF 
;

// Rule functionCall
rulefunctionCall returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getFFunctionArgumentsParserRuleCall_1_0(), currentNode); 
	    }
		lv_f_1_0=rulefunctionArguments		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"f",
	        		lv_f_1_0, 
	        		"functionArguments", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulefunctionArguments
entryRulefunctionArguments returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionArgumentsRule(), currentNode); }
	 iv_rulefunctionArguments=rulefunctionArguments 
	 { $current=$iv_rulefunctionArguments.current; } 
	 EOF 
;

// Rule functionArguments
rulefunctionArguments returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentsAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_a_2_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionArgumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_2_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_a_4_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionArgumentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_4_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getFunctionArgumentsAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRulefunctionBody
entryRulefunctionBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionBodyRule(), currentNode); }
	 iv_rulefunctionBody=rulefunctionBody 
	 { $current=$iv_rulefunctionBody.current; } 
	 EOF 
;

// Rule functionBody
rulefunctionBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_s_1_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_1_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getEExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_e_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_2_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	'}' 
    {
        createLeafNode(grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getQueryRuleParserRuleCall(), currentNode); 
    }
    this_queryRule_0=rulequeryRule
    { 
        $current = $this_queryRule_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleunionRule
entryRuleunionRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnionRuleRule(), currentNode); }
	 iv_ruleunionRule=ruleunionRule 
	 { $current=$iv_ruleunionRule.current; } 
	 EOF 
;

// Rule unionRule
ruleunionRule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_0_0(), currentNode); 
	    }
		lv_q_0_0=rulequeryRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"q",
	        		lv_q_0_0, 
	        		"queryRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'union' 
    {
        createLeafNode(grammarAccess.getUnionRuleAccess().getUnionKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_q_2_0=rulequeryRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"q",
	        		lv_q_2_0, 
	        		"queryRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulequeryRule
entryRulequeryRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQueryRuleRule(), currentNode); }
	 iv_rulequeryRule=rulequeryRule 
	 { $current=$iv_rulequeryRule.current; } 
	 EOF 
;

// Rule queryRule
rulequeryRule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getSelectFromParserRuleCall_0(), currentNode); 
    }
    this_selectFrom_0=ruleselectFrom
    { 
        $current = $this_selectFrom_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getWhereWhereClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_where_1_0=rulewhereClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"where",
	        		lv_where_1_0, 
	        		"whereClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getGroupByGroupByClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_groupBy_2_0=rulegroupByClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groupBy",
	        		lv_groupBy_2_0, 
	        		"groupByClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getOrderByOrderByClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_orderBy_3_0=ruleorderByClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"orderBy",
	        		lv_orderBy_3_0, 
	        		"orderByClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleselectFrom
entryRuleselectFrom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectFromRule(), currentNode); }
	 iv_ruleselectFrom=ruleselectFrom 
	 { $current=$iv_ruleselectFrom.current; } 
	 EOF 
;

// Rule selectFrom
ruleselectFrom returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSelectFromAccess().getSelectFromAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSelectFromAccess().getSelectFromAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectFromAccess().getSSelectClauseParserRuleCall_1_0(), currentNode); 
	    }
		lv_s_1_0=ruleselectClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectFromRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_1_0, 
	        		"selectClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectFromAccess().getFromFromClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_from_2_0=rulefromClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectFromRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"from",
	        		lv_from_2_0, 
	        		"fromClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleselectClause
entryRuleselectClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectClauseRule(), currentNode); }
	 iv_ruleselectClause=ruleselectClause 
	 { $current=$iv_ruleselectClause.current; } 
	 EOF 
;

// Rule selectClause
ruleselectClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSelectClauseAccess().getSelectCauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSelectClauseAccess().getSelectCauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)ruleSELECT(ruleDISTINCT)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getSSelectedPropertiesListParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_s_3_0=ruleselectedPropertiesList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_3_0, 
	        		"selectedPropertiesList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getNNewExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_n_4_0=rulenewExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"n",
	        		lv_n_4_0, 
	        		"newExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |ruleselectObject))
;





// Entry rule entryRulenewExpression
entryRulenewExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNewExpressionRule(), currentNode); }
	 iv_rulenewExpression=rulenewExpression 
	 { $current=$iv_rulenewExpression.current; } 
	 EOF 
;

// Rule newExpression
rulenewExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleNEW(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNewExpressionAccess().getPPathParserRuleCall_1_0(), currentNode); 
	    }
		lv_p_1_0=rulepath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNewExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"p",
	        		lv_p_1_0, 
	        		"path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getNewExpressionAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNewExpressionAccess().getSSelectedPropertiesListParserRuleCall_3_0(), currentNode); 
	    }
		lv_s_3_0=ruleselectedPropertiesList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNewExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_3_0, 
	        		"selectedPropertiesList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNewExpressionAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleselectObject
entryRuleselectObject returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectObjectRule(), currentNode); } 
	 iv_ruleselectObject=ruleselectObject 
	 { $current=$iv_ruleselectObject.current.getText(); }  
	 EOF 
;

// Rule selectObject
ruleselectObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSelectObjectAccess().getOBJECTParserRuleCall_0(), currentNode); 
    }
    this_OBJECT_0=ruleOBJECT    {
		$current.merge(this_OBJECT_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSelectObjectAccess().getLeftParenthesisKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getSelectObjectAccess().getIdentifierParserRuleCall_2(), currentNode); 
    }
    this_identifier_2=ruleidentifier    {
		$current.merge(this_identifier_2);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSelectObjectAccess().getRightParenthesisKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRulefromClause
entryRulefromClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromClauseRule(), currentNode); }
	 iv_rulefromClause=rulefromClause 
	 { $current=$iv_rulefromClause.current; } 
	 EOF 
;

// Rule fromClause
rulefromClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleFROM(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_1_0(), currentNode); 
	    }
		lv_fromRange_1_0=rulefromRange		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromRange",
	        		lv_fromRange_1_0, 
	        		"fromRange", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromJoinFromJoinParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_fromJoin_2_0=rulefromJoin		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromJoin",
	        		lv_fromJoin_2_0, 
	        		"fromJoin", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	',' 
    {
        createLeafNode(grammarAccess.getFromClauseAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_fromRange_4_0=rulefromRange		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fromRange",
	        		lv_fromRange_4_0, 
	        		"fromRange", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRulefromJoin
entryRulefromJoin returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromJoinRule(), currentNode); }
	 iv_rulefromJoin=rulefromJoin 
	 { $current=$iv_rulefromJoin.current; } 
	 EOF 
;

// Rule fromJoin
rulefromJoin returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((ruleLEFT
    |ruleRIGHT)(ruleOUTER)?)
    |ruleFULL
    |ruleINNER)?ruleJOIN(ruleFETCH)?
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getFromClassOrOuterQueryPathParserRuleCall_3(), currentNode); 
    }
    this_fromClassOrOuterQueryPath_7=rulefromClassOrOuterQueryPath
    { 
        $current = $this_fromClassOrOuterQueryPath_7.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getWWithClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_w_8_0=rulewithClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"w",
	        		lv_w_8_0, 
	        		"withClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulewithClause
entryRulewithClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWithClauseRule(), currentNode); }
	 iv_rulewithClause=rulewithClause 
	 { $current=$iv_rulewithClause.current; } 
	 EOF 
;

// Rule withClause
rulewithClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleWITH(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_e_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulefromRange
entryRulefromRange returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromRangeRule(), currentNode); }
	 iv_rulefromRange=rulefromRange 
	 { $current=$iv_rulefromRange.current; } 
	 EOF 
;

// Rule fromRange
rulefromRange returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getFromClassOrOuterQueryPathParserRuleCall_0(), currentNode); 
    }
    this_fromClassOrOuterQueryPath_0=rulefromClassOrOuterQueryPath
    { 
        $current = $this_fromClassOrOuterQueryPath_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_alias_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_1_0, 
	        		"identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)ruleIN_CLASS(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_p_3_0=rulepath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"p",
	        		lv_p_3_0, 
	        		"path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(ruleIN	'(' 
    {
        createLeafNode(grammarAccess.getFromRangeAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_p_6_0=rulepath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"p",
	        		lv_p_6_0, 
	        		"path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getFromRangeAccess().getRightParenthesisKeyword_2_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_alias_8_0=ruleidentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_8_0, 
	        		"identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getInCollectionElementsDeclarationParserRuleCall_3(), currentNode); 
    }
    this_inCollectionElementsDeclaration_9=ruleinCollectionElementsDeclaration
    { 
        $current = $this_inCollectionElementsDeclaration_9.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulefromClassOrOuterQueryPath
entryRulefromClassOrOuterQueryPath returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathRule(), currentNode); }
	 iv_rulefromClassOrOuterQueryPath=rulefromClassOrOuterQueryPath 
	 { $current=$iv_rulefromClassOrOuterQueryPath.current; } 
	 EOF 
;

// Rule fromClassOrOuterQueryPath
rulefromClassOrOuterQueryPath returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)rulepath(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getAsAliasAsAliasParserRuleCall_2_0(), currentNode); 
	    }
		lv_asAlias_2_0=ruleasAlias		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"asAlias",
	        		lv_asAlias_2_0, 
	        		"asAlias", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchPropertyFetchParserRuleCall_3_0(), currentNode); 
	    }
		lv_propertyFetch_3_0=rulepropertyFetch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"propertyFetch",
	        		lv_propertyFetch_3_0, 
	        		"propertyFetch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleinCollectionElementsDeclaration
entryRuleinCollectionElementsDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInCollectionElementsDeclarationRule(), currentNode); }
	 iv_ruleinCollectionElementsDeclaration=ruleinCollectionElementsDeclaration 
	 { $current=$iv_ruleinCollectionElementsDeclaration.current; } 
	 EOF 
;

// Rule inCollectionElementsDeclaration
ruleinCollectionElementsDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_alias_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInCollectionElementsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_0_0, 
	        		"identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)ruleIN_ELEMENTS	'(' 
    {
        createLeafNode(grammarAccess.getInCollectionElementsDeclarationAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInCollectionElementsDeclarationAccess().getPPathParserRuleCall_3_0(), currentNode); 
	    }
		lv_p_3_0=rulepath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInCollectionElementsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"p",
	        		lv_p_3_0, 
	        		"path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getInCollectionElementsDeclarationAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleasAlias
entryRuleasAlias returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAsAliasRule(), currentNode); }
	 iv_ruleasAlias=ruleasAlias 
	 { $current=$iv_ruleasAlias.current; } 
	 EOF 
;

// Rule asAlias
ruleasAlias returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleAS)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAsAliasAccess().getAliasIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_alias_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAsAliasRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_1_0, 
	        		"identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulepropertyFetch
entryRulepropertyFetch returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyFetchRule(), currentNode); } 
	 iv_rulepropertyFetch=rulepropertyFetch 
	 { $current=$iv_rulepropertyFetch.current.getText(); }  
	 EOF 
;

// Rule propertyFetch
rulepropertyFetch returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getFETCHParserRuleCall_0(), currentNode); 
    }
    this_FETCH_0=ruleFETCH    {
		$current.merge(this_FETCH_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getALLParserRuleCall_1(), currentNode); 
    }
    this_ALL_1=ruleALL    {
		$current.merge(this_ALL_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getPROPERTIESParserRuleCall_2(), currentNode); 
    }
    this_PROPERTIES_2=rulePROPERTIES    {
		$current.merge(this_PROPERTIES_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulegroupByClause
entryRulegroupByClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupByClauseRule(), currentNode); }
	 iv_rulegroupByClause=rulegroupByClause 
	 { $current=$iv_rulegroupByClause.current; } 
	 EOF 
;

// Rule groupByClause
rulegroupByClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleGROUP_BY(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_e_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getGroupByClauseAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_e_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_3_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getHHavingClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_h_4_0=rulehavingClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"h",
	        		lv_h_4_0, 
	        		"havingClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleorderByClause
entryRuleorderByClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrderByClauseRule(), currentNode); }
	 iv_ruleorderByClause=ruleorderByClause 
	 { $current=$iv_ruleorderByClause.current; } 
	 EOF 
;

// Rule orderByClause
ruleorderByClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleORDER_BY(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_o_1_0=ruleorderElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderByClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"o",
	        		lv_o_1_0, 
	        		"orderElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOrderByClauseAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_o_3_0=ruleorderElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrderByClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"o",
	        		lv_o_3_0, 
	        		"orderElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleorderElement
entryRuleorderElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrderElementRule(), currentNode); }
	 iv_ruleorderElement=ruleorderElement 
	 { $current=$iv_ruleorderElement.current; } 
	 EOF 
;

// Rule orderElement
ruleorderElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrderElementAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        currentNode = currentNode.getParent();
    }
(ruleascendingOrDescending)?)
;





// Entry rule entryRuleascendingOrDescending
entryRuleascendingOrDescending returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAscendingOrDescendingRule(), currentNode); } 
	 iv_ruleascendingOrDescending=ruleascendingOrDescending 
	 { $current=$iv_ruleascendingOrDescending.current.getText(); }  
	 EOF 
;

// Rule ascendingOrDescending
ruleascendingOrDescending returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAscendingOrDescendingAccess().getASCParserRuleCall_0(), currentNode); 
    }
    this_ASC_0=ruleASC    {
		$current.merge(this_ASC_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAscendingOrDescendingAccess().getDESCParserRuleCall_1(), currentNode); 
    }
    this_DESC_1=ruleDESC    {
		$current.merge(this_DESC_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulehavingClause
entryRulehavingClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHavingClauseRule(), currentNode); }
	 iv_rulehavingClause=rulehavingClause 
	 { $current=$iv_rulehavingClause.current; } 
	 EOF 
;

// Rule havingClause
rulehavingClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleHAVING(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHavingClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_e_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHavingClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulewhereClause
entryRulewhereClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhereClauseRule(), currentNode); }
	 iv_rulewhereClause=rulewhereClause 
	 { $current=$iv_rulewhereClause.current; } 
	 EOF 
;

// Rule whereClause
rulewhereClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleWHERE(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhereClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_e_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhereClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleselectedPropertiesList
entryRuleselectedPropertiesList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectedPropertiesListRule(), currentNode); }
	 iv_ruleselectedPropertiesList=ruleselectedPropertiesList 
	 { $current=$iv_ruleselectedPropertiesList.current; } 
	 EOF 
;

// Rule selectedPropertiesList
ruleselectedPropertiesList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_a_0_0=rulealiasedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectedPropertiesListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_0_0, 
	        		"aliasedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSelectedPropertiesListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_a_2_0=rulealiasedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectedPropertiesListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_2_0, 
	        		"aliasedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulealiasedExpression
entryRulealiasedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAliasedExpressionRule(), currentNode); }
	 iv_rulealiasedExpression=rulealiasedExpression 
	 { $current=$iv_rulealiasedExpression.current; } 
	 EOF 
;

// Rule aliasedExpression
rulealiasedExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAliasedExpressionAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        currentNode = currentNode.getParent();
    }
(ruleAS(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAliasedExpressionAccess().getIdIdentifierParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_id_2_0=ruleidentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAliasedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_2_0, 
	        		"identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall(), currentNode); 
    }
    this_logicalOrExpression_0=rulelogicalOrExpression
    { 
        $current = $this_logicalOrExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRulelogicalOrExpression
entryRulelogicalOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogicalOrExpressionRule(), currentNode); }
	 iv_rulelogicalOrExpression=rulelogicalOrExpression 
	 { $current=$iv_rulelogicalOrExpression.current; } 
	 EOF 
;

// Rule logicalOrExpression
rulelogicalOrExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_l_0_0=rulelogicalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"l",
	        		lv_l_0_0, 
	        		"logicalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(ruleOR(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_l_2_0=rulelogicalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"l",
	        		lv_l_2_0, 
	        		"logicalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulelogicalAndExpression
entryRulelogicalAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogicalAndExpressionRule(), currentNode); }
	 iv_rulelogicalAndExpression=rulelogicalAndExpression 
	 { $current=$iv_rulelogicalAndExpression.current; } 
	 EOF 
;

// Rule logicalAndExpression
rulelogicalAndExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_n_0_0=rulenegatedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"n",
	        		lv_n_0_0, 
	        		"negatedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(ruleAND(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_n_2_0=rulenegatedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"n",
	        		lv_n_2_0, 
	        		"negatedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulenegatedExpression
entryRulenegatedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNegatedExpressionRule(), currentNode); }
	 iv_rulenegatedExpression=rulenegatedExpression 
	 { $current=$iv_rulenegatedExpression.current; } 
	 EOF 
;

// Rule negatedExpression
rulenegatedExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleNOT(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNegatedExpressionAccess().getNNegatedExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_n_1_0=rulenegatedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNegatedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"n",
	        		lv_n_1_0, 
	        		"negatedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNegatedExpressionAccess().getEqualityExpressionParserRuleCall_1(), currentNode); 
    }
    this_equalityExpression_2=ruleequalityExpression
    { 
        $current = $this_equalityExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleequalityExpression
entryRuleequalityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleequalityExpression=ruleequalityExpression 
	 { $current=$iv_ruleequalityExpression.current; } 
	 EOF 
;

// Rule equalityExpression
ruleequalityExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_r_0_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"r",
	        		lv_r_0_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getEqualsSignKeyword_1_0_0(), null); 
    }

    |(ruleIS(ruleNOT)?)
    |	'!=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_2(), null); 
    }

    |	'<>' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_0_3(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_r_6_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"r",
	        		lv_r_6_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getConcatenationParserRuleCall_0(), currentNode); 
    }
    this_concatenation_0=ruleconcatenation
    { 
        $current = $this_concatenation_0.current; 
        currentNode = currentNode.getParent();
    }
(((	'<' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0_0(), null); 
    }

    |	'>' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_0_1(), null); 
    }

    |	'<=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_0_2(), null); 
    }

    |	'>=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_3(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_a_5_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_5_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
    |((ruleNOT)?((ruleIN(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getICompoundExprParserRuleCall_1_1_1_0_1_0(), currentNode); 
	    }
		lv_i_8_0=rulecompoundExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"i",
	        		lv_i_8_0, 
	        		"compoundExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(ruleBETWEEN(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getBBetweenListParserRuleCall_1_1_1_1_1_0(), currentNode); 
	    }
		lv_b_10_0=rulebetweenList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"b",
	        		lv_b_10_0, 
	        		"betweenList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(ruleLIKE(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getCConcatenationParserRuleCall_1_1_1_2_1_0(), currentNode); 
	    }
		lv_c_12_0=ruleconcatenation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"c",
	        		lv_c_12_0, 
	        		"concatenation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getLLikeEscapeParserRuleCall_1_1_1_2_2_0(), currentNode); 
	    }
		lv_l_13_0=rulelikeEscape		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"l",
	        		lv_l_13_0, 
	        		"likeEscape", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(ruleMEMBER(ruleOF)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getPPathParserRuleCall_1_1_1_3_2_0(), currentNode); 
	    }
		lv_p_16_0=rulepath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"p",
	        		lv_p_16_0, 
	        		"path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))))
;





// Entry rule entryRulelikeEscape
entryRulelikeEscape returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLikeEscapeRule(), currentNode); }
	 iv_rulelikeEscape=rulelikeEscape 
	 { $current=$iv_rulelikeEscape.current; } 
	 EOF 
;

// Rule likeEscape
rulelikeEscape returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(ruleESCAPE(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLikeEscapeAccess().getCConcatenationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_c_2_0=ruleconcatenation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLikeEscapeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"c",
	        		lv_c_2_0, 
	        		"concatenation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulebetweenList
entryRulebetweenList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBetweenListRule(), currentNode); }
	 iv_rulebetweenList=rulebetweenList 
	 { $current=$iv_rulebetweenList.current; } 
	 EOF 
;

// Rule betweenList
rulebetweenList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_0_0(), currentNode); 
	    }
		lv_c_0_0=ruleconcatenation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBetweenListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"c",
	        		lv_c_0_0, 
	        		"concatenation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)ruleAND(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_2_0(), currentNode); 
	    }
		lv_c_2_0=ruleconcatenation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBetweenListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"c",
	        		lv_c_2_0, 
	        		"concatenation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleconcatenation
entryRuleconcatenation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcatenationRule(), currentNode); }
	 iv_ruleconcatenation=ruleconcatenation 
	 { $current=$iv_ruleconcatenation.current; } 
	 EOF 
;

// Rule concatenation
ruleconcatenation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
    }
    this_additiveExpression_0=ruleadditiveExpression
    { 
        $current = $this_additiveExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(	'||' 
    {
        createLeafNode(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_a_2_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcatenationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_2_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'||' 
    {
        createLeafNode(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_a_4_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcatenationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_4_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?)
;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_m_0_0=rulemultiplyExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"m",
	        		lv_m_0_0, 
	        		"multiplyExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0(), null); 
    }

    |	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_m_3_0=rulemultiplyExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"m",
	        		lv_m_3_0, 
	        		"multiplyExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulemultiplyExpression
entryRulemultiplyExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplyExpressionRule(), currentNode); }
	 iv_rulemultiplyExpression=rulemultiplyExpression 
	 { $current=$iv_rulemultiplyExpression.current; } 
	 EOF 
;

// Rule multiplyExpression
rulemultiplyExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_u_0_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplyExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"u",
	        		lv_u_0_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'*' 
    {
        createLeafNode(grammarAccess.getMultiplyExpressionAccess().getAsteriskKeyword_1_0_0(), null); 
    }

    |	'/' 
    {
        createLeafNode(grammarAccess.getMultiplyExpressionAccess().getSolidusKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_u_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplyExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"u",
	        		lv_u_3_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_u_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"u",
	        		lv_u_1_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'+' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_u_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"u",
	        		lv_u_3_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getCaseExpressionParserRuleCall_2(), currentNode); 
    }
    this_caseExpression_4=rulecaseExpression
    { 
        $current = $this_caseExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getQuantifiedExpressionParserRuleCall_3(), currentNode); 
    }
    this_quantifiedExpression_5=rulequantifiedExpression
    { 
        $current = $this_quantifiedExpression_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getAtomParserRuleCall_4(), currentNode); 
    }
    this_atom_6=ruleatom
    { 
        $current = $this_atom_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulecaseExpression
entryRulecaseExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseExpressionRule(), currentNode); }
	 iv_rulecaseExpression=rulecaseExpression 
	 { $current=$iv_rulecaseExpression.current; } 
	 EOF 
;

// Rule caseExpression
rulecaseExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleCASE(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_w_1_0=rulewhenClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"w",
	        		lv_w_1_0, 
	        		"whenClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_e_2_0=ruleelseClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_2_0, 
	        		"elseClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?ruleEND)
    |(ruleCASE(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_u_5_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"u",
	        		lv_u_5_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getAAltWhenClauseParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_a_6_0=rulealtWhenClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a",
	        		lv_a_6_0, 
	        		"altWhenClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_e_7_0=ruleelseClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_7_0, 
	        		"elseClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?ruleEND))
;





// Entry rule entryRulewhenClause
entryRulewhenClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhenClauseRule(), currentNode); }
	 iv_rulewhenClause=rulewhenClause 
	 { $current=$iv_rulewhenClause.current; } 
	 EOF 
;

// Rule whenClause
rulewhenClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleWHEN(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhenClauseAccess().getWhenExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_whenExpr_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhenClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whenExpr",
	        		lv_whenExpr_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)ruleTHEN(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhenClauseAccess().getThenExprUnaryExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenExpr_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhenClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpr",
	        		lv_thenExpr_3_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulealtWhenClause
entryRulealtWhenClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAltWhenClauseRule(), currentNode); }
	 iv_rulealtWhenClause=rulealtWhenClause 
	 { $current=$iv_rulealtWhenClause.current; } 
	 EOF 
;

// Rule altWhenClause
rulealtWhenClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleWHEN(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAltWhenClauseAccess().getWUnaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_w_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAltWhenClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"w",
	        		lv_w_1_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)ruleTHEN(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAltWhenClauseAccess().getTUnaryExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_t_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAltWhenClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"t",
	        		lv_t_3_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleelseClause
entryRuleelseClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElseClauseRule(), currentNode); }
	 iv_ruleelseClause=ruleelseClause 
	 { $current=$iv_ruleelseClause.current; } 
	 EOF 
;

// Rule elseClause
ruleelseClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleELSE(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElseClauseAccess().getUUnaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_u_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"u",
	        		lv_u_1_0, 
	        		"unaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulequantifiedExpression
entryRulequantifiedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQuantifiedExpressionRule(), currentNode); }
	 iv_rulequantifiedExpression=rulequantifiedExpression 
	 { $current=$iv_rulequantifiedExpression.current; } 
	 EOF 
;

// Rule quantifiedExpression
rulequantifiedExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(ruleSOME
    |ruleEXISTS
    |ruleALL
    |ruleANY)(ruleidentifier
    |rulecollectionExpr
    |(	'(' 
    {
        createLeafNode(grammarAccess.getQuantifiedExpressionAccess().getLeftParenthesisKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getSUnionRuleParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_s_8_0=ruleunionRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantifiedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_8_0, 
	        		"unionRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getQuantifiedExpressionAccess().getRightParenthesisKeyword_2_2_2(), null); 
    }
)))
;





// Entry rule entryRuleatom
entryRuleatom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleatom=ruleatom 
	 { $current=$iv_ruleatom.current; } 
	 EOF 
;

// Rule atom
ruleatom returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_primaryExpression_0=ruleprimaryExpression
    { 
        $current = $this_primaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((	'.' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getFullStopKeyword_1_0_0(), null); 
    }
ruleidentifier(	'(' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getEExprListParserRuleCall_1_0_2_1_0(), currentNode); 
	    }
		lv_e_4_0=ruleexprList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_4_0, 
	        		"exprList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_0_2_2(), null); 
    }
)?)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExpExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_exp_7_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_7_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_1_1_2(), null); 
    }
))*)
;





// Entry rule entryRuleprimaryExpression
entryRuleprimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_ruleprimaryExpression=ruleprimaryExpression 
	 { $current=$iv_ruleprimaryExpression.current; } 
	 EOF 
;

// Rule primaryExpression
ruleprimaryExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentIdentPrimaryParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_ident_1_0=ruleidentPrimary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ident",
	        		lv_ident_1_0, 
	        		"identPrimary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_2_0(), null); 
    }
ruleCLASS)?)
    |ruleconstant
    |(	':' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getColonKeyword_2_0(), null); 
    }
ruleidentifier)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionOrVectorParserRuleCall_3_1_0(), currentNode); 
    }
    this_expressionOrVector_8=ruleexpressionOrVector
    { 
        $current = $this_expressionOrVector_8.current; 
        currentNode = currentNode.getParent();
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSUnionRuleParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_s_9_0=ruleunionRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_9_0, 
	        		"unionRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)
    |(	'?' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getQuestionMarkKeyword_4_0(), null); 
    }
(RULE_INT
    { 
    createLeafNode(grammarAccess.getPrimaryExpressionAccess().getINTTerminalRuleCall_4_1(), null); 
    }
)?))
;





// Entry rule entryRuleexpressionOrVector
entryRuleexpressionOrVector returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionOrVectorRule(), currentNode); }
	 iv_ruleexpressionOrVector=ruleexpressionOrVector 
	 { $current=$iv_ruleexpressionOrVector.current; } 
	 EOF 
;

// Rule expressionOrVector
ruleexpressionOrVector returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionOrVectorAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionOrVectorAccess().getVVectorExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_v_1_0=rulevectorExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionOrVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"v",
	        		lv_v_1_0, 
	        		"vectorExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulevectorExpr
entryRulevectorExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVectorExprRule(), currentNode); }
	 iv_rulevectorExpr=rulevectorExpr 
	 { $current=$iv_rulevectorExpr.current; } 
	 EOF 
;

// Rule vectorExpr
rulevectorExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	',' 
    {
        createLeafNode(grammarAccess.getVectorExprAccess().getCommaKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_e_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_1_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getVectorExprAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_e_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVectorExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_3_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleidentPrimary
entryRuleidentPrimary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentPrimaryRule(), currentNode); }
	 iv_ruleidentPrimary=ruleidentPrimary 
	 { $current=$iv_ruleidentPrimary.current; } 
	 EOF 
;

// Rule identPrimary
ruleidentPrimary returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)ruleidentifier((	'.' 
    {
        createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_0_0(), null); 
    }
ruleidentifier)
    |(	'.' 
    {
        createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_1_0(), null); 
    }
ruleELEMENTS)
    |(	'.' 
    {
        createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_2_0(), null); 
    }
ruleOBJECT))*(	'(' 
    {
        createLeafNode(grammarAccess.getIdentPrimaryAccess().getLeftParenthesisKeyword_0_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIdentPrimaryAccess().getEExprListParserRuleCall_0_3_1_0(), currentNode); 
	    }
		lv_e_9_0=ruleexprList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIdentPrimaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"e",
	        		lv_e_9_0, 
	        		"exprList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getIdentPrimaryAccess().getRightParenthesisKeyword_0_3_2(), null); 
    }
)?)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentPrimaryAccess().getAggregateParserRuleCall_1(), currentNode); 
    }
    this_aggregate_11=ruleaggregate
    { 
        $current = $this_aggregate_11.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleaggregate
entryRuleaggregate returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAggregateRule(), currentNode); }
	 iv_ruleaggregate=ruleaggregate 
	 { $current=$iv_ruleaggregate.current; } 
	 EOF 
;

// Rule aggregate
ruleaggregate returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAggregateAccess().getAggregateAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAggregateAccess().getAggregateAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(ruleSUM
    |ruleAVG
    |ruleMAX
    |ruleMIN)	'(' 
    {
        createLeafNode(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAggregateAccess().getAAdditiveExpressionParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_a_6_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAggregateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_6_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_0_4(), null); 
    }
)
    |(ruleCOUNT	'(' 
    {
        createLeafNode(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(	'*' 
    {
        createLeafNode(grammarAccess.getAggregateAccess().getAsteriskKeyword_1_2_0(), null); 
    }

    |((ruleDISTINCT
    |ruleALL)?(rulepath
    |rulecollectionExpr)))	')' 
    {
        createLeafNode(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)
    |rulecollectionExpr)
;





// Entry rule entryRulecollectionExpr
entryRulecollectionExpr returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionExprRule(), currentNode); } 
	 iv_rulecollectionExpr=rulecollectionExpr 
	 { $current=$iv_rulecollectionExpr.current.getText(); }  
	 EOF 
;

// Rule collectionExpr
rulecollectionExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getELEMENTSParserRuleCall_0_0(), currentNode); 
    }
    this_ELEMENTS_0=ruleELEMENTS    {
		$current.merge(this_ELEMENTS_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getINDICESParserRuleCall_0_1(), currentNode); 
    }
    this_INDICES_1=ruleINDICES    {
		$current.merge(this_INDICES_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionExprAccess().getLeftParenthesisKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getPathParserRuleCall_2(), currentNode); 
    }
    this_path_3=rulepath    {
		$current.merge(this_path_3);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionExprAccess().getRightParenthesisKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRulecompoundExpr
entryRulecompoundExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundExprRule(), currentNode); }
	 iv_rulecompoundExpr=rulecompoundExpr 
	 { $current=$iv_rulecompoundExpr.current; } 
	 EOF 
;

// Rule compoundExpr
rulecompoundExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(rulecollectionExpr
    |rulepath
    |(	'(' 
    {
        createLeafNode(grammarAccess.getCompoundExprAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0(), currentNode); 
	    }
		lv_e_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_3_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCompoundExprAccess().getCommaKeyword_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0(), currentNode); 
	    }
		lv_e_5_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_5_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getSUnionRuleParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_s_6_0=ruleunionRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_6_0, 
	        		"unionRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	')' 
    {
        createLeafNode(grammarAccess.getCompoundExprAccess().getRightParenthesisKeyword_2_2(), null); 
    }
))
;





// Entry rule entryRuleexprList
entryRuleexprList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExprListRule(), currentNode); }
	 iv_ruleexprList=ruleexprList 
	 { $current=$iv_ruleexprList.current; } 
	 EOF 
;

// Rule exprList
ruleexprList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleTRAILING
    |ruleLEADING
    |ruleBOTH)?(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0(), currentNode); 
	    }
		lv_e_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_3_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getExprListAccess().getCommaKeyword_1_0_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0(), currentNode); 
	    }
		lv_e_5_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_5_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+
    |(ruleFROM(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0(), currentNode); 
	    }
		lv_e_7_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_7_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(ruleAS(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0(), currentNode); 
	    }
		lv_id_9_0=ruleidentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_9_0, 
	        		"identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
    |(ruleFROM(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_e_11_0=ruleexpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"e",
	        		lv_e_11_0, 
	        		"expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleconstant
entryRuleconstant returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); } 
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current.getText(); }  
	 EOF 
;

// Rule constant
ruleconstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0(), currentNode); 
    }
    this_number_0=rulenumber    {
		$current.merge(this_number_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    createLeafNode(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getNULLParserRuleCall_2(), currentNode); 
    }
    this_NULL_2=ruleNULL    {
		$current.merge(this_NULL_2);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getTRUEParserRuleCall_3(), currentNode); 
    }
    this_TRUE_3=ruleTRUE    {
		$current.merge(this_TRUE_3);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getFALSEParserRuleCall_4(), currentNode); 
    }
    this_FALSE_4=ruleFALSE    {
		$current.merge(this_FALSE_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getEMPTYParserRuleCall_5(), currentNode); 
    }
    this_EMPTY_5=ruleEMPTY    {
		$current.merge(this_EMPTY_5);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulepath
entryRulepath returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); } 
	 iv_rulepath=rulepath 
	 { $current=$iv_rulepath.current.getText(); }  
	 EOF 
;

// Rule path
rulepath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getIdentifierParserRuleCall_0(), currentNode); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getFullStopKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getIdentifierParserRuleCall_1_1(), currentNode); 
    }
    this_identifier_2=ruleidentifier    {
		$current.merge(this_identifier_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRuleidentifier
entryRuleidentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); } 
	 iv_ruleidentifier=ruleidentifier 
	 { $current=$iv_ruleidentifier.current.getText(); }  
	 EOF 
;

// Rule identifier
ruleidentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(((
	kw='$' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getDollarSignKeyword_0_0(), null); 
    }
)?    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0_1(), null); 
    }
)
    |
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getEKeyword_1(), null); 
    }

    |
	kw='f' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getFKeyword_2(), null); 
    }

    |
	kw='d' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getDKeyword_3(), null); 
    }

    |
	kw='upper' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getUpperKeyword_4(), null); 
    }

    |
	kw='lower' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getLowerKeyword_5(), null); 
    }

    |
	kw='$now' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getNowKeyword_6(), null); 
    }

    |
	kw='$today' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getTodayKeyword_7(), null); 
    }

    |
	kw='date' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getDateKeyword_8(), null); 
    }

    |
	kw='title' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getTitleKeyword_9(), null); 
    }

    |
	kw='type' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getTypeKeyword_10(), null); 
    }

    |
	kw='include' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getIncludeKeyword_11(), null); 
    }

    |
	kw='length' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getLengthKeyword_12(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getENDParserRuleCall_13(), currentNode); 
    }
    this_END_14=ruleEND    {
		$current.merge(this_END_14);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getWHENParserRuleCall_14(), currentNode); 
    }
    this_WHEN_15=ruleWHEN    {
		$current.merge(this_WHEN_15);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getFROMParserRuleCall_15(), currentNode); 
    }
    this_FROM_16=ruleFROM    {
		$current.merge(this_FROM_16);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getMEMBERParserRuleCall_16(), currentNode); 
    }
    this_MEMBER_17=ruleMEMBER    {
		$current.merge(this_MEMBER_17);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberRule(), currentNode); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getFullStopKeyword_0_0(), null); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_0(), null); 
    }
(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getEKeyword_0_1_1_0(), null); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_0_1_1_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1_1_1_1(), null); 
    }
)?    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_1_2(), null); 
    }
)?(
	kw='f' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getFKeyword_0_1_2_0(), null); 
    }

    |
	kw='d' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getDKeyword_0_1_2_1(), null); 
    }
)?)?)
    |((    this_HEX_8=RULE_HEX    {
		$current.merge(this_HEX_8);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_1_0_0(), null); 
    }

    |    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_1(), null); 
    }

    |    this_SIGNED_INT_10=RULE_SIGNED_INT    {
		$current.merge(this_SIGNED_INT_10);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getSIGNED_INTTerminalRuleCall_1_0_2(), null); 
    }
)(
	kw='l' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getLKeyword_1_1_0(), null); 
    }

    |((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_1_0_0(), null); 
    }
(    this_INT_13=RULE_INT    {
		$current.merge(this_INT_13);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_1(), null); 
    }
)?(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getEKeyword_1_1_1_0_2_0(), null); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_0_2_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_0_2_1_1(), null); 
    }
)?    this_INT_17=RULE_INT    {
		$current.merge(this_INT_17);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_2_2(), null); 
    }
)?(
	kw='f' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_0_3_0(), null); 
    }

    |
	kw='d' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_0_3_1(), null); 
    }
)?)
    |(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getEKeyword_1_1_1_1_0(), null); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_1_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_1_1_1(), null); 
    }
)?    this_INT_23=RULE_INT    {
		$current.merge(this_INT_23);
    }

    { 
    createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_1_2(), null); 
    }
(
	kw='f' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_1_3_0(), null); 
    }

    |
	kw='d' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_1_3_1(), null); 
    }
)?)
    |
	kw='f' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_2(), null); 
    }

    |
	kw='d' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_3(), null); 
    }
))?))
    ;





// Entry rule entryRuleSELECT
entryRuleSELECT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSELECTRule(), currentNode); } 
	 iv_ruleSELECT=ruleSELECT 
	 { $current=$iv_ruleSELECT.current.getText(); }  
	 EOF 
;

// Rule SELECT
ruleSELECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='SELECT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSELECTAccess().getSELECTKeyword_0(), null); 
    }

    |
	kw='Select' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSELECTAccess().getSelectKeyword_1(), null); 
    }

    |
	kw='select' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSELECTAccess().getSelectKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleDISTINCT
entryRuleDISTINCT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDISTINCTRule(), currentNode); } 
	 iv_ruleDISTINCT=ruleDISTINCT 
	 { $current=$iv_ruleDISTINCT.current.getText(); }  
	 EOF 
;

// Rule DISTINCT
ruleDISTINCT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='DISTINCT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDISTINCTAccess().getDISTINCTKeyword_0(), null); 
    }

    |
	kw='Distinct' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDISTINCTAccess().getDistinctKeyword_1(), null); 
    }

    |
	kw='distinct' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDISTINCTAccess().getDistinctKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleNEW
entryRuleNEW returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNEWRule(), currentNode); } 
	 iv_ruleNEW=ruleNEW 
	 { $current=$iv_ruleNEW.current.getText(); }  
	 EOF 
;

// Rule NEW
ruleNEW returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='NEW' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNEWAccess().getNEWKeyword_0(), null); 
    }

    |
	kw='New' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNEWAccess().getNewKeyword_1(), null); 
    }

    |
	kw='new' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNEWAccess().getNewKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleOBJECT
entryRuleOBJECT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOBJECTRule(), currentNode); } 
	 iv_ruleOBJECT=ruleOBJECT 
	 { $current=$iv_ruleOBJECT.current.getText(); }  
	 EOF 
;

// Rule OBJECT
ruleOBJECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='OBJECT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOBJECTAccess().getOBJECTKeyword_0(), null); 
    }

    |
	kw='Object' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOBJECTAccess().getObjectKeyword_1(), null); 
    }

    |
	kw='object' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOBJECTAccess().getObjectKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleFROM
entryRuleFROM returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFROMRule(), currentNode); } 
	 iv_ruleFROM=ruleFROM 
	 { $current=$iv_ruleFROM.current.getText(); }  
	 EOF 
;

// Rule FROM
ruleFROM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='FROM' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFROMAccess().getFROMKeyword_0(), null); 
    }

    |
	kw='From' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFROMAccess().getFromKeyword_1(), null); 
    }

    |
	kw='from' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFROMAccess().getFromKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleLEFT
entryRuleLEFT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLEFTRule(), currentNode); } 
	 iv_ruleLEFT=ruleLEFT 
	 { $current=$iv_ruleLEFT.current.getText(); }  
	 EOF 
;

// Rule LEFT
ruleLEFT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='LEFT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLEFTAccess().getLEFTKeyword_0(), null); 
    }

    |
	kw='Left' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLEFTAccess().getLeftKeyword_1(), null); 
    }

    |
	kw='left' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLEFTAccess().getLeftKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleRIGHT
entryRuleRIGHT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRIGHTRule(), currentNode); } 
	 iv_ruleRIGHT=ruleRIGHT 
	 { $current=$iv_ruleRIGHT.current.getText(); }  
	 EOF 
;

// Rule RIGHT
ruleRIGHT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='RIGHT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0(), null); 
    }

    |
	kw='Right' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRIGHTAccess().getRightKeyword_1(), null); 
    }

    |
	kw='right' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRIGHTAccess().getRightKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleOUTER
entryRuleOUTER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOUTERRule(), currentNode); } 
	 iv_ruleOUTER=ruleOUTER 
	 { $current=$iv_ruleOUTER.current.getText(); }  
	 EOF 
;

// Rule OUTER
ruleOUTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='OUTER' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOUTERAccess().getOUTERKeyword_0(), null); 
    }

    |
	kw='Outer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOUTERAccess().getOuterKeyword_1(), null); 
    }

    |
	kw='outer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOUTERAccess().getOuterKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleFULL
entryRuleFULL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFULLRule(), currentNode); } 
	 iv_ruleFULL=ruleFULL 
	 { $current=$iv_ruleFULL.current.getText(); }  
	 EOF 
;

// Rule FULL
ruleFULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='FULL' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFULLAccess().getFULLKeyword_0(), null); 
    }

    |
	kw='Full' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFULLAccess().getFullKeyword_1(), null); 
    }

    |
	kw='full' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFULLAccess().getFullKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleINNER
entryRuleINNER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINNERRule(), currentNode); } 
	 iv_ruleINNER=ruleINNER 
	 { $current=$iv_ruleINNER.current.getText(); }  
	 EOF 
;

// Rule INNER
ruleINNER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='INNER' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINNERAccess().getINNERKeyword_0(), null); 
    }

    |
	kw='Inner' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINNERAccess().getInnerKeyword_1(), null); 
    }

    |
	kw='inner' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINNERAccess().getInnerKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleJOIN
entryRuleJOIN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJOINRule(), currentNode); } 
	 iv_ruleJOIN=ruleJOIN 
	 { $current=$iv_ruleJOIN.current.getText(); }  
	 EOF 
;

// Rule JOIN
ruleJOIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='JOIN' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getJOINAccess().getJOINKeyword_0(), null); 
    }

    |
	kw='Join' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getJOINAccess().getJoinKeyword_1(), null); 
    }

    |
	kw='join' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getJOINAccess().getJoinKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleFETCH
entryRuleFETCH returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFETCHRule(), currentNode); } 
	 iv_ruleFETCH=ruleFETCH 
	 { $current=$iv_ruleFETCH.current.getText(); }  
	 EOF 
;

// Rule FETCH
ruleFETCH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='FETCH' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFETCHAccess().getFETCHKeyword_0(), null); 
    }

    |
	kw='Fetch' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFETCHAccess().getFetchKeyword_1(), null); 
    }

    |
	kw='fetch' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFETCHAccess().getFetchKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleWITH
entryRuleWITH returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWITHRule(), currentNode); } 
	 iv_ruleWITH=ruleWITH 
	 { $current=$iv_ruleWITH.current.getText(); }  
	 EOF 
;

// Rule WITH
ruleWITH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='WITH' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWITHAccess().getWITHKeyword_0(), null); 
    }

    |
	kw='With' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWITHAccess().getWithKeyword_1(), null); 
    }

    |
	kw='with' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWITHAccess().getWithKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleIN
entryRuleIN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINRule(), currentNode); } 
	 iv_ruleIN=ruleIN 
	 { $current=$iv_ruleIN.current.getText(); }  
	 EOF 
;

// Rule IN
ruleIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='IN' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINAccess().getINKeyword_0(), null); 
    }

    |
	kw='In' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINAccess().getInKeyword_1(), null); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINAccess().getInKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleCLASS
entryRuleCLASS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCLASSRule(), currentNode); } 
	 iv_ruleCLASS=ruleCLASS 
	 { $current=$iv_ruleCLASS.current.getText(); }  
	 EOF 
;

// Rule CLASS
ruleCLASS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='CLASS' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCLASSAccess().getCLASSKeyword_0(), null); 
    }

    |
	kw='Class' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCLASSAccess().getClassKeyword_1(), null); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCLASSAccess().getClassKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleIN_CLASS
entryRuleIN_CLASS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIN_CLASSRule(), currentNode); } 
	 iv_ruleIN_CLASS=ruleIN_CLASS 
	 { $current=$iv_ruleIN_CLASS.current.getText(); }  
	 EOF 
;

// Rule IN_CLASS
ruleIN_CLASS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIN_CLASSAccess().getINParserRuleCall_0(), currentNode); 
    }
    this_IN_0=ruleIN    {
		$current.merge(this_IN_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getIN_CLASSAccess().getCLASSParserRuleCall_1(), currentNode); 
    }
    this_CLASS_1=ruleCLASS    {
		$current.merge(this_CLASS_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleELEMENTS
entryRuleELEMENTS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getELEMENTSRule(), currentNode); } 
	 iv_ruleELEMENTS=ruleELEMENTS 
	 { $current=$iv_ruleELEMENTS.current.getText(); }  
	 EOF 
;

// Rule ELEMENTS
ruleELEMENTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='ELEMENTS' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getELEMENTSAccess().getELEMENTSKeyword_0(), null); 
    }

    |
	kw='Elements' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getELEMENTSAccess().getElementsKeyword_1(), null); 
    }

    |
	kw='elements' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getELEMENTSAccess().getElementsKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleIN_ELEMENTS
entryRuleIN_ELEMENTS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIN_ELEMENTSRule(), currentNode); } 
	 iv_ruleIN_ELEMENTS=ruleIN_ELEMENTS 
	 { $current=$iv_ruleIN_ELEMENTS.current.getText(); }  
	 EOF 
;

// Rule IN_ELEMENTS
ruleIN_ELEMENTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIN_ELEMENTSAccess().getINParserRuleCall_0(), currentNode); 
    }
    this_IN_0=ruleIN    {
		$current.merge(this_IN_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getIN_ELEMENTSAccess().getELEMENTSParserRuleCall_1(), currentNode); 
    }
    this_ELEMENTS_1=ruleELEMENTS    {
		$current.merge(this_ELEMENTS_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleAS
entryRuleAS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getASRule(), currentNode); } 
	 iv_ruleAS=ruleAS 
	 { $current=$iv_ruleAS.current.getText(); }  
	 EOF 
;

// Rule AS
ruleAS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='AS' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASAccess().getASKeyword_0(), null); 
    }

    |
	kw='As' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASAccess().getAsKeyword_1(), null); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASAccess().getAsKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRulePROPERTIES
entryRulePROPERTIES returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPROPERTIESRule(), currentNode); } 
	 iv_rulePROPERTIES=rulePROPERTIES 
	 { $current=$iv_rulePROPERTIES.current.getText(); }  
	 EOF 
;

// Rule PROPERTIES
rulePROPERTIES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='PROPERTIES' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPROPERTIESAccess().getPROPERTIESKeyword_0(), null); 
    }

    |
	kw='Properties' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_1(), null); 
    }

    |
	kw='properties' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleGROUP_BY
entryRuleGROUP_BY returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGROUP_BYRule(), currentNode); } 
	 iv_ruleGROUP_BY=ruleGROUP_BY 
	 { $current=$iv_ruleGROUP_BY.current.getText(); }  
	 EOF 
;

// Rule GROUP_BY
ruleGROUP_BY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='GROUP' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGROUP_BYAccess().getGROUPKeyword_0_0(), null); 
    }

    |
	kw='Group' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_1(), null); 
    }

    |
	kw='group' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_2(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getGROUP_BYAccess().getBYParserRuleCall_1(), currentNode); 
    }
    this_BY_3=ruleBY    {
		$current.merge(this_BY_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleORDER_BY
entryRuleORDER_BY returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getORDER_BYRule(), currentNode); } 
	 iv_ruleORDER_BY=ruleORDER_BY 
	 { $current=$iv_ruleORDER_BY.current.getText(); }  
	 EOF 
;

// Rule ORDER_BY
ruleORDER_BY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='ORDER' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getORDER_BYAccess().getORDERKeyword_0_0(), null); 
    }

    |
	kw='Order' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_1(), null); 
    }

    |
	kw='order' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_2(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getORDER_BYAccess().getBYParserRuleCall_1(), currentNode); 
    }
    this_BY_3=ruleBY    {
		$current.merge(this_BY_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleBY
entryRuleBY returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBYRule(), currentNode); } 
	 iv_ruleBY=ruleBY 
	 { $current=$iv_ruleBY.current.getText(); }  
	 EOF 
;

// Rule BY
ruleBY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='BY' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBYAccess().getBYKeyword_0(), null); 
    }

    |
	kw='By' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBYAccess().getByKeyword_1(), null); 
    }

    |
	kw='by' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBYAccess().getByKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleASC
entryRuleASC returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getASCRule(), currentNode); } 
	 iv_ruleASC=ruleASC 
	 { $current=$iv_ruleASC.current.getText(); }  
	 EOF 
;

// Rule ASC
ruleASC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='ASC' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASCAccess().getASCKeyword_0(), null); 
    }

    |
	kw='Asc' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASCAccess().getAscKeyword_1(), null); 
    }

    |
	kw='asc' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASCAccess().getAscKeyword_2(), null); 
    }

    |
	kw='ASCENDING' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASCAccess().getASCENDINGKeyword_3(), null); 
    }

    |
	kw='Ascending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASCAccess().getAscendingKeyword_4(), null); 
    }

    |
	kw='ascending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getASCAccess().getAscendingKeyword_5(), null); 
    }
)
    ;





// Entry rule entryRuleDESC
entryRuleDESC returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDESCRule(), currentNode); } 
	 iv_ruleDESC=ruleDESC 
	 { $current=$iv_ruleDESC.current.getText(); }  
	 EOF 
;

// Rule DESC
ruleDESC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='DESC' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDESCAccess().getDESCKeyword_0(), null); 
    }

    |
	kw='Desc' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDESCAccess().getDescKeyword_1(), null); 
    }

    |
	kw='desc' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDESCAccess().getDescKeyword_2(), null); 
    }

    |
	kw='DESCENDING' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDESCAccess().getDESCENDINGKeyword_3(), null); 
    }

    |
	kw='Descending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDESCAccess().getDescendingKeyword_4(), null); 
    }

    |
	kw='descending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDESCAccess().getDescendingKeyword_5(), null); 
    }
)
    ;





// Entry rule entryRuleHAVING
entryRuleHAVING returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHAVINGRule(), currentNode); } 
	 iv_ruleHAVING=ruleHAVING 
	 { $current=$iv_ruleHAVING.current.getText(); }  
	 EOF 
;

// Rule HAVING
ruleHAVING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='HAVING' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getHAVINGAccess().getHAVINGKeyword_0(), null); 
    }

    |
	kw='Having' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getHAVINGAccess().getHavingKeyword_1(), null); 
    }

    |
	kw='having' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getHAVINGAccess().getHavingKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleWHERE
entryRuleWHERE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWHERERule(), currentNode); } 
	 iv_ruleWHERE=ruleWHERE 
	 { $current=$iv_ruleWHERE.current.getText(); }  
	 EOF 
;

// Rule WHERE
ruleWHERE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='WHERE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWHEREAccess().getWHEREKeyword_0(), null); 
    }

    |
	kw='Where' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWHEREAccess().getWhereKeyword_1(), null); 
    }

    |
	kw='where' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWHEREAccess().getWhereKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleOR
entryRuleOR returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getORRule(), currentNode); } 
	 iv_ruleOR=ruleOR 
	 { $current=$iv_ruleOR.current.getText(); }  
	 EOF 
;

// Rule OR
ruleOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='OR' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getORAccess().getORKeyword_0(), null); 
    }

    |
	kw='Or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getORAccess().getOrKeyword_1(), null); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getORAccess().getOrKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleAND
entryRuleAND returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getANDRule(), currentNode); } 
	 iv_ruleAND=ruleAND 
	 { $current=$iv_ruleAND.current.getText(); }  
	 EOF 
;

// Rule AND
ruleAND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='AND' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getANDAccess().getANDKeyword_0(), null); 
    }

    |
	kw='And' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getANDAccess().getAndKeyword_1(), null); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getANDAccess().getAndKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleNOT
entryRuleNOT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNOTRule(), currentNode); } 
	 iv_ruleNOT=ruleNOT 
	 { $current=$iv_ruleNOT.current.getText(); }  
	 EOF 
;

// Rule NOT
ruleNOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='NOT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNOTAccess().getNOTKeyword_0(), null); 
    }

    |
	kw='Not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNOTAccess().getNotKeyword_1(), null); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNOTAccess().getNotKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleIS
entryRuleIS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getISRule(), currentNode); } 
	 iv_ruleIS=ruleIS 
	 { $current=$iv_ruleIS.current.getText(); }  
	 EOF 
;

// Rule IS
ruleIS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='IS' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getISAccess().getISKeyword_0(), null); 
    }

    |
	kw='Is' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getISAccess().getIsKeyword_1(), null); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getISAccess().getIsKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleBETWEEN
entryRuleBETWEEN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBETWEENRule(), currentNode); } 
	 iv_ruleBETWEEN=ruleBETWEEN 
	 { $current=$iv_ruleBETWEEN.current.getText(); }  
	 EOF 
;

// Rule BETWEEN
ruleBETWEEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='BETWEEN' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBETWEENAccess().getBETWEENKeyword_0(), null); 
    }

    |
	kw='Between' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBETWEENAccess().getBetweenKeyword_1(), null); 
    }

    |
	kw='between' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBETWEENAccess().getBetweenKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleLIKE
entryRuleLIKE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLIKERule(), currentNode); } 
	 iv_ruleLIKE=ruleLIKE 
	 { $current=$iv_ruleLIKE.current.getText(); }  
	 EOF 
;

// Rule LIKE
ruleLIKE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='LIKE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLIKEAccess().getLIKEKeyword_0(), null); 
    }

    |
	kw='Like' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLIKEAccess().getLikeKeyword_1(), null); 
    }

    |
	kw='like' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLIKEAccess().getLikeKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleMEMBER
entryRuleMEMBER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMEMBERRule(), currentNode); } 
	 iv_ruleMEMBER=ruleMEMBER 
	 { $current=$iv_ruleMEMBER.current.getText(); }  
	 EOF 
;

// Rule MEMBER
ruleMEMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='MEMBER' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMEMBERAccess().getMEMBERKeyword_0(), null); 
    }

    |
	kw='Member' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMEMBERAccess().getMemberKeyword_1(), null); 
    }

    |
	kw='member' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMEMBERAccess().getMemberKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleOF
entryRuleOF returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOFRule(), currentNode); } 
	 iv_ruleOF=ruleOF 
	 { $current=$iv_ruleOF.current.getText(); }  
	 EOF 
;

// Rule OF
ruleOF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='OF' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOFAccess().getOFKeyword_0(), null); 
    }

    |
	kw='Of' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOFAccess().getOfKeyword_1(), null); 
    }

    |
	kw='of' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOFAccess().getOfKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleESCAPE
entryRuleESCAPE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getESCAPERule(), currentNode); } 
	 iv_ruleESCAPE=ruleESCAPE 
	 { $current=$iv_ruleESCAPE.current.getText(); }  
	 EOF 
;

// Rule ESCAPE
ruleESCAPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='ESCAPE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getESCAPEAccess().getESCAPEKeyword_0(), null); 
    }

    |
	kw='Escape' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getESCAPEAccess().getEscapeKeyword_1(), null); 
    }

    |
	kw='escape' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getESCAPEAccess().getEscapeKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleCASE
entryRuleCASE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCASERule(), currentNode); } 
	 iv_ruleCASE=ruleCASE 
	 { $current=$iv_ruleCASE.current.getText(); }  
	 EOF 
;

// Rule CASE
ruleCASE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='CASE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCASEAccess().getCASEKeyword_0(), null); 
    }

    |
	kw='Case' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCASEAccess().getCaseKeyword_1(), null); 
    }

    |
	kw='case' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCASEAccess().getCaseKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleEND
entryRuleEND returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getENDRule(), currentNode); } 
	 iv_ruleEND=ruleEND 
	 { $current=$iv_ruleEND.current.getText(); }  
	 EOF 
;

// Rule END
ruleEND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='END' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getENDAccess().getENDKeyword_0(), null); 
    }

    |
	kw='End' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getENDAccess().getEndKeyword_1(), null); 
    }

    |
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getENDAccess().getEndKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleWHEN
entryRuleWHEN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWHENRule(), currentNode); } 
	 iv_ruleWHEN=ruleWHEN 
	 { $current=$iv_ruleWHEN.current.getText(); }  
	 EOF 
;

// Rule WHEN
ruleWHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='WHEN' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWHENAccess().getWHENKeyword_0(), null); 
    }

    |
	kw='When' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWHENAccess().getWhenKeyword_1(), null); 
    }

    |
	kw='when' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWHENAccess().getWhenKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleTHEN
entryRuleTHEN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTHENRule(), currentNode); } 
	 iv_ruleTHEN=ruleTHEN 
	 { $current=$iv_ruleTHEN.current.getText(); }  
	 EOF 
;

// Rule THEN
ruleTHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='THEN' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTHENAccess().getTHENKeyword_0(), null); 
    }

    |
	kw='Then' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTHENAccess().getThenKeyword_1(), null); 
    }

    |
	kw='then' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTHENAccess().getThenKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleELSE
entryRuleELSE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getELSERule(), currentNode); } 
	 iv_ruleELSE=ruleELSE 
	 { $current=$iv_ruleELSE.current.getText(); }  
	 EOF 
;

// Rule ELSE
ruleELSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='ELSE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getELSEAccess().getELSEKeyword_0(), null); 
    }

    |
	kw='Else' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getELSEAccess().getElseKeyword_1(), null); 
    }

    |
	kw='else' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getELSEAccess().getElseKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleSOME
entryRuleSOME returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSOMERule(), currentNode); } 
	 iv_ruleSOME=ruleSOME 
	 { $current=$iv_ruleSOME.current.getText(); }  
	 EOF 
;

// Rule SOME
ruleSOME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='SOME' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSOMEAccess().getSOMEKeyword_0(), null); 
    }

    |
	kw='Some' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSOMEAccess().getSomeKeyword_1(), null); 
    }

    |
	kw='some' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSOMEAccess().getSomeKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleEXISTS
entryRuleEXISTS returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEXISTSRule(), currentNode); } 
	 iv_ruleEXISTS=ruleEXISTS 
	 { $current=$iv_ruleEXISTS.current.getText(); }  
	 EOF 
;

// Rule EXISTS
ruleEXISTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='EXISTS' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEXISTSAccess().getEXISTSKeyword_0(), null); 
    }

    |
	kw='Exists' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEXISTSAccess().getExistsKeyword_1(), null); 
    }

    |
	kw='exists' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEXISTSAccess().getExistsKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleALL
entryRuleALL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getALLRule(), currentNode); } 
	 iv_ruleALL=ruleALL 
	 { $current=$iv_ruleALL.current.getText(); }  
	 EOF 
;

// Rule ALL
ruleALL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='ALL' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getALLAccess().getALLKeyword_0(), null); 
    }

    |
	kw='All' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getALLAccess().getAllKeyword_1(), null); 
    }

    |
	kw='all' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getALLAccess().getAllKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleANY
entryRuleANY returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getANYRule(), currentNode); } 
	 iv_ruleANY=ruleANY 
	 { $current=$iv_ruleANY.current.getText(); }  
	 EOF 
;

// Rule ANY
ruleANY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='ANY' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getANYAccess().getANYKeyword_0(), null); 
    }

    |
	kw='Any' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getANYAccess().getAnyKeyword_1(), null); 
    }

    |
	kw='any' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getANYAccess().getAnyKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleSUM
entryRuleSUM returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSUMRule(), currentNode); } 
	 iv_ruleSUM=ruleSUM 
	 { $current=$iv_ruleSUM.current.getText(); }  
	 EOF 
;

// Rule SUM
ruleSUM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='SUM' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSUMAccess().getSUMKeyword_0(), null); 
    }

    |
	kw='Sum' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSUMAccess().getSumKeyword_1(), null); 
    }

    |
	kw='sum' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSUMAccess().getSumKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleAVG
entryRuleAVG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAVGRule(), currentNode); } 
	 iv_ruleAVG=ruleAVG 
	 { $current=$iv_ruleAVG.current.getText(); }  
	 EOF 
;

// Rule AVG
ruleAVG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='AVG' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAVGAccess().getAVGKeyword_0(), null); 
    }

    |
	kw='Avg' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAVGAccess().getAvgKeyword_1(), null); 
    }

    |
	kw='avg' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAVGAccess().getAvgKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleMAX
entryRuleMAX returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMAXRule(), currentNode); } 
	 iv_ruleMAX=ruleMAX 
	 { $current=$iv_ruleMAX.current.getText(); }  
	 EOF 
;

// Rule MAX
ruleMAX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='MAX' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMAXAccess().getMAXKeyword_0(), null); 
    }

    |
	kw='Max' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMAXAccess().getMaxKeyword_1(), null); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMAXAccess().getMaxKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleMIN
entryRuleMIN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMINRule(), currentNode); } 
	 iv_ruleMIN=ruleMIN 
	 { $current=$iv_ruleMIN.current.getText(); }  
	 EOF 
;

// Rule MIN
ruleMIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='MIN' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMINAccess().getMINKeyword_0(), null); 
    }

    |
	kw='Min' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMINAccess().getMinKeyword_1(), null); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMINAccess().getMinKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleCOUNT
entryRuleCOUNT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCOUNTRule(), currentNode); } 
	 iv_ruleCOUNT=ruleCOUNT 
	 { $current=$iv_ruleCOUNT.current.getText(); }  
	 EOF 
;

// Rule COUNT
ruleCOUNT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='COUNT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCOUNTAccess().getCOUNTKeyword_0(), null); 
    }

    |
	kw='Count' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCOUNTAccess().getCountKeyword_1(), null); 
    }

    |
	kw='count' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCOUNTAccess().getCountKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleINDICES
entryRuleINDICES returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINDICESRule(), currentNode); } 
	 iv_ruleINDICES=ruleINDICES 
	 { $current=$iv_ruleINDICES.current.getText(); }  
	 EOF 
;

// Rule INDICES
ruleINDICES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='INDICES' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINDICESAccess().getINDICESKeyword_0(), null); 
    }

    |
	kw='Indices' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINDICESAccess().getIndicesKeyword_1(), null); 
    }

    |
	kw='indices' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINDICESAccess().getIndicesKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleTRAILING
entryRuleTRAILING returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTRAILINGRule(), currentNode); } 
	 iv_ruleTRAILING=ruleTRAILING 
	 { $current=$iv_ruleTRAILING.current.getText(); }  
	 EOF 
;

// Rule TRAILING
ruleTRAILING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='TRAILING' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTRAILINGAccess().getTRAILINGKeyword_0(), null); 
    }

    |
	kw='Trailing' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTRAILINGAccess().getTrailingKeyword_1(), null); 
    }

    |
	kw='trailing' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTRAILINGAccess().getTrailingKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleLEADING
entryRuleLEADING returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLEADINGRule(), currentNode); } 
	 iv_ruleLEADING=ruleLEADING 
	 { $current=$iv_ruleLEADING.current.getText(); }  
	 EOF 
;

// Rule LEADING
ruleLEADING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='LEADING' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLEADINGAccess().getLEADINGKeyword_0(), null); 
    }

    |
	kw='Leading' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLEADINGAccess().getLeadingKeyword_1(), null); 
    }

    |
	kw='leading' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLEADINGAccess().getLeadingKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleBOTH
entryRuleBOTH returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBOTHRule(), currentNode); } 
	 iv_ruleBOTH=ruleBOTH 
	 { $current=$iv_ruleBOTH.current.getText(); }  
	 EOF 
;

// Rule BOTH
ruleBOTH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='BOTH' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOTHAccess().getBOTHKeyword_0(), null); 
    }

    |
	kw='Both' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOTHAccess().getBothKeyword_1(), null); 
    }

    |
	kw='both' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOTHAccess().getBothKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleNULL
entryRuleNULL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNULLRule(), currentNode); } 
	 iv_ruleNULL=ruleNULL 
	 { $current=$iv_ruleNULL.current.getText(); }  
	 EOF 
;

// Rule NULL
ruleNULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='NULL' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNULLAccess().getNULLKeyword_0(), null); 
    }

    |
	kw='Null' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNULLAccess().getNullKeyword_1(), null); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNULLAccess().getNullKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleTRUE
entryRuleTRUE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTRUERule(), currentNode); } 
	 iv_ruleTRUE=ruleTRUE 
	 { $current=$iv_ruleTRUE.current.getText(); }  
	 EOF 
;

// Rule TRUE
ruleTRUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='TRUE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTRUEAccess().getTRUEKeyword_0(), null); 
    }

    |
	kw='True' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTRUEAccess().getTrueKeyword_1(), null); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTRUEAccess().getTrueKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleFALSE
entryRuleFALSE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFALSERule(), currentNode); } 
	 iv_ruleFALSE=ruleFALSE 
	 { $current=$iv_ruleFALSE.current.getText(); }  
	 EOF 
;

// Rule FALSE
ruleFALSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='FALSE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFALSEAccess().getFALSEKeyword_0(), null); 
    }

    |
	kw='False' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFALSEAccess().getFalseKeyword_1(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFALSEAccess().getFalseKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleEMPTY
entryRuleEMPTY returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEMPTYRule(), currentNode); } 
	 iv_ruleEMPTY=ruleEMPTY 
	 { $current=$iv_ruleEMPTY.current.getText(); }  
	 EOF 
;

// Rule EMPTY
ruleEMPTY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='EMPTY' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEMPTYAccess().getEMPTYKeyword_0(), null); 
    }

    |
	kw='Empty' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEMPTYAccess().getEmptyKeyword_1(), null); 
    }

    |
	kw='empty' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEMPTYAccess().getEmptyKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRulekeyword
entryRulekeyword returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeywordRule(), currentNode); } 
	 iv_rulekeyword=rulekeyword 
	 { $current=$iv_rulekeyword.current.getText(); }  
	 EOF 
;

// Rule keyword
rulekeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='all' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getAllKeyword_0(), null); 
    }

    |
	kw='length' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getLengthKeyword_1(), null); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getCharKeyword_2(), null); 
    }

    |
	kw='type' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getTypeKeyword_3(), null); 
    }

    |
	kw='file' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getFileKeyword_4(), null); 
    }

    |
	kw='text' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getTextKeyword_5(), null); 
    }

    |
	kw='title' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getTitleKeyword_6(), null); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getMaxKeyword_7(), null); 
    }

    |
	kw='when' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getWhenKeyword_8(), null); 
    }

    |
	kw='member' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getMemberKeyword_9(), null); 
    }

    |
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getEndKeyword_10(), null); 
    }

    |
	kw='object' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getObjectKeyword_11(), null); 
    }

    |
	kw='date' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeywordAccess().getDateKeyword_12(), null); 
    }
)
    ;





RULE_LINEBREAK : ('\n'|'\r' '\n'|'\r');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SIGNED_INT : ('-'|'+') RULE_INT;

RULE_HEX : '0x' ('0'..'9'|'a'..'f')+;

RULE_INT : ('0'..'9')+;

RULE_FIELDCOMMENT : ';' ~(('\n'|'\r'))*;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r' '\n'|'\n'|'\r');

RULE_STRING : ('"' ('\\' '"'|~('"'))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');


