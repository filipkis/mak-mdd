/*
 * generated by Xtext
 */
package org.makumba.devel.plugin.eclipse.mdd.scoping;

import static org.eclipse.xtext.scoping.Scopes.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.makumba.devel.plugin.eclipse.mdd.MDDUtils;
import org.makumba.devel.plugin.eclipse.mdd.editor.dataDefinition;
import org.makumba.devel.plugin.eclipse.mdd.editor.declaration;
import org.makumba.devel.plugin.eclipse.mdd.editor.fieldDeclaration;
import org.makumba.devel.plugin.eclipse.mdd.editor.pointer;
import org.makumba.devel.plugin.eclipse.mdd.editor.setType;
import org.makumba.devel.plugin.eclipse.mdd.editor.subFieldDeclaration;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class MDDScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_subFieldDeclaration_subFieldOf(subFieldDeclaration context, EReference reference){
		Iterable<declaration> declarations = MDDUtils.getSiblingsOf(context);
		
		Iterable<fieldDeclaration> fields =Iterables.filter(declarations, fieldDeclaration.class);
		fields = Iterables.filter(fields, new Predicate<fieldDeclaration>() {
			public boolean apply(fieldDeclaration field){
				return field.getTypedef() instanceof setType || field.getTypedef() instanceof pointer;
			}
		});
		
		return scopeFor(fields);
	}
	

}
